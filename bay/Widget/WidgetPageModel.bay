/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.WidgetDebug;

use Runtime.lib;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseModel;
use Runtime.Web.BasePageModel;
use Runtime.Web.RenderProvider;
use BayLang.SaveOpCode;
use BayLang.LangES6.TranslatorES6;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.Constructor.WidgetDebug.WidgetPage;


class WidgetPageModel extends BasePageModel
{
	string component = classof WidgetPage;
	string current_widget = "";
	string model_content = "";
	string component_content = "";
	var selected_box = null;
	var selected_elem = null;
	BaseOpCode selected_op_code = null;
	Collection<int> selected_path = null;
	var widget_component = null;
	BaseOpCode component_op_code = null;
	BaseModel widget_model = null;
	TranslatorES6 translator = null;
	Map components = {};
	
	 
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		this.current_widget = this.layout.request_query.get("widget_name");
		this.translator = new TranslatorES6();
		
		/* Add event listeners */
		RenderProvider provider = @.provider(classof RenderProvider);
		provider.events.add("onBeforeUpdate", method this.updateComponent);
		provider.events.add("onMounted", method this.addComponent);
		provider.events.add("onUnmount", method this.removeComponent);
	}
	
	
	/**
	 * Load widget
	 */
	async void loadWidget()
	{
		ApiResult res = await this.layout.callApi({
			"service": "constructor",
			"api_name": "admin.constructor.widget",
			"method_name": "getOpCode",
			"data": {
				"project_id": this.getProjectID(),
				"current_widget": this.current_widget,
			}
		});
		
		if (res.isSuccess())
		{
			this.component_content = res.data.get("component_content");
			this.component_op_code = res.data.get("component_op_code");
			this.model_content = res.data.get("model_content");
			
			/* Create widget model */
			this.widget_model = this.addWidget(
				this.current_widget,
				{
					"Widget_name": "current_widget",
				}
			);
			
			/* App is loaded */
			this.sendAppLoaded();
		}
	}
	
	
	/**
	 * Select item
	 */
	void selectItem(Collection<int> path, BaseOpCode op_code)
	{
		this.selected_path = path;
		this.selected_op_code = op_code;
		RenderProvider::nextTick(
			void () use (path, op_code)
			{
				string path_str = "0." ~ rs::join(".", path);
				var component = this.components.get(path_str);
				var elem;
				
				/* Setup component */
				if (component)
				{
					#ifcode JAVASCRIPT then
					elem = component.$el;
					#endif
				}
				else
				{
					string selector = ".debug_component[data-widget-path=\"" ~ path_str ~ "\"]";
					elem = document.querySelector(selector);
				}
				
				/* Setup element */
				this.selected_elem = elem;
				this.updateSelectedBox();
			}
		);
	}
	
	
	/**
	 * Get render expression
	 */
	OpDeclareFunction getRenderOpCode(string render_name = "render")
	{
		if (not this.component_op_code) return null;
		
		OpDeclareClass op_code_class = this.component_op_code.findClass();
		if (not op_code_class) return null;
		
		OpDeclareFunction op_code_render = op_code_class.findFunction(render_name);
		return op_code_render;
	}
	
	
	/**
	 * Build render function
	 */
	void buildRender(string render_name = "render")
	{
		OpDeclareFunction op_code_render = this.getRenderOpCode(render_name);
		if (not op_code_render) return;
		
		/* Reset translator */
		TranslatorES6 t = TranslatorES6::reset(this.translator);
		if (this.component_op_code.uses != null)
		{
			t <= modules <= this.component_op_code.uses;
		}
		
		/* Enable debug */
		t = t.setFlag("DEBUG_COMPONENT", true);
		
		/* Save op codes */
		string content = "";
		Collection<SaveOpCode> save_op_codes = t.save_op_codes;
		int save_op_code_inc = t.save_op_code_inc;
		
		/* Translate expression */
		list res = t.expression::OpDeclareFunction(t, op_code_render, false);
		t = res.get(0);
		
		/* Output save op code */
		string save = t::outputSaveOpCode(t, save_op_codes.count());
		if (save != "") content ~= save;
		content ~= res.get(1);
		content = t.program::removeContext(content);
		content = rs::trim(content);
		/* log(content); */
		this.widget_component.render = window.eval("fn_new = " + content + ";");
		this.widget_component.reload();
	}
	
	
	/**
	 * Send select item
	 */
	void sendSelectItem(Collection<int> path)
	{
		BasePageModel page_model = window.parent.app_layout.getPageModel();
		string page_model_class_name = page_model::getClassName();
		if (page_model_class_name != "BayLang.Constructor.Frontend.Editor.WidgetEditPageModel") return;
		window.parent.app_layout.getPageModel().tree.selectItem(path);
	}
	
	
	/**
	 * Send loaded
	 */
	void sendAppLoaded()
	{
		BasePageModel page_model = window.parent.app_layout.getPageModel();
		string page_model_class_name = page_model::getClassName();
		if (page_model_class_name != "BayLang.Constructor.Frontend.Editor.WidgetEditPageModel") return;
		window.parent.app_layout.getPageModel().appLoaded();
	}
	
	
	/**
	 * Add component
	 */
	void addComponent(var component)
	{
		if (not component.data_widget_path) return;
		component._old_data_widget_path = component.data_widget_path;
		this.components.set(component.data_widget_path, component);
	}
	
	
	/**
	 * Remove component
	 */
	void removeComponent(var component)
	{
		if (not component._old_data_widget_path) return;
		this.components.remove(component._old_data_widget_path);
		component._old_data_widget_path = null;
	}
	
	
	/**
	 * Update component
	 */
	void updateComponent(var component)
	{
		var old_component = null;
		string old_data_widget_path = component._old_data_widget_path;
		string new_data_widget_path = component.data_widget_path;
		
		if (old_data_widget_path == new_data_widget_path) return;
		
		/* Remove old component */
		old_component = old_data_widget_path ? this.components.get(old_data_widget_path) : null;
		if (old_component)
		{
			this.removeComponent(old_component);
		}
		
		/* Remove new component */
		old_component = new_data_widget_path ? this.components.get(new_data_widget_path) : null;
		if (old_component)
		{
			this.removeComponent(old_component);
		}
		
		/* Add new component */
		this.addComponent(component);
	}
	
	
	/**
	 * Update box styles
	 */
	void updateSelectedBox()
	{
		if (this.selected_elem)
		{
			this.selected_box = static::getBoxStyles(this.selected_elem);
		}
		else
		{
			this.selected_box = null;
		}
	}
	
	
	/**
	 * Returns box styles by element
	 */
	static Dict getBoxStyles(var elem)
	{
		int left, top, width, height;
		
		left = elem.offsetLeft;
		top = elem.offsetTop;
		width = elem.clientWidth - 1;
		height = elem.clientHeight - 1;
		
		Map box = {};
		box.set("left", rs::join(";", [
			"left: " ~ left ~ "px",
			"top: " ~ top ~ "px",
			"width: 1px",
			"height: " ~ height ~ "px",
		]));
		box.set("top", rs::join(";", [
			"left: " ~ left ~ "px",
			"top: " ~ top ~ "px",
			"width: " ~ width ~ "px",
			"height: 1px",
		]));
		box.set("right", rs::join(";", [
			"left: " ~ (left + width) ~ "px",
			"top: " ~ top ~ "px",
			"width: 1px",
			"height: " ~ height ~ "px",
		]));
		box.set("bottom", rs::join(";", [
			"left: " ~ left ~ "px",
			"top: " ~ (top + height) ~ "px",
			"width: " ~ width ~ "px",
			"height: 1px",
		]));
		box.set("box", rs::join(";", [
			"left: " ~ left ~ "px",
			"top: " ~ top ~ "px",
			"width: " ~ width ~ "px",
			"height: " ~ height ~ "px",
		]));
		
		return box;
	}
	
	
	/**
	 * Returns project ID
	 */
	string getProjectID()
	{
		string route_prefix = @.env("ROUTE_PREFIX");
		Collection<string> arr = rs::split("/", route_prefix);
		arr = arr.filter(lib::equalNot(""));
		return arr.get(1);
	}
}