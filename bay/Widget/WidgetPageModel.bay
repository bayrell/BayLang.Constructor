/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.WidgetDebug;

use Runtime.lib;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseModel;
use Runtime.Web.BasePageModel;
use BayLang.SaveOpCode;
use BayLang.LangES6.TranslatorES6;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.Constructor.WidgetDebug.WidgetPage;


class WidgetPageModel extends BasePageModel
{
	string component = classof WidgetPage;
	string current_widget = "";
	string model_content = "";
	string component_content = "";
	var widget_component = null;
	BaseOpCode component_op_code = null;
	BaseModel widget_model = null;
	TranslatorES6 translator = null;
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		this.current_widget = this.layout.request_query.get("widget_name");
		this.translator = new TranslatorES6();
	}
	
	
	/**
	 * Load widget
	 */
	async void loadWidget()
	{
		ApiResult res = await this.layout.callApi({
			"service": "constructor",
			"api_name": "admin.constructor.widget",
			"method_name": "getOpCode",
			"data": {
				"project_id": this.getProjectID(),
				"current_widget": this.current_widget,
			}
		});
		
		if (res.isSuccess())
		{
			this.component_content = res.data.get("component_content");
			this.component_op_code = res.data.get("component_op_code");
			this.model_content = res.data.get("model_content");
			
			/* Create widget model */
			this.widget_model = this.addWidget(
				this.current_widget,
				{
					"Widget_name": "current_widget",
				}
			);
			
			/* App is loaded */
			this.sendAppLoaded();
		}
	}
	
	
	/**
	 * Build render function
	 */
	void buildRender(string render_name)
	{
		OpDeclareClass op_code_class = this.component_op_code.findClass();
		if (not op_code_class) return;
		
		OpDeclareFunction render = op_code_class.findFunction(render_name);
		if (not render) return;
		
		/* Reset translator */
		TranslatorES6 t = TranslatorES6::reset(this.translator);
		
		string content = "";
		Collection<SaveOpCode> save_op_codes = t.save_op_codes;
		int save_op_code_inc = t.save_op_code_inc;
		
		/* Translate expression */
		list res = t.expression::OpDeclareFunction(t, render, false);
		t = res.get(0);
		
		/* Output save op code */
		string save = t::outputSaveOpCode(t, save_op_codes.count());
		if (save != "") content ~= save;
		content ~= res.get(1);
		content = t.program::removeContext(content);
		content = rs::trim(content);
		
		this.widget_component.render = window.eval("fn_new = " + content + ";");
		this.widget_component.reload();
	}
	
	
	/**
	 * Update
	 */
	void updateText(string text)
	{
		string render_name = "render";
		
		OpDeclareClass op_code_class = this.component_op_code.findClass();
		OpDeclareFunction render = op_code_class.findFunction(render_name);
		
		/* Change render */
		var a = render.expression.items.get(0);
		a = a.items.items.get(0);
		a = a.items.items.get(0);
		a.value = text;
		
		this.buildRender("render");
	}
	
	
	/**
	 * Send loaded
	 */
	void sendAppLoaded()
	{
		BasePageModel page_model = window.parent.app_layout.getPageModel();
		string page_model_class_name = page_model::getClassName();
		if (page_model_class_name != "BayLang.Constructor.Frontend.Editor.WidgetEditPageModel") return;
		window.parent.app_layout.getPageModel().appLoaded();
	}
	
	
	/**
	 * Returns project ID
	 */
	string getProjectID()
	{
		string route_prefix = @.env("ROUTE_PREFIX");
		Collection<string> arr = rs::split("/", route_prefix);
		arr = arr.filter(lib::equalNot(""));
		return arr.get(1);
	}
}