<!--
 *  BayLang Constructor
-->

<class name="BayLang.Constructor.WidgetDebug.WidgetPage">

<use name="Runtime.Web.BaseLayoutModel" />
<use name="Runtime.Widget.Button" component="true" />


<style global="true">
body, html {
	font-family: var(--widget-font-family);
	font-size: var(--widget-font-size);
	line-height: var(--widget-line-height);
	width: 100%;
	padding: 0;
	margin: 0;
}
.widget_box__item{
	position: absolute;
	border-style: none;
	border-width: 0;
	border-color: transparent
}
.widget_box__item--hover{
	border-style: dashed;
}
.widget_box__item--current{
	border-style: solid;
}
.widget_box__item--top{
	border-top-width: 1px;
	border-top-color: var(--widget-color-border);
}
.widget_box__item--left{
	border-left-width: 1px;
	border-left-color: var(--widget-color-border);
}
.widget_box__item--bottom{
	border-bottom-width: 1px;
	border-bottom-color: var(--widget-color-border);
}
.widget_box__item--right{
	border-right-width: 1px;
	border-right-color: var(--widget-color-border);
}
</style>


<template name="renderStyle">
	<style>{{ this.model.widget_css }}</style>
</template>


<template name="renderSelectedBox">
	%if (this.model.selected_box)
	{
		<div class="widget_box__item widget_box__item--top widget_box__item--current"
			style={{ this.model.selected_box.get("top") }}></div>
		<div class="widget_box__item widget_box__item--bottom widget_box__item--current"
			style={{ this.model.selected_box.get("bottom") }}></div>
		<div class="widget_box__item widget_box__item--left widget_box__item--current"
			style={{ this.model.selected_box.get("left") }}></div>
		<div class="widget_box__item widget_box__item--right widget_box__item--current"
			style={{ this.model.selected_box.get("right") }}></div>
	}
</template>


<template>
	<div class="widget_page"
		@event:click={{ this.onClick }}
		@event:contextmenu={{ this.onContextMenu }}
	>
		%render this.renderStyle();
		%render this.renderWidget(this.model.widget_model, {"ref": "widget_component"});
		%render this.renderSelectedBox();
	</div>
</template>


<script>

/**
 * Returns component
 */
Collection<int> getComponent(var elem)
{
	#ifcode JAVASCRIPT then
	while (elem != null)
	{
		if (elem.classList.contains("debug_component"))
		{
			return elem;
		}
		if (elem.__component__)
		{
			return elem;
		}
		elem = elem.parentElement;
	}
	return elem;
	#endif
}


/**
 * Returns widget path
 */
Collection<int> getWidgetPath(var elem)
{
	elem = this.getComponent(elem);
	if (elem.hasAttribute("data-widget-path"))
	{
		return elem.getAttribute("data-widget-path");
	}
	return elem.__component__.data_widget_path;
}


/**
 * Click
 */
void onClick(var e)
{
	var elem = e.target;
	
	/* Get widget path */
	string widget_path_str = this.getWidgetPath(elem);
	if (not widget_path_str) return;
	
	/* Get page model */
	var page_model = this.model.getEditPageModel();
	if (not page_model) return;
	
	/* Prevent default */
	e.preventDefault();
	
	Collection<int> widget_path = rs::split(".", widget_path_str);
	Collection<int> path = this.model.convertWidgetToTreePath(widget_path);
	page_model.tree.selectItem(path);
	return false;
}


/**
 * Context menu click
 */
void onContextMenu(var e)
{
	var elem = e.target;
	
	/* Get widget path */
	string widget_path_str = this.getWidgetPath(elem);
	if (not widget_path_str) return;
	
	/* Get page model */
	var page_model = this.model.getEditPageModel();
	if (not page_model) return;
	
	/* Prevent default */
	e.preventDefault();
	
	/* Send select item */
	Collection<int> widget_path = rs::split(".", widget_path_str);
	Collection<int> path = this.model.convertWidgetToTreePath(widget_path);
	page_model.tree.selectItem(path);
	
	/* Send event context menu */
	page_model.editorContextMenuClick(e);
	return false;
}


/**
 * Mounted
 */
async void onMounted()
{
	this.nextTick(void (){
		this.model.widget_component = this.getRef("widget_component");
		this.model.buildRender();
		this.model.buildCSS();
		this.model.buildGlobalCSS();
		this.model.sendAppLoaded();
	});
}

</script>


</class>