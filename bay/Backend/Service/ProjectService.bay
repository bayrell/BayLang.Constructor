/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Backend.Service;

use Runtime.fs;
use Runtime.Web.Crud.CrudService;
use Runtime.Web.Crud.Rules.MatchRule;
use Runtime.Web.Crud.Rules.Required;
use BayLang.Constructor.Backend.ApiHook;
use BayLang.Helper.Project;


class ProjectService extends CrudService
{
	/**
	 * Init rules
	 */
	void initRules()
	{
		this.rules.addRules([
			new MatchRule{"name": "id", "regular": MatchRule::ALPHA_NUMERIC_DASH},
			new Required{"name": "id", "check_update": false},
			new Required{"name": "name"},
		]);
	}
	
	
	/**
	 * Returns save fields
	 */
	Collection getSaveFields() =>
	[
		"id",
		"name",
		"description",
	];
	
	
	/**
	 * New item
	 */
	async Dict newItem() => new Project(null);
	
	
	/**
	 * Find item
	 */
	async Dict findItem(Dict pk)
	{
		string project_id = pk.get("id");
		return await ApiHook::getProject(project_id);
	}
	
	
	/**
	 * Convert item
	 */
	Dict convertItem(Project item, Collection fields)
	{
		/* Get domains */
		Collection<string> domains = [];
		if (this.item.info and this.item.info.has("domains"))
		{
			domains = this.item.info.get("domains");
		}
		
		/* Get data */
		Dict data =
		{
			"id": item.getID(),
			"name": item.getName(),
			"description": item.getDescription(),
			"domains": domains,
		};
		
		return data.intersect(fields);
	}
	
	
	/**
	 * Set item
	 */
	void setItemValue(Project item, string key, var value)
	{
		if (key == "name")
		{
			item.setName(value);
		}
		else if (key == "description")
		{
			item.setDescription(value);
		}
	}
	
	
	/**
	 * Save item
	 */
	async void saveItem()
	{
		/* Save project */
		await this.item.saveInfo();
	}
	
	
	/**
	 * Reload
	 */
	async bool reload(Dict post_data)
	{
		this.setAction("reload");
		this.setPostData(post_data);
		
		/* Load data */
		await this.loadItem(false);
		if (this.item == null) return false;
		
		/* Project path */
		string project_path = this.item.getPath();
		string cache_path = fs::join([project_path, ".cache"]);
		
		/* Remove cache */
		#ifcode PHP then
		shell_exec("rm -rf $cache_path");
		#endif
		
		/* Load project */
		await this.item.load();
		return true;
	}
}