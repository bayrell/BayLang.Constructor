/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Backend.Api;

use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Widget.Crud.CrudService;
use Runtime.Widget.Crud.SaveApi;
use BayLang.Constructor.Backend.Service.WidgetService;


class WidgetSaveApi extends SaveApi
{
	/**
	 * Returns api name
	 */
	static string getApiName() => "baylang.constructor.widget.save";
	
	
	/**
	 * Returns service
	 */
	CrudService createService() => new WidgetService();
	
	
	/**
	 * Returns item fields
	 */
	Collection getItemFields() =>
	[
		"id",
		"module_id",
	];
	
	
	/**
	 * Action save
	 */
	@ApiMethod
	async void actionSave()
	{
		/* Create service */
		CrudService service = this.createService();
		service.setCreate(true);
		
		/* Get foreign_key */
		Dict foreign_key = this.post_data.get("foreign_key");
		if (foreign_key == null)
		{
			throw new ApiError(new RuntimeException("Foreign key not found"));
		}
		
		/* Load project */
		await service.loadProject(foreign_key.get("project_id"));
		
		/* Load modules */
		await service.loadModule(foreign_key.get("module_id"));
		
		/* Save item */
		await service.save(this.post_data.get("item"));
		
		/* Build result */
		this.buildResult(service);
	}
	
	
	/**
	 * Action delete
	 */
	@ApiMethod
	async void actionDelete()
	{
		/* Create service */
		CrudService service = this.createService();
		
		/* Get foreign_key */
		Dict foreign_key = this.post_data.get("foreign_key");
		if (foreign_key == null)
		{
			throw new ApiError(new RuntimeException("Foreign key not found"));
		}
		
		/* Load project */
		await service.loadProject(foreign_key.get("project_id"));
		
		/* Load modules */
		await service.loadModule(foreign_key.get("module_id"));
		
		/* Load item */
		await service.loadItem(this.post_data.get("pk"));
		
		/* Delete item */
		await service.delete();
		
		/* Build result */
		this.buildResult(service);
	}
}