/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Backend.Api;

use Runtime.fs;
use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Widget.Crud.CrudApi;
use Runtime.Widget.Crud.Rules.CrudRule;
use Runtime.Widget.Crud.Rules.Required;
use BayLang.Helper.Module;
use BayLang.Helper.Project;
use BayLang.Helper.Widget;


class WidgetCrudApi extends CrudApi
{
	/**
	 * Returns api name
	 */
	pure string getApiName() => "admin.constructor.widget::crud";
	
	
	/**
	 * Returns item fields
	 */
	Vector getItemFields() =>
	[
		"id",
	];
	
	
	/**
	 * Returns save fields
	 */
	Vector getSaveFields() => [
	];
	
	
	/**
	 * Returns rules
	 */
	Vector<CrudRule> getRules() =>
	[
		new Required{ "name": "name" },
	];
	
	
	/**
	 * Convert item
	 */
	Map convertItem(Collection fields, Dict item)
	{
		return {
			"name": item.get("name"),
			"module": item.get("module"),
		};
	}
	
	
	/**
	 * Returns item primary key
	 */
	Map getItemPrimaryKey(Dict item) => {
		"name": item.get("name"),
	};
	
	
	/**
	 * Search items
	 */
	async void searchItems()
	{
		this.page = 1;
		this.items = [];
		
		string project_id = this.post_data.get("project_id");
		this.project = await Project::readProject(
			fs::join([@.env("constructor_path"), "projects", project_id])
		);
		if (not this.project) return;
		
		/* Load project */
		await this.project.load();
		
		if (this.project.modules != null)
		{
			Collection<string> modules = this.project.modules.keys();
			for (int i=0; i<modules.count(); i++)
			{
				string module_name = modules.get(i);
				Module module = this.project.modules.get(module_name);
				this.items.appendItems(
					module.getWidgets().map(
						Dict (Widget widget) use (module_name) => {
							"name": widget.name,
							"module": module_name,
						}
					)
				);
			}
			this.items = this.items.sort();
		}
	}
	
	
	/**
	 * Find item by primary key
	 */
	async void findItem(Dict pk)
	{
		if (pk == null) return;
		
		string module_id = pk.get("id");
		string project_id = this.post_data.get("project_id");
		this.project = await Project::readProject(
			fs::join([@.env("constructor_path"), project_id])
		);
		
		if (not this.project) return;
	}
	
	
	/**
	 * Create new relation
	 */
	async var newRelation()
	{
		throw new ApiError(new RuntimeException("Method not allowed"));
	}
	
	
	/**
	 * Update item
	 */
	async void updateItem(Map update_data)
	{
		throw new ApiError(new RuntimeException("Method not allowed"));
	}
	
	
	/**
	 * Action search
	 */
	@ApiMethod
	async void actionSearch()
	{
		await parent();
	}
	
	
	/**
	 * Action save
	 */
	@ApiMethod
	async void actionSave()
	{
		await parent();
	}
	
	
	/**
	 * Action delete
	 */
	@ApiMethod
	async void actionDelete()
	{
		throw new ApiError(new RuntimeException("Method not allowed"));
	}
}