/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Backend.Api;

use Runtime.fs;
use Runtime.Serializer;
use Runtime.SerializerBase64;
use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.BaseApi;
use Runtime.Web.Annotations.ApiMethod;
use BayLang.Helper.Module;
use BayLang.Helper.Project;
use BayLang.Helper.Widget;
use BayLang.LangBay.TranslatorBay;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpModule;


class WidgetApi extends BaseApi
{
	/**
	 * Returns api name
	 */
	pure string getApiName() => "admin.constructor.widget";
	
	
	/**
	 * Load widget
	 */
	@ApiMethod
	async void getOpCode()
	{
		string project_path = @.env("project_path");
		string current_widget = this.post_data.get("current_widget");
		
		/* Find project */
		Project project = await Project::readProject(project_path);
		if (not project)
		{
			throw new ApiError( new ItemNotFound(project_path, "Project") );
		}
		
		/* Load project */
		await project.load();
		
		/* Find widget */
		Widget widget = await project.getWidget(current_widget);
		if (not widget)
		{
			throw new ApiError( new ItemNotFound(current_widget, "Widget") );
		}
		
		/* Load widget */
		await widget.load();
		
		/* Get component path */
		string component_path = widget.getComponetPath();
		if (not component_path)
		{
			throw new ApiError(
				new RuntimeException("Failed to load widget '" ~ current_widget ~ "'")
			);
		}
		
		/* Get widget op code */
		BaseOpCode component = await widget.getComponentOpCode();
		BaseOpCode model = await widget.getModelOpCode();
		
		/* Success */
		this.success({
			"data": {
				"component": component,
				"model": model,
			},
		});
	}
	
	
	/**
	 * Save widget
	 */
	@ApiMethod
	async void save()
	{
		string project_path = @.env("project_path");
		string current_widget = this.post_data.get("current_widget");
		
		/* Find project */
		Project project = await Project::readProject(project_path);
		if (not project)
		{
			throw new ApiError( new ItemNotFound(project_path, "Project") );
		}
		
		/* Load project */
		await project.load();
		
		/* Find widget */
		Widget widget = await project.getWidget(current_widget);
		if (not widget)
		{
			throw new ApiError( new ItemNotFound(current_widget, "Widget") );
		}
		
		/* Load widget */
		await widget.load();
		
		/* Get component path */
		string component_path = widget.getComponetPath();
		if (not component_path)
		{
			throw new ApiError(
				new RuntimeException("Failed to load widget '" ~ current_widget ~ "'")
			);
		}
		
		Serializer serializer = new SerializerBase64();
		serializer.setFlag(Serializer::ALLOW_OBJECTS);
		OpModule component = serializer.decode(this.post_data.get("component"));
		
		/* Translate widget */
		TranslatorBay translator = new TranslatorBay();
		list res = translator::translate(translator, component);
		string content = res.get(1);
		
		/* Save widget content */
		string file_path = widget.getComponetPath();
		await fs::saveFile(file_path, content);
		
		/* Compile file */
		string relative_src_file_path = widget.module.getRelativeSourcePath(file_path);
		widget.module.compile(relative_src_file_path);
		
		/* Update assets */
		widget.module.updateAssets();
		
		/* Success */
		this.success();
	}
}