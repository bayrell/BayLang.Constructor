/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Backend.Api;

use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.BaseApi;
use Runtime.Web.Annotations.ApiMethod;
use BayLang.Constructor.Backend.ApiHook;
use BayLang.Constructor.Backend.Service.WidgetService;
use BayLang.OpCodes.BaseOpCode;


class WidgetApi extends BaseApi
{
	/**
	 * Returns api name
	 */
	static string getApiName() => "baylang.constructor.widget";
	
	
	/**
	 * Load widget
	 */
	@ApiMethod
	async void getOpCode()
	{
		WidgetService service = new WidgetService();
		string project_id = this.post_data.get("project_id");
		string current_widget = this.post_data.get("current_widget");
		
		/* Load project */
		await service.loadProject(project_id);
		
		/* Load modules */
		await service.loadItem({ "id": current_widget });
		
		/* Load widget */
		await service.item.load();
		
		/* Get widget op code */
		BaseOpCode component = await service.item.getComponentOpCode();
		BaseOpCode model = await service.item.getModelOpCode();
		
		/* Get component path */
		if (not component)
		{
			throw new ApiError(
				new RuntimeException("Failed to load widget '" ~ current_widget ~ "'")
			);
		}
		
		/* Success */
		this.success({
			"data": {
				"component": component,
				"model": model,
			},
		});
	}
	
	
	/**
	 * Save widget
	 */
	@ApiMethod
	async void save()
	{
		WidgetService service = new WidgetService();
		string project_id = this.post_data.get("project_id");
		string current_widget = this.post_data.get("current_widget");
		
		/* Load project */
		await service.loadProject(project_id);
		
		/* Load modules */
		await service.loadItem({ "id": current_widget });
		
		/* Load widget */
		await service.item.load();
		
		/* Get component path */
		string component_path = service.item.getComponentPath();
		if (not component_path)
		{
			throw new ApiError(
				new RuntimeException("Failed to load widget '" ~ current_widget ~ "'")
			);
		}
		
		/* Save file */
		await service.saveFile(service.item.getComponentPath(), this.post_data.get("component"));
		await service.saveFile(service.item.getModelPath(), this.post_data.get("model"));
		
		/* Update assets */
		await service.item.module.updateAssets();
		await ApiHook::updateAssets();
		
		/* Success */
		this.success();
	}
}