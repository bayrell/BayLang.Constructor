/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Backend.Api;

use Runtime.fs;
use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Widget.Crud.CrudApi;
use Runtime.Widget.Crud.Rules.CrudRule;
use Runtime.Widget.Crud.Rules.Required;
use BayLang.Constructor.Backend.Lib.Module;


class ModuleCrudApi extends CrudApi
{
	/**
	 * Returns api name
	 */
	pure string getApiName() => "admin.constructor.module::crud";
	
	
	/**
	 * Returns item fields
	 */
	Vector getItemFields() =>
	[
		"file_name",
		"module_name"
	];
	
	
	/**
	 * Returns save fields
	 */
	Vector getSaveFields() => [
		"module_name",
	];
	
	
	/**
	 * Returns rules
	 */
	Vector<CrudRule> getRules() =>
	[
		new Required{ "name": "module_name" },
	];
	
	
	/**
	 * Search items
	 */
	async void searchItems()
	{
		this.page = 1;
		this.items = [];
		
		Collection<string> items = await fs::listDir("/data/projects");
		for (int i=0; i<items.count(); i++)
		{
			string file_name = items.get(i);
			
			Module module = new Module();
			module.initFromFile(file_name);
			
			if (not module.exists()) continue;
			this.items.push(module);
		}
	}
	
	
	/**
	 * Find item by primary key
	 */
	async void findItem(Dict pk)
	{
		if (pk == null) return;
		
		string file_name = pk.get("file_name");
		
		Module module = new Module();
		module.initFromFile(file_name);
		if (module.exists())
		{
			this.item = module;
		}
	}
	
	
	/**
	 * Create new relation
	 */
	async var newRelation()
	{
		throw new ApiError(new RuntimeException("Method not allowed"));
	}
	
	
	/**
	 * Update item
	 */
	async void updateItem(Map update_data)
	{
		string module_name = update_data["module_name"];
		this.item.rename(module_name);
	}
	
	
	/**
	 * Action search
	 */
	@ApiMethod
	async void actionSearch()
	{
		await parent();
	}
	
	
	/**
	 * Action save
	 */
	@ApiMethod
	async void actionSave()
	{
		await parent();
	}
	
	
	/**
	 * Action delete
	 */
	@ApiMethod
	async void actionDelete()
	{
		throw new ApiError(new RuntimeException("Method not allowed"));
	}
}