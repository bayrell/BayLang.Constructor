/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Backend.Api;

use Runtime.fs;
use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Widget.Crud.CrudApi;
use Runtime.Widget.Crud.Rules.CrudRule;
use Runtime.Widget.Crud.Rules.Required;
use BayLang.Helper.Module;
use BayLang.Helper.Project;


class ModuleCrudApi extends CrudApi
{
	/**
	 * Returns api name
	 */
	pure string getApiName() => "admin.constructor.module::crud";
	
	
	/**
	 * Returns item fields
	 */
	Vector getItemFields() =>
	[
		"id",
	];
	
	
	/**
	 * Returns save fields
	 */
	Vector getSaveFields() => [
	];
	
	
	/**
	 * Returns rules
	 */
	Vector<CrudRule> getRules() =>
	[
		new Required{ "name": "id" },
	];
	
	
	/**
	 * Convert item
	 */
	Map convertItem(Collection fields, Project item)
	{
		return {
			"id": item.getName(),
		};
	}
	
	
	/**
	 * Returns item primary key
	 */
	Map getItemPrimaryKey(Project item) => {
		"id": item.getName(),
	};
	
	
	/**
	 * Search items
	 */
	async void searchItems()
	{
		this.page = 1;
		
		string project_id = this.post_data.get("project_id");
		this.project = await Project::readProject(
			fs::join([@.env("constructor_path"), "projects", project_id])
		);
		
		await this.project.readModules();
		this.items = this.project.modules.transition( Module (Module item) => item );
		this.items = this.items.sort(
			int (Module a, Module b)
			{
				return rs::compare(a.getName(), b.getName());
			}
		);
	}
	
	
	/**
	 * Find item by primary key
	 */
	async void findItem(Dict pk)
	{
		if (pk == null) return;
		
		string module_id = pk.get("id");
		string project_id = this.post_data.get("project_id");
		this.project = await Project::readProject(
			fs::join(["/data/constructor/projects", project_id])
		);
		
		if (not this.project) return;
		
		await this.project.readModules();
		this.item = this.project.modules.get(module_id);
	}
	
	
	/**
	 * Create new relation
	 */
	async var newRelation()
	{
		throw new ApiError(new RuntimeException("Method not allowed"));
	}
	
	
	/**
	 * Update item
	 */
	async void updateItem(Map update_data)
	{
		throw new ApiError(new RuntimeException("Method not allowed"));
	}
	
	
	/**
	 * Action search
	 */
	@ApiMethod
	async void actionSearch()
	{
		await parent();
	}
	
	
	/**
	 * Action save
	 */
	@ApiMethod
	async void actionSave()
	{
		await parent();
	}
	
	
	/**
	 * Action delete
	 */
	@ApiMethod
	async void actionDelete()
	{
		throw new ApiError(new RuntimeException("Method not allowed"));
	}
}