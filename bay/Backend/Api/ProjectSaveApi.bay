/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Backend.Api;

use Runtime.fs;
use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Web.BaseApi;
use Runtime.Widget.Crud.SaveApi;
use Runtime.Widget.Crud.Rules.CrudRule;
use Runtime.Widget.Crud.Rules.Required;
use BayLang.Helper.Project;


class ProjectSaveApi extends SaveApi
{
	/**
	 * Returns api name
	 */
	static string getApiName() => "baylang.constructor.project::save";
	
	
	/**
	 * Returns rules
	 */
	Vector<CrudRule> getRules() =>
	[
		new Required{"name": "id"},
		new Required{"name": "name"},
		new Required{"name": "template", "check_update": false},
	];
	
	
	/**
	 * New item
	 */
	async void newItem()
	{
		this.item = new Project(null);
	}
	
	
	/**
	 * Find item
	 */
	async void findItem(Dict pk)
	{
		string project_id = pk.get("id");
		this.item = await Project::readProject(
			fs::join([@.env("constructor_path"), "projects", project_id])
		);
	}
	
	
	/**
	 * Reload nginx
	 */
	void reloadNginx()
	{
		string content = [];
		string projects_path = fs::join([@.env("constructor_path"), "projects"]);
		Collection<string> files = fs::listDir(projects_path);
		for (int i=0; i<files.count(); i++)
		{
			string project_id = files.get(i);
			string project_dest = fs::join([projects_path, project_id])
			
			/* Add nginx */
			content.push("# Project " ~ project_id);
			content.push("location /project/" ~ project_id ~ "/iframe/assets/ {");
			content.push("\talias " ~ project_dest ~ "/src/public/assets/;");
			content.push("\tbreak;");
			content.push("}");
			content.push("location /project/" ~ project_id ~ "/iframe/ {");
			content.push("\tinclude fastcgi_params;");
			content.push("\troot " ~ project_dest ~ "/src/public;");
			content.push("\tfastcgi_param SCRIPT_FILENAME $document_root/index.php;");
			content.push("\tfastcgi_param HTTP_X_FORWARDED_PREFIX " ~
				"$http_x_forwarded_prefix/project/" ~ project_id ~ "/iframe;");
			content.push("\tbreak;");
			content.push("}");
			
			if (i != files.count() - 1)
			{
				content.push("");
			}
		}
		
		/* Save nginx */
		string nginx_path = fs::join([@.env("constructor_path"), "nginx.conf"]);
		string nginx_content = rs::join("\n", content);
		await fs::saveFile(nginx_path, nginx_content);
		
		/* Reload nginx */
		#ifcode PHP then
		shell_exec("sudo /usr/sbin/nginx -s reload");
		#endif
	}
	
	
	/**
	 * Create project
	 */
	async void createProject()
	{
		string project_id = this.data.get("id");
		string project_template = this.data.get("template");
		
		/* Check project */
		Project project = await Project::readProject(
			fs::join([@.env("constructor_path"), "projects", project_id])
		);
		if (project)
		{
			throw new ApiError(new RuntimeException("Project already exists"));
		}
		
		/* Get project path */
		string project_archive = fs::join([@.base_path, "examples", "clear.zip"]);
		string project_dest = fs::join([@.env("constructor_path"), "projects", project_id])
		
		/* Create project folder */
		if (not await fs::exists(project_dest))
		{
			await fs::mkdir(project_dest);
		}
		
		/* Copy project */
		#ifcode PHP then
		shell_exec("unzip $project_archive -d $project_dest");
		#endif
		
		/* Reload nginx */
		await this.reloadNginx();
		
		this.success();
	}
	
	
	/**
	 * Action save
	 */
	@ApiMethod
	async void actionSave()
	{
		/* Load data */
		await this.loadItem();
		await this.loadData();
		
		/* Create project */
		if (this.pk == null)
		{
			await this.createProject();
			return;
		}
		
		/* Set project info */
		if (this.data.has("name"))
		{
			this.item.setName(this.data.get("name"));
		}
		if (this.data.has("description"))
		{
			this.item.setDescription(this.data.get("description"));
		}
		
		/* Save project */
		await this.item.saveInfo();
		
		/* Success */
		this.success();
	}
	
	
	/**
	 * Action delete
	 */
	@ApiMethod
	async void actionDelete()
	{
		/* Load data */
		await this.loadItem();
		
		/* Project path */
		string project_dest = this.item.getPath()
		
		/* Remove project */
		#ifcode PHP then
		shell_exec("rm -rf $project_dest");
		#endif
		
		/* Reload nginx */
		await this.reloadNginx();
		
		/* Success */
		this.success();
	}
}