/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Backend.Api;

use Runtime.fs;
use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Widget.Crud.CrudApi;
use Runtime.Widget.Crud.Rules.CrudRule;
use Runtime.Widget.Crud.Rules.Required;


class ModulesCrudApi extends CrudApi
{
	/**
	 * Returns api name
	 */
	pure string getApiName() => "admin.constructor.modules::crud";
	
	
	/**
	 * Returns item fields
	 */
	Vector getItemFields() =>
	[
		"file_name",
		"module_name"
	];
	
	
	/**
	 * Returns save fields
	 */
	Vector getSaveFields() => [
		"module_name",
	];
	
	
	/**
	 * Returns rules
	 */
	Vector<CrudRule> getRules() =>
	[
		new Required{ "name": "module_name" },
	];
	
	
	/**
	 * Returns item primary key
	 */
	Map getItemPrimaryKey(Dict item) => {
		"file_name": item.get("file_name")
	};
	
	
	/**
	 * Read item
	 */
	async Dict readModule(string file_name)
	{
		if (file_name == "") return null;
		if (file_name[0] == ".") return null;
		
		string module_path = "/data/projects/" ~ file_name;
		string module_json_path = module_path ~ "/" ~ "module.json";
		if (not(await fs::isFile(module_json_path))) return null;
		
		/* Read file */
		string content = await fs::readFile(module_json_path);
		Dict module = rtl::json_decode(content);
		if (not module) return null;
		if (not module.has("name")) return null;
		
		string module_name = module.get("name");
		return {
			"file_name": file_name,
			"module_info": module,
			"module_name": module_name,
		};
	}
	
	
	/**
	 * Search items
	 */
	async void searchItems()
	{
		this.page = 1;
		this.items = [];
		
		Collection<string> items = await fs::listDir("/data/projects");
		for (int i=0; i<items.count(); i++)
		{
			string name = items.get(i);
			Dict item = await this.readModule(name);
			if (not item) continue;
			this.items.push(item);
		}
	}
	
	
	/**
	 * Find item by primary key
	 */
	async void findItem(Dict pk)
	{
		if (pk == null) return;
		
		string file_name = pk.get("file_name");
		this.item = await this.readModule(file_name);
	}
	
	
	/**
	 * Update item
	 */
	async void updateItem(Map update_data)
	{
		string module_name = update_data["module_name"];
		string new_file_name = rs::lower(module_name);
		string old_file_name = this.item.get("file_name");
		
		Map module_info = this.item.get("module_info");
		module_info.set("name", module_name);
		
		/* Save file */
		string module_path = "/data/projects/" ~ old_file_name;
		string module_json_path = module_path ~ "/" ~ "module.json";
		string content = rtl::json_encode(module_info, rtl::JSON_PRETTY);
		await fs::saveFile(module_json_path, content);
		
		/* Rename folder */
		#ifcode PHP then
		rename($module_path, "/data/projects/" . $new_file_name);
		#endif
	}
	
	
	/**
	 * Action search
	 */
	@ApiMethod
	async void actionSearch()
	{
		await parent();
	}
	
	
	/**
	 * Action save
	 */
	@ApiMethod
	async void actionSave()
	{
		await parent();
	}
	
	
	/**
	 * Action delete
	 */
	@ApiMethod
	async void actionDelete()
	{
		throw new ApiError(new RuntimeException("Method not allowed"));
	}
}