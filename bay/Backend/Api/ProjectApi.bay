/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Backend.Api;

use Runtime.fs;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Web.BaseApi;
use BayLang.Helper.Project;


class ProjectApi
{
	/**
	 * Returns api name
	 */
	static string getApiName() => "baylang.constructor.project";
	
	
	/**
	 * Action search
	 */
	@ApiMethod
	async static void actionSearch(BaseApi api)
	{
		/* Get projects */
		Collection items = await Project::readProjects(
			fs::join([@.env("constructor_path"), "projects"])
		);
		
		/* Filter items */
		items = items.map(
			Dict (Project project) => {
				"id": project.getID(),
				"name": project.getName(),
				"description": project.getDescription(),
			}
		);
		
		/* Set result */
		api.success({
			"data": {
				"items": items,
				"page": 1,
				"pages": 1,
			}
		})
	}
	
	
	/**
	 * Create project
	 */
	async static void createProject(BaseApi api, Dict item)
	{
		api.fail({
			"message": "Method are not allowed",
		});
	}
	
	
	/**
	 * Action save
	 */
	@ApiMethod
	async static void actionSave(BaseApi api)
	{
		string project_id = "";
		Project project = null;
		
		/* Get item */
		Dict item = api.post_data.get("item");
		if (item == null) return api.fail({
			"message": "Item not found",
		});
		if (not(item instanceof Dict)) return api.fail({
			"message": "Item not found",
		});
		
		/* Get project_id */
		Dict pk = api.post_data.get("pk");
		if (pk != null and pk instanceof Dict)
		{
			project_id = pk.get("id");
			project = await Project::readProject(
				fs::join([@.env("constructor_path"), "projects", project_id])
			);
		}
		else
		{
			await static::createProject(api, item);
			return;
		}
		
		/* Project nod found */
		if (project == null)
		{
			return api.fail({
				"message": "Project not found",
			});
		}
		
		/* Set project info */
		if (item.has("name"))
		{
			project.setName(item.get("name"));
		}
		if (item.has("description"))
		{
			project.setDescription(item.get("description"));
		}
		
		/* Save project */
		await project.saveInfo();
		
		/* Success */
		api.success();
	}
	
	
	/**
	 * Action delete
	 */
	@ApiMethod
	async static void actionDelete(BaseApi api)
	{
		string project_id = "";
		Project project = null;
		
		/* Get project_id */
		Dict pk = api.post_data.get("pk");
		if (pk != null and pk instanceof Dict)
		{
			project_id = pk.get("id");
			project = await Project::readProject(
				fs::join([@.env("constructor_path"), "projects", project_id])
			);
		}
		
		/* Project nod found */
		if (project == null)
		{
			return api.fail({
				"message": "Project not found",
			});
		}
		
		api.fail({
			"message": "Method are not allowed",
		});
	}
}