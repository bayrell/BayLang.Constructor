/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Backend.Api;


use Runtime.fs;
use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.BaseApi;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Widget.Crud.SaveApi;
use Runtime.Widget.Crud.Rules.CrudRule;
use Runtime.Widget.Crud.Rules.ReadOnlyRule;
use Runtime.Widget.Crud.Rules.Required;
use BayLang.Constructor.Backend.ApiHook;
use BayLang.Exceptions.ParserUnknownError;
use BayLang.Helper.Module;
use BayLang.Helper.Project;


class FontSaveApi extends SaveApi
{
	Project project = null;
	string assets_path = "";
	string fonts_path = "";
	
	
	/**
	 * Returns api name
	 */
	static string getApiName() => "baylang.constructor.fonts.save";
	
	
	/**
	 * Returns rules
	 */
	Vector<CrudRule> getRules() =>
	[
		new Required{"name": "name"},
		new ReadOnlyRule{"name": "name", "can_create": true},
	];
	
	
	/**
	 * Returns item fields
	 */
	Collection getItemFields() =>
	[
		"name",
		"files",
	];
	
	
	/**
	 * Returns save fields
	 */
	Collection getSaveFields() =>
	[
		"name",
	];
	
	
	/**
	 * Action before
	 */
	async void onActionBefore()
	{
		/* Get project */
		string project_id = this.post_data["foreign_key", "project_id"];
		this.project = await ApiHook::getProject(project_id);
		if (not this.project)
		{
			throw new ApiError(new ItemNotFound(project_id, "Project"));
		}
		
		/* Load project */
		await this.project.load();
		
		/* Get fonts path */
		this.assets_path = ApiHook::getAssetsPath(this.project);
		this.fonts_path = fs::join([this.assets_path, "fonts"]);
	}
	
	
	/**
	 * New item
	 */
	async void newItem() => {
		"exists": false,
		"files": [],
	};
	
	
	/**
	 * Find item
	 */
	async void findItem(Dict pk)
	{
		string font_name = pk.get("name")
		string font_path = fs::join([this.fonts_path, font_name]);
		if (not await fs::isDir(font_path))
		{
			return null;
		}
		return {
			"exists": true,
			"name": font_name,
			"files": [],
		};
	}
	
	
	/**
	 * Save
	 */
	async void save()
	{
		bool exists = this.item.get("exists");
		if (not exists)
		{
			string font_name = this.item.get("name")
			string font_path = fs::join([this.fonts_path, font_name]);
			await fs::mkDir(font_path);
		}
	}
	
	
	/**
	 * Action item
	 */
	@ApiMethod
	async void actionItem()
	{
		await parent();
	}
	
	
	/**
	 * Action save
	 */
	@ApiMethod
	async void actionSave()
	{
		await parent();
	}
	
	
	/**
	 * Remove
	 */
	async void remove()
	{
		string font_name = this.item.get("name");
		string font_path = fs::join([this.fonts_path, font_name]);
		
		#ifcode PHP then
		shell_exec("rm -rf $font_path");
		#endif
	}
	
	
	/**
	 * Action delete
	 */
	@ApiMethod
	async void actionDelete()
	{
		await parent();
	}
}