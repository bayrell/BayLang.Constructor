/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Backend.Api;


use Runtime.fs;
use Runtime.File;
use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.BaseApi;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Widget.Crud.SaveApi;
use Runtime.Widget.Crud.Rules.CrudRule;
use Runtime.Widget.Crud.Rules.MatchRule;
use Runtime.Widget.Crud.Rules.ReadOnlyRule;
use Runtime.Widget.Crud.Rules.Required;
use BayLang.Constructor.Backend.ApiHook;
use BayLang.Exceptions.ParserUnknownError;
use BayLang.Helper.Module;
use BayLang.Helper.Project;


class FontSaveApi extends SaveApi
{
	Project project = null;
	string assets_path = "";
	string fonts_path = "";
	
	
	/**
	 * Returns api name
	 */
	static string getApiName() => "baylang.constructor.fonts.save";
	
	
	/**
	 * Returns rules
	 */
	Vector<CrudRule> getRules() =>
	[
		new MatchRule{"name": "api_name", "regular": MatchRule::ALPHA_NUMERIC_DASH},
		new Required{"name": "name"},
	];
	
	
	/**
	 * Returns item fields
	 */
	Collection getItemFields() =>
	[
		"name",
		"css",
		"files",
	];
	
	
	/**
	 * Returns save fields
	 */
	Collection getSaveFields() =>
	[
		"name",
		"css",
	];
	
	
	/**
	 * Action before
	 */
	async void onActionBefore()
	{
		/* Get project */
		string project_id = this.post_data["foreign_key", "project_id"];
		this.project = await ApiHook::getProject(project_id);
		if (not this.project)
		{
			throw new ApiError(new ItemNotFound(project_id, "Project"));
		}
		
		/* Load project */
		await this.project.load();
		
		/* Get fonts path */
		this.assets_path = ApiHook::getAssetsPath(this.project);
		this.fonts_path = fs::join([this.assets_path, "fonts"]);
	}
	
	
	/**
	 * Returns primary key
	 */
	Dict getPrimaryKey(Dict item) => {
		"name": item.get("name"),
	};
	
	
	/**
	 * New item
	 */
	async void newItem() => {
		"exists": false,
		"files": [],
	};
	
	
	/**
	 * Find item
	 */
	async void findItem(Dict pk)
	{
		string font_name = pk.get("name")
		string font_path = fs::join([this.fonts_path, font_name]);
		if (not await fs::isDir(font_path))
		{
			return null;
		}
		return {
			"exists": true,
			"name": font_name,
			"path": font_path,
			"files": [],
		};
	}
	
	
	/**
	 * Load item
	 */
	async void loadItem(bool create_instance = true)
	{
		await parent(create_instance);
		
		/* Load css */
		string folder_path = this.item.get("path");
		string file_css_path = fs::join([folder_path, "style.scss"]);
		if (await fs::exists(file_css_path))
		{
			string css_content = await fs::readFile(file_css_path);
			this.item.set("css", css_content);
		}
		
		/* Load files */
		if (await fs::exists(folder_path))
		{
			Collection files = await fs::listDir(folder_path);
			files = files.map(Dict (string name) => {"name": name});
			this.item.set("files", files);
		}
	}
	
	
	/**
	 * Rebuild assets
	 */
	async void rebuild()
	{
		if (not await fs::isDir(this.fonts_path)) return;
		
		/* Get items */
		Collection items = [];
		items = await fs::listDir(this.fonts_path);
		
		/* Read styles */
		Collection<string> content = [
			"<!--",
			" *  Fonts",
			"-->",
			"",
			"<class name=\"App.Components.Blocks.Fonts\">",
			"<style>",
		];
		for (int i=0; i<items.count(); i++)
		{
			string font_name = items.get(i);
			string file_css_path = fs::join([this.fonts_path, font_name, "style.scss"]);
			if (await fs::exists(file_css_path))
			{
				string css_content = await fs::readFile(file_css_path);
				content.push(css_content);
			}
		}
		content.push("</style>");
		content.push("</class>");
		
		/* Find module */
		string file_path = fs::join([
			this.project.path,
			"src", "App", "bay", "Components", "Blocks", "Fonts.bay"
		]);
		Module module = this.project.findModuleByFileName(file_path);
		if (not module) return;
		
		/* Save styles */
		await fs::saveFile(file_path, rs::join("\n", content));
		
		/* Compile file */
		try
		{
			string relative_file_path = module.getRelativeSourcePath(file_path);
			await module.compile(relative_file_path);
		}
		catch (ParserUnknownError e)
		{
			string error_str = e.getErrorMessage();
			string line = e.getErrorLine();
			string pos = e.getErrorPos();
			if (line != -1)
			{
				error_str ~= " at Ln:" ~ line ~ ( (pos != "") ? ", Pos:" ~ pos : "" );
			}
			throw new ApiError(new RuntimeException(error_str));
		}
		
		/* Update assets */
		await module.updateAssets();
	}
	
	
	/**
	 * Save
	 */
	async void save()
	{
		string font_key = this.pk ? this.pk.get("name") : "";
		string font_name = this.item.get("name");
		string font_path = fs::join([this.fonts_path, font_name]);
		
		/* Check folder is exists */
		bool exists = this.item.get("exists");
		if (exists)
		{
			/* Rename folder */
			if (font_key != font_name)
			{
				string font_path_old = fs::join([this.fonts_path, font_key]);
				await fs::rename(font_path_old, font_path);
			}
		}
		else
		{
			/* Create folder */
			await fs::mkDir(font_path);
		}
		
		/* Save css */
		string css_content = this.item.get("css");
		if (css_content == "")
		{
			css_content = rs::join("\n", [
				"@font-face {",
				"  font-family: '" ~ font_name ~ "';",
				"  font-weight: normal;",
				"  font-style: normal;",
				"  src: ${ Component::assets('" ~ font_name ~ "/" ~ font_name ~ ".ttf') };",
				"}"
			]);
		}
		string file_css_path = fs::join([font_path, "style.scss"]);
		await fs::saveFile(file_css_path, css_content);
		
		/* Rebuild assets */
		await this.rebuild();
	}
	
	
	/**
	 * Action item
	 */
	@ApiMethod
	async void actionItem()
	{
		await parent();
	}
	
	
	/**
	 * Action save
	 */
	@ApiMethod
	async void actionSave()
	{
		await parent();
	}
	
	
	/**
	 * Upload file
	 */
	@ApiMethod
	async void uploadFile()
	{
		/* Load data */
		Dict pk = this.post_data.get("pk");
		this.item = await this.findItem(pk);
		
		/* Check if item is exists */
		if (this.item == null)
		{
			throw new ApiError(new ItemNotFound());
		}
		
		/* Upload file */
		string folder_path = this.item.get("path");
		File file = this.post_data.get("file");
		
		/* Create file */
		string file_upload_path = fs::join([folder_path, file.getName()]);
		string content = await fs::readFile(file.getPath());
		await fs::saveFile(file_upload_path, content);
		
		/* Success */
		this.success();
	}
	
	
	/**
	 * Delete file
	 */
	@ApiMethod
	async void deleteFile()
	{
		/* Load data */
		Dict foreign_key = this.post_data.get("foreign_key");
		this.item = await this.findItem(foreign_key);
		
		/* Check if item is exists */
		if (this.item == null)
		{
			throw new ApiError(new ItemNotFound("Project"));
		}
		
		/* Upload file */
		Dict pk = this.post_data.get("pk");
		string folder_path = this.item.get("path");
		string file_name = pk.get("name");
		string file_path = fs::join([folder_path, file_name]);
		
		/* Remove file */
		if (await fs::exists(file_path))
		{
			await fs::unlink(file_path);
		}
		
		/* Success */
		this.success();
	}
	
	
	/**
	 * Remove
	 */
	async void remove()
	{
		string font_name = this.item.get("name");
		string font_path = fs::join([this.fonts_path, font_name]);
		
		#ifcode PHP then
		shell_exec("rm -rf $font_path");
		#endif
	}
	
	
	/**
	 * Action delete
	 */
	@ApiMethod
	async void actionDelete()
	{
		await parent();
	}
}