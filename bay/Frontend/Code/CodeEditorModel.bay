/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Code;

use Runtime.Callback;
use Runtime.Serializer;
use Runtime.Web.ApiResult;
use Runtime.Web.BasePageModel;
use Runtime.Web.RenderContainer;
use Runtime.Widget.WidgetResultModel;
use Runtime.Widget.Tree.TreeMessage;
use Runtime.Widget.Tree.TreeModel;
use BayLang.Constructor.Frontend.Code.CodeEditor;
use BayLang.Constructor.Frontend.Code.TreeItem;
use BayLang.Constructor.Frontend.Code.TreeWidget;


class CodeEditorModel extends BasePageModel
{
	string component = classof CodeEditor;
	string project_id = "";
	TreeModel tree = null;
	TreeItem selected_item = null;
	TreeItem selected_tab = null;
	Collection<string> selected_path = null;
	Collection<TreeItem> tabs = [];
	WidgetResultModel save_result = null;
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Setup settings */
		this.project_id = this.layout.route.matches.get("project_id");
		
		/* Save result */
		this.save_result = this.addWidget(
			classof WidgetResultModel,
			{
				"widget_name": "save_result"
			}
		);
		
		/* Create Tree */
		this.tree = this.addWidget(classof TreeModel, {
			"component": classof TreeWidget,
			"dnd": false,
			"icons": true,
			"events":
			{
				"selectItem": new Callback(this, "onTreeSelectItem")
			},
		});
		this.tree.root = new TreeItem
		{
			"project_id": this.project_id,
			"open": true,
		};
	}
	
	
	/**
	 * Build title
	 */
	void buildTitle(RenderContainer container)
	{
		this.layout.setPageTitle("Code editor");
	}
	
	
	/**
	 * Load data
	 */
	async void loadData(RenderContainer container)
	{
		await parent(container);
		
		/* Load root */
		await this.loadItems(this.tree.root);
	}
	
	
	/**
	 * Remove tab
	 */
	void selectTab(TreeItem item)
	{
		this.selected_tab = item;
	}
	
	
	/**
	 * Add tab
	 */
	void addTab(TreeItem item)
	{
		this.tabs.push(this.selected_item);
	}
	
	
	/**
	 * Remove tab
	 */
	void removeTab(TreeItem item)
	{
		this.tabs.removeItem(item);
		this.save_result.clear();
		this.selected_tab = null;
	}
	
	
	/**
	 * Select item
	 */
	async void onTreeSelectItem(TreeMessage message)
	{
		this.selected_item = message.item;
		this.selected_path = message.path ? message.path.slice() : null;
		if (not this.selected_item) return;
		if (this.selected_item.kind == "dir")
		{
			await this.loadItems(this.selected_item);
		}
		else if (this.selected_item.kind == "file")
		{
			if (this.tabs.indexOf(this.selected_item) == -1)
			{
				this.addTab(this.selected_item);
				this.selectTab(this.selected_item);
				await this.loadFileContent(this.selected_item);
			}
		}
	}
	
	
	/**
	 * Save file
	 */
	async void save()
	{
		if (not this.selected_tab) return;
		
		this.save_result.setWaitMessage();
		
		ApiResult res = await this.layout.callApi({
			"api_name": "baylang.constructor.code",
			"method_name": "saveContent",
			"data": {
				"project_id": this.project_id,
				"file_path": this.selected_tab.file_path,
				"content": this.selected_tab.content,
			}
		});
		
		this.save_result.setApiResult(res);
	}
	
	
	/**
	 * Load file content
	 */
	async void loadFileContent(TreeItem item)
	{
		ApiResult res = await this.layout.callApi({
			"api_name": "baylang.constructor.code",
			"method_name": "getContent",
			"data": {
				"project_id": item.project_id,
				"module_id": item.module_id,
				"file_path": item.file_path,
			}
		});
		
		item.is_loaded = true;
		if (not res.isSuccess()) return;
		
		/* Set file content */
		item.content = res.data.get("content");
	}
	
	
	/**
	 * Load items
	 */
	async void loadItems(TreeItem item)
	{
		if (item.isLoaded()) return;
		
		ApiResult res = await this.layout.callApi({
			"api_name": "baylang.constructor.code",
			"method_name": "getFiles",
			"data": {
				"project_id": item.project_id,
				"module_id": item.module_id,
				"file_path": item.file_path,
			}
		});
		
		item.is_loaded = true;
		if (not res.isSuccess()) return;
		
		Collection items = res.data.get("items");
		
		/* Add dir */
		for (int i=0; i<items.count(); i++)
		{
			Dict file = items.get(i);
			if (file.get("kind") == "dir")
			{
				item.items.push(new TreeItem{
					"kind": "dir",
					"label": file.get("file_name"),
					"file_path": file.get("file_path"),
					"module_id": item.module_id,
					"project_id": item.project_id,
				});
			}
		}
		
		/* Add files */
		for (int i=0; i<items.count(); i++)
		{
			Dict file = items.get(i);
			if (file.get("kind") == "file")
			{
				item.items.push(new TreeItem{
					"kind": "file",
					"label": file.get("file_name"),
					"file_path": file.get("file_path"),
					"module_id": item.module_id,
					"project_id": item.project_id,
				});
			}
		}
	}
}