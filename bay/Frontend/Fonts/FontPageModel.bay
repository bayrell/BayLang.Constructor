/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Frontend.Fonts;

use Runtime.Callback;
use Runtime.Entity.Factory;
use Runtime.Web.BasePageModel;
use Runtime.Web.ModelFactory;
use Runtime.Web.RenderContainer;
use Runtime.Web.Messages.ClickMessage;
use Runtime.Widget.Form.FormDeleteStorage;
use Runtime.Widget.Form.FormMessage;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Form.FormSubmitStorage;
use Runtime.Widget.Table.TableDialogModel;
use Runtime.Widget.Table.TableMessage;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.Label;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.SelectModel;
use BayLang.Constructor.Frontend.Fonts.FontPage;


class FontPageModel extends BasePageModel
{
	string component = classof FontPage;
	string project_id = "";
	TableDialogModel table = null;
	RowButtonsModel top_buttons = null;
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Set route matches */
		this.project_id = this.layout.route.matches.get("project_id");
		
		/* Add table */
		this.table = this.addWidget(
			classof TableDialogModel,
			{
				"widget_name": "table",
				"get_title": void (Dict params)
				{
					string action = params.get("action");
					Dict item = params.get("item");
					if (action == "add")
					{
						return "Add font";
					}
					if (action == "edit")
					{
						return "Edit font " ~ item.get("name");
					}
					if (action == "delete")
					{
						return "Delete font " ~ item.get("name");
					}
					return "";
				},
				"styles": ["border"],
				
				/* Table storage */
				"storage": new Factory
				(
					"Runtime.Widget.Table.TableStorage",
					{
						"api_name": "baylang.constructor.fonts.search",
					}
				),
				
				/* Add form */
				"add_form": new ModelFactory(
					classof FormModel,
					{
						"widget_name": "add_form",
						"primary_key": ["name"],
						"foreign_key":
						{
							"project_id": this.project_id,
						},
						"storage": new Factory(
							classof FormSubmitStorage,
							{
								"api_name": "baylang.constructor.fonts.save"
							}
						),
						"fields":
						[
							{
								"name": "name",
								"label": "Name",
								"component": "Runtime.Widget.Input",
							}
						],
					}
				),
				
				/* Delete form */
				"delete_form": new ModelFactory(
					classof FormModel,
					{
						"widget_name": "delete_form",
						"primary_key": ["name"],
						"foreign_key":
						{
							"project_id": this.project_id,
						},
						"storage": new Factory(
							classof FormDeleteStorage,
							{
								"api_name": "baylang.constructor.fonts.save"
							}
						),
					}
				),
				
				/* Foreign key */
				"foreign_key": {
					"project_id": this.project_id,
				},
				
				/* Table fields */
				"fields":
				[
					{
						"name": "row_number",
					},
					{
						"name": "name",
						"label": "Font name",
						"component": "Runtime.Widget.Label",
					},
					{
						"name": "row_buttons",
						"model": new ModelFactory(
							"Runtime.Widget.Table.TableRowButtonsModel",
							{
								"edit": false,
								"buttons":
								[
									{
										"widget_name": "edit_button",
										"dest": "delete_button",
										"kind": "before",
										"href": void (Dict data)
										{
											Dict item = data.get("item");
											return this.layout.url(
												"baylang:project:fonts:edit",
												{
													"project_id": this.project_id,
													"name": item.get("name"),
												}
											);
										},
										"content": "Edit",
										"styles":
										[
											"default",
											"small"
										],
									}
								],
							}
						),
					},
				],
			}
		);
		
		/* Add top buttons */
		this.top_buttons = this.addWidget(
			classof RowButtonsModel,
			{
				"widget_name": "top_buttons",
				"buttons":
				[
					new ModelFactory
					(
						"Runtime.Widget.Table.AddButtonModel",
						{
							"table": this.table,
						}
					)
				],
			}
		);
	}
	
	
	/**
	 * Build title
	 */
	void buildTitle(RenderContainer container)
	{
		this.layout.setPageTitle("Fonts");
	}
}