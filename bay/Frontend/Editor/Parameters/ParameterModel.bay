/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Editor.Parameters;

use Runtime.Web.BaseModel;
use BayLang.Constructor.Frontend.Editor.Parameters.Parameter;
use BayLang.Constructor.Frontend.Editor.Processor.CodeProcessor;
use BayLang.OpCodes.OpDictPair;


class ParameterModel extends Parameter
{
	OpDictPair op_code = null;
	fn onChange = null;
	
	
	/**
	 * Is op_code
	 */
	void isOpCode(OpDictPair op_attr)
	{
		return op_attr instanceof OpDictPair and this.name == op_attr.key;
	}
	
	
	/**
	 * Set op_code
	 */
	void setOpCode(OpDictPair op_dict_pair)
	{
		this.op_code = op_dict_pair;
		this.value = CodeProcessor::getValueFromOpCode(op_dict_pair.value);
	}
	
	
	/**
	 * Set value
	 */
	void setValue(var value)
	{
		this.value = value;
		this.op_code.value = CodeProcessor::getOpCodeByValue(value);
	}
	
	
	/**
	 * Change model value
	 */
	void changeValue(var value)
	{
		parent(value);
		
		var iframe_window = this.widget.page_model.getFrameWindow();
		var iframe_page_model = this.widget.page_model.getFramePageModel();
		
		/* Get page widget */
		string widget_name = this.widget.getName();
		BaseModel widget = iframe_page_model.widget_model.getWidget(widget_name);
		if (not widget) return;
		
		/* Update model value */
		bool is_updated = false;
		if (rtl::exists(this.widget.model_settings.onChange))
		{
			is_updated = this.widget.model_settings.onChange(iframe_window, widget, this);
		}
		if (not is_updated)
		{
			this.updateModelValue(widget);
		}
	}
	
	
	/**
	 * Update model value
	 */
	void updateModelValue(BaseModel widget)
	{
		/* Get key value */
		string key = this.name;
		var value = this.value;
		
		/* Set params */
		Dict params = {};
		params.set(key, value);
		widget.initParams(params);
	}
}