/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Editor;

use Runtime.lib;
use Runtime.Callback;
use Runtime.Web.BaseModel;
use BayLang.LangBay.ParserBay;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlItems;
use BayLang.OpCodes.OpHtmlSlot;
use BayLang.OpCodes.OpHtmlStyle;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.OpCodes.OpModule;
use BayLang.OpCodes.OpNamespace;
use BayLang.OpCodes.OpString;
use BayLang.OpCodes.OpUse;


class Helper extends BaseModel
{
	string widget_name = "helper";
	int widget_inc = 1;
	
	
	/**
	 * Is component
	 */
	pure bool isComponent(string tag_name)
	{
		string ch1 = rs::substr(tag_name, 0, 1);
		string ch2 = rs::upper(ch1);
		return ch1 == ch2;
	}
	
	
	/**
	 * Returns module class name
	 */
	string getModuleClassName(string widget_name)
	{
		OpModule component_op_code = this.parent_widget.component_op_code;
		if (not static::isComponent(widget_name)) return null;
		if (not component_op_code) return null;
		if (not component_op_code.uses.has(widget_name)) return null;
		return component_op_code.uses.get(widget_name);
	}
	
	
	/**
	 * Add module
	 */
	string addModule(string widget_name, bool is_component = true, string alias_name = "")
	{
		OpModule component_op_code = this.parent_widget.component_op_code;
		if (alias_name == "")
		{
			string widget_name_arr = rs::split(".", widget_name);
			alias_name = widget_name_arr.last();
		}
		if (not component_op_code.hasModule(alias_name))
		{
			component_op_code.addModule(widget_name, is_component, alias_name);
			this.updateFrameGlobalCSS();
		}
		else if (component_op_code.uses.get(alias_name) != widget_name)
		{
			alias_name = widget_name;
		}
		return alias_name;
	}
	
	
	/**
	 * Add default template
	 */
	void addDefaultTemplate(OpHtmlTag op_code, OpModule default_template)
	{
		/* Add uses */
		Collection modules = default_template.uses.keys();
		for (int i=0; i<default_template.items.count(); i++)
		{
			BaseOpCode item = default_template.items.get(i);
			if (item instanceof OpUse)
			{
				this.addModule(item.name, item.is_component, item.alias);
			}
		}
		
		OpDeclareClass op_code_class = default_template.findClass();
		if (not op_code_class) return null;
		
		OpDeclareFunction op_code_render = op_code_class.findFunction("render");
		if (not op_code_render) return null;
		if (not op_code_render.expression) return null;
		if (not (op_code_render.expression instanceof OpHtmlItems)) return null;
		
		/* Add items */
		op_code.items = op_code_render.expression;
	}
	
	
	/**
	 * Returns widget label
	 */
	pure string getTagWidgetInfo(OpHtmlTag op_code)
	{
		OpHtmlAttribute class_name_attr = op_code.attrs.findItem(
			lib::equalAttr("key", "class")
		);
		if (not class_name_attr)
		{
			return
			{
				"label": op_code.tag_name,
				"tag_name": op_code.tag_name,
				"class_name": "",
				"widget_name": "",
			};
		};
		
		string class_name = class_name_attr.value.value;
		Collection attrs = rs::split(" ", class_name);
		attrs = attrs.filter(lib::equalNot(""));
		return
		{
			"label": op_code.tag_name ~ "." ~ attrs.first(),
			"tag_name": op_code.tag_name,
			"class_name": class_name,
			"widget_name": attrs.first(),
		};
	}
	
	
	/**
	 * Generate widget name
	 */
	string generateWidgetName(string widget_name, string item)
	{
		if (rs::substr(item, 0, 2) != "[&") return widget_name;
		if (rs::substr(item, -1) != "]") return widget_name;
		item = rs::substr(item, 2, -1);
		return widget_name ~ item;
	}
	
	
	/**
	 * Add op_code tag attrs
	 */
	void addTagAttrs(OpHtmlTag op_code, string widget_name)
	{
		string css_name = null;
		
		/* Generate css name */
		fn generateCssName = string () use (css_name)
		{
			if (css_name == null)
			{
				css_name = "widget_" ~ this.widget_inc;
				this.widget_inc = this.widget_inc + 1;
			}
			return css_name;
		};
		
		/* Generate widget name */
		fn generateWidgetName = string(string item) use (widget_name)
		{
			widget_name = this.generateWidgetName(widget_name, item);
			return widget_name;
		}
		
		/* Add render key */
		OpHtmlAttribute key_attr = op_code.attrs.findItem(
			lib::equalAttr("key", "@key")
		);
		OpHtmlAttribute key_debug_attr = op_code.attrs.findItem(
			lib::equalAttr("key", "@key_debug")
		);
		if (key_attr == null and key_debug_attr == null)
		{
			/* Add key debug */
			op_code.attrs.push(new OpHtmlAttribute{
				"key": "@key_debug",
				"value": new OpString{
					"value": generateCssName(),
				},
			});
		}
		
		/* Change widget name */
		OpHtmlAttribute class_name_attr = op_code.attrs.findItem(
			lib::equalAttr("key", "class")
		);
		if (class_name_attr and class_name_attr.value instanceof OpString)
		{
			string class_name = class_name_attr.value.value;
			Collection attrs = rs::split(" ", class_name);
			attrs = attrs.filter(lib::equalNot(""));
			attrs = attrs.map(
				string (string item) use (generateCssName, generateWidgetName)
				{
					if (item == "[widget_name]")
					{
						return generateCssName();
					}
					if (rs::substr(item, 0, 2) == "[&" and rs::substr(item, -1) == "]")
					{
						return generateWidgetName(item);
					}
					return item;
				}
			);
			class_name_attr.value.value = rs::join(" ", attrs);
		}
		
		/* Generate html items attrs */
		this.addHtmlItemsAttrs(op_code.items, widget_name);
	}
	
	
	/**
	 * Add op_code slot attrs
	 */
	void addSlotAttrs(OpHtmlTag op_code, string widget_name)
	{
		this.addHtmlItemsAttrs(op_code.items, widget_name);
	}
	
	
	/**
	 * Generate html items attrs
	 */
	void addHtmlItemsAttrs(Collection items, string widget_name = "")
	{
		if (not items) return;
		if (items instanceof OpHtmlItems) items = items.items;
		for (int i=0; i<items.count(); i++)
		{
			BaseOpCode item = items.get(i);
			
			/* Add render key to item */
			if (rtl::is_instanceof(item, classof OpHtmlTag))
			{
				this.addTagAttrs(item, widget_name);
			}
			else if (rtl::is_instanceof(item, classof OpHtmlSlot))
			{
				this.addSlotAttrs(item, widget_name);
			}
		}
	}
	
	
	/**
	 * Create widget
	 */
	OpHtmlTag createWidget(string class_name, string widget_name)
	{
		/* Add module */
		string alias_name = this.addModule(class_name);
		
		/* Create op_code */
		string css_name = "widget_" ~ this.widget_inc;
		this.widget_inc = this.widget_inc + 1;
		OpHtmlTag op_code = new OpHtmlTag
		{
			"attrs":
			[
				new OpHtmlAttribute
				{
					"key": "class",
					"value": new OpString
					{
						"value": widget_name,
					},
				},
				new OpHtmlAttribute
				{
					"key": "@key_debug",
					"value": new OpString
					{
						"value": css_name,
					},
				}
			],
			"items": new OpHtmlItems(),
			"tag_name": alias_name,
		};
		
		/* Default template */
		var content_window = this.parent_widget.getFrameWindow();
		Callback f = new content_window.Runtime.Callback(class_name, "getDefaultTemplate");
		if (not f.exists()) return op_code;
		
		/* Get default template */
		Dict templates = f.apply();
		fn template_factory = templates.get("default");
		
		/* Get template content */
		Dict template_info = template_factory();
		string template_content = "<class>" ~ template_info.get("template") ~ "</class>";
		
		/* Parse default template */
		OpModule default_template = null;
		ParserBay parser = this.parent_widget.createParser();
		try
		{
			list res = parser::parse(parser, template_content);
			parser = res.get(0);
			default_template = res.get(1);
		}
		catch (var e)
		{
		}
		
		/* If default template is correct */
		if (default_template != null)
		{
			/* Add default template */
			this.addDefaultTemplate(op_code, default_template);
			
			/* Add default CSS */
			OpDeclareClass op_code_class = default_template.findClass();
			if (op_code_class)
			{
				OpHtmlStyle op_code_style = op_code_class.items.findItem(
					lib::isInstance(classof OpHtmlStyle)
				);
				if (op_code_style)
				{
					this.parent_widget.item.setCSSValue("." ~ widget_name, op_code_style.content);
				}
			}
		}
		
		/* Add op_code attrs */
		this.addTagAttrs(op_code, widget_name);
		
		return op_code;
	}
}