/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Editor;

use Runtime.Web.BaseModel;
use BayLang.Constructor.Frontend.Editor.WidgetCSS;
use BayLang.Constructor.Frontend.Editor.WidgetEditPageModel;
use BayLang.Constructor.Frontend.Editor.WidgetItemParam;
use BayLang.Constructor.Frontend.Editor.WidgetTreeItem;
use BayLang.Exceptions.ParserUnknownError;
use BayLang.LangBay.ParserBay;
use BayLang.LangES6.TranslatorES6;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlStyle;
use BayLang.OpCodes.OpString;


class WidgetCSSModel extends BaseModel
{
	string component = classof WidgetCSS;
	string css_content = "";
	string widget_name = "css";
	Collection<Dict> styles = {};
	WidgetTreeItem selected_item = null;
	WidgetItemParam param_class_name = new WidgetItemParam{ "name": "class_name" };
	WidgetItemParam param_widget_name = new WidgetItemParam{ "name": "widget_name" };
	
	
	/**
	 * Translate CSS
	 */
	list translateCSS(ParserBay parser, TranslatorES6 translator, string source)
	{
		/* Parse source */
		BaseOpCode op_code = null;
		try
		{
			parser = parser::setContent(parser, source ~ "}");
			list res = parser.parser_html::readCssBody(parser);
			op_code = res.get(1);
		}
		catch (ParserUnknownError e)
		{
		}
		
		/* Translate source */
		if (not op_code) return "";
		
		Vector items = [];
		items.push("var content = \"\";");
		list res = translator.expression::Expression(translator, op_code);
		items.push("content += Runtime.rtl.toStr(" ~ res.get(1) ~ ");");
		
		string content = window.eval(rs::join("\n", items));
		return content;
	}
	
	
	/**
	 * Returns CSS content
	 */
	void getCSS()
	{
		Vector items = [];
		Collection selectors = this.styles.keys().sort();
		for (int i=0; i<selectors.count(); i++)
		{
			string selector_name = selectors.get(i);
			Dict item = this.styles.get(selector_name);
			items.push(item.get("content"));
		}
		return rs::join("\n", items);
	}
	
	
	/**
	 * Returns source
	 */
	string getCSSCode(string selector_name, string source)
	{
		return selector_name ~ "{" ~ source ~ "}";
	}
	
	
	/**
	 * Set CSS value
	 */
	Map setCSSValue(
		ParserBay parser, TranslatorES6 translator,
		string selector_name, string source
	)
	{
		/* Parse CSS */
		string content = this.translateCSS(
			parser, translator, this.getCSSCode(selector_name, source)
		);
		
		/* Set content */
		if (not this.styles.has(selector_name))
		{
			this.styles.set(selector_name, {});
		}
		Map result = this.styles.get(selector_name);
		result.set("source", source);
		result.set("content", content);
		
		return result;
	}
	
	
	/**
	 * Add style
	 */
	void addStyle(OpHtmlStyle item)
	{
		ParserBay parser = this.parent_widget.createParser();
		TranslatorES6 translator = this.parent_widget.createTranslator();
		Dict styles = item.readStyles();
		Collection selectors = styles.keys();
		for (int i=0; i<selectors.count(); i++)
		{
			string selector_name = selectors.get(i);
			if (this.styles.has(selector_name)) continue;
			
			/* Set CSS Value */
			string source = styles.get(selector_name);
			Map result = this.setCSSValue(parser, translator, selector_name, source);
			result.set("style", item);
		}
	}
	
	
	/**
	 * Clear styles
	 */
	void clearStyles()
	{
		this.styles = {};
	}
	
	
	/**
	 * Select item
	 */
	void selectItem(WidgetTreeItem selected_item)
	{
		this.selected_item = selected_item;
		Collection<OpHtmlAttribute> attrs = selected_item.op_code.attrs;
		
		/* Clear params */
		this.param_class_name.op_code = null;
		this.param_class_name.value = "";
		this.param_widget_name.op_code = null;
		this.param_widget_name.value = "";
		
		/* Setup attributes */
		this.attrs = [];
		for (int i=0; i<attrs.count(); i++)
		{
			OpHtmlAttribute op_attr = attrs.get(i);
			if (op_attr.value instanceof OpString)
			{
				if (op_attr.key == "class")
				{
					this.setupClass(op_attr);
				}
			}
		}
		
		/* Setup CSS */
		this.setupCSS();
	}
	
	
	/**
	 * Setup class
	 */
	void setupClass(OpHtmlAttribute op_attr)
	{
		string param_class_name = op_attr.value.value;
		Collection<string> names = rs::split(" ", param_class_name);
		names = names.filter(bool (string s) => s != "");
		this.param_class_name.op_code = op_attr;
		this.param_class_name.value = names.slice(1);
		this.param_widget_name.op_code = op_attr;
		this.param_widget_name.value = names.get(0);
	}
	
	
	/**
	 * Setup CSS
	 */
	void setupCSS()
	{
		this.css_content = "";
		string selector_name = "." ~ this.param_widget_name.value;
		
		/* Find CSS content by selector name */
		if (this.styles.has(selector_name))
		{
			Dict item = this.styles.get(selector_name);
			this.css_content = item.get("source");
		}
	}
	
	
	/**
	 * Update attribute
	 */
	void updateAttr(WidgetItemParam item)
	{
		if (
			item.op_code.key == "class" and
			item.op_code.value instanceof OpString and
			(item.name == "widget_name" or item.name == "class_name")
		)
		{
			item.op_code.value.value =
				rs::join(" ", this.param_class_name.value.insertIm(0, this.param_widget_name.value))
			;
		}
		this.parent_widget.updateFrameRender();
	}
	
	
	/**
	 * Change attrs
	 */
	void changeAttrContent(string value, string name)
	{
		WidgetItemParam item = null;
		if (name == "widget_name") item = this.param_widget_name;
		else if (name == "class_name") item = this.param_class_name;
		
		/* Update attr */
		if (item)
		{
			item.value = value;
			this.updateAttr(item);
		}
		
		/* Setup CSS */
		if (name == "widget_name")
		{
			this.setupCSS();
		}
	}
	
	
	/**
	 * Change CSS
	 */
	void changeCSSContent(string value)
	{
		if (this.css_content == value) return;
		
		this.css_content = value;
		string selector_name = "." ~ this.param_widget_name.value;
		
		/* Set CSS Value */
		ParserBay parser = this.parent_widget.createParser();
		TranslatorES6 translator = this.parent_widget.createTranslator();
		this.setCSSValue(parser, translator, selector_name, this.css_content);
		
		/* Update CSS */
		this.parent_widget.updateFrameCSS();
	}
}