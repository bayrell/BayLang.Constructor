/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Editor;

use Runtime.lib;
use Runtime.Callback;
use Runtime.Web.BaseModel;
use Runtime.Web.Annotations.Param;
use BayLang.Constructor.Frontend.Editor.WidgetCSS;
use BayLang.Constructor.Frontend.Editor.WidgetEditPageModel;
use BayLang.Constructor.Frontend.Editor.WidgetItemParam;
use BayLang.Constructor.Frontend.Editor.WidgetTreeItem;
use BayLang.Exceptions.ParserUnknownError;
use BayLang.LangBay.ParserBay;
use BayLang.LangES6.TranslatorES6;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpCollection;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlSlot;
use BayLang.OpCodes.OpHtmlStyle;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.OpCodes.OpString;


class WidgetItemModel extends BaseModel
{
	string component = classof WidgetCSS;
	string css_content = "";
	string widget_name = "item";
	Collection<Dict> styles = {};
	
	/* Params */
	Collection<WidgetItemParam> params = [];
	WidgetItemParam param_class_name = new WidgetItemParam{ "name": "class_name" };
	WidgetItemParam param_widget_name = new WidgetItemParam{ "name": "widget_name" };
	
	/* Selected item */
	Collection<int> selected_path = null;
	WidgetTreeItem selected_item = null;
	string selected_class_name = "";
	string selected_widget_name = "";
		
	
	/**
	 * Translate CSS
	 */
	list translateCSS(ParserBay parser, TranslatorES6 translator, string source)
	{
		/* Parse source */
		BaseOpCode op_code = null;
		try
		{
			parser = parser::setContent(parser, source ~ "}");
			list res = parser.parser_html::readCssBody(parser);
			op_code = res.get(1);
		}
		catch (ParserUnknownError e)
		{
		}
		
		/* Translate source */
		if (not op_code) return "";
		
		Vector items = [];
		items.push("var content = \"\";");
		list res = translator.expression::Expression(translator, op_code);
		items.push("content += Runtime.rtl.toStr(" ~ res.get(1) ~ ");");
		
		string content = window.eval(rs::join("\n", items));
		return content;
	}
	
	
	/**
	 * Returns CSS content
	 */
	void getCSS()
	{
		Vector items = [];
		Collection selectors = this.styles.keys().sort();
		for (int i=0; i<selectors.count(); i++)
		{
			string selector_name = selectors.get(i);
			Dict item = this.styles.get(selector_name);
			items.push(item.get("content"));
		}
		return rs::join("\n", items);
	}
	
	
	/**
	 * Returns source
	 */
	string getCSSCode(string selector_name, string source)
	{
		return selector_name ~ "{" ~ source ~ "}";
	}
	
	
	/**
	 * Set CSS value
	 */
	Map setCSSValue(
		ParserBay parser, TranslatorES6 translator,
		string selector_name, string source
	)
	{
		/* Parse CSS */
		string content = this.translateCSS(
			parser, translator, this.getCSSCode(selector_name, source)
		);
		
		/* Set content */
		if (not this.styles.has(selector_name))
		{
			this.styles.set(selector_name, {});
		}
		Map result = this.styles.get(selector_name);
		result.set("source", source);
		result.set("content", content);
		
		return result;
	}
	
	
	/**
	 * Add style
	 */
	void addStyle(OpHtmlStyle item)
	{
		ParserBay parser = this.parent_widget.createParser();
		TranslatorES6 translator = this.parent_widget.createTranslator();
		Dict styles = item.readStyles();
		Collection selectors = styles.keys();
		for (int i=0; i<selectors.count(); i++)
		{
			string selector_name = selectors.get(i);
			if (this.styles.has(selector_name)) continue;
			
			/* Set CSS Value */
			string source = styles.get(selector_name);
			Map result = this.setCSSValue(parser, translator, selector_name, source);
			result.set("style", item);
		}
	}
	
	
	/**
	 * Clear styles
	 */
	void clearStyles()
	{
		this.styles = {};
	}
	
	
	/**
	 * Select item
	 */
	void selectItem(Collection<int> path, WidgetTreeItem item)
	{
		this.selected_item = item;
		this.selected_path = path.slice();
		
		/* Clear params */
		this.attrs = [];
		this.params = [];
		this.param_class_name.op_attr = null;
		this.param_class_name.value = [];
		this.param_widget_name.op_attr = null;
		this.param_widget_name.value = "";
		this.selected_class_name = "";
		this.selected_widget_name = "";
		
		if (not this.selected_item) return;
		
		/* Setup CSS */
		this.setupCSS();
		
		/* Setup params */
		this.setupParams();
		
		/* Setup attributes */
		this.setupAttrs();
		
		/* Create class attribute */
		if (this.param_class_name.op_attr == null)
		{
			OpHtmlAttribute op_attr = new OpHtmlAttribute{
				"key": "class",
			};
			this.param_class_name.op_attr = op_attr;
			this.param_widget_name.op_attr = op_attr;
		}
	}
	
	
	/**
	 * Setup attrs
	 */
	void setupAttrs()
	{
		BaseOpCode selected_item_op_code = this.selected_item.op_code;
		if (
			not (selected_item_op_code instanceof OpHtmlTag) and
			not (selected_item_op_code instanceof OpHtmlSlot)
		)
		{
			return;
		}
		
		Collection<OpHtmlAttribute> attrs = this.selected_item.op_code.attrs;
		if (not attrs) return;
		
		for (int i=0; i<attrs.count(); i++)
		{
			OpHtmlAttribute op_attr = attrs.get(i);
			this.setupAttr(op_attr);
		}
	}
	
	
	/**
	 * Setup params
	 */
	void setupParams()
	{
		BaseOpCode selected_item_op_code = this.selected_item.op_code;
		if (not (selected_item_op_code instanceof OpHtmlTag)) return;
		
		/* Setup widget name */
		this.selected_widget_name = selected_item_op_code.tag_name;
		
		/* Setup widget class name */
		string class_name = this.parent_widget.getWidgetClassName(this.selected_widget_name);
		if (not class_name) return;
		this.selected_class_name = class_name;
		
		/* Get params */
		var content_window = this.parent_widget.getFrameWindow();
		var widget_class = content_window.Runtime.rtl.find_class(class_name);
		Callback getFieldsList = new content_window.Runtime.Callback(class_name, "getFieldsList");
		Callback getFieldInfoByName = new content_window.Runtime.Callback(
			class_name, "getFieldInfoByName"
		);
		
		if (not getFieldsList.exists()) return;
		if (not getFieldInfoByName.exists()) return;
		
		/* Get fields params */
		Collection<string> fields = getFieldsList.apply();
		fields = fields.map(
			Dict (string field_name) use (getFieldInfoByName)
			{
				Dict info = getFieldInfoByName.apply([field_name])
				info.set("name", field_name);
				return info;
			}
		)
		fields = fields.map(
			Dict (Dict item) use (widget_class)
			{
				Collection annotations = item.get("annotations");
				Param param = annotations.findItem(
					bool (var annotation) =>
						rtl::is_instanceof(annotation, classof Param)
				);
				
				string field_name = item.get("name");
				var value = widget_class.props[field_name].default;
				
				return new WidgetItemParam
				{
					"name": field_name,
					"value": value,
					"param": param,
				};
			}
		);
		this.params = fields.filter(lib::equalNot(null));
	}
	
		
	/**
	 * Change attr op_code value
	 */
	void changeOpCodeAttrValue(WidgetItemParam item, string value)
	{
		/* Change item value */
		item.value = value;
		
		/* Create Attribute */
		if (item.op_attr == null)
		{
			item.op_attr = new OpHtmlAttribute{
				"key": item.name,
			};
			this.selected_item.op_code.attrs.prepend(item.op_attr);
		}
		
		/* Change op_code value */
		if (rtl::isString(value))
		{
			item.op_attr.value = new OpString
			{
				"value": value
			};
		}
		else if (rtl::is_instanceof(value, classof Collection))
		{
			item.op_attr.value = new OpCollection
			{
				"values": value.map(
					OpString (string s) => new OpString{
						"value": s,
					}
				)
			};
		}
	}
	
	
	/**
	 * Returns op code value
	 */
	var getOpCodeAttrValue(OpHtmlAttribute op_attr)
	{
		if (rtl::is_instanceof(op_attr.value, classof OpString))
		{
			return op_attr.value.value;
		}
		if (rtl::is_instanceof(op_attr.value, classof OpCollection))
		{
			return op_attr.value.values.map(
				string (OpString value) => value.value
			);
		}
	}
	
	
	/**
	 * Setup attr
	 */
	void setupAttr(OpHtmlAttribute op_attr)
	{
		if (op_attr.key == "@key") return;
		if (op_attr.key == "class")
		{
			this.setupClass(op_attr);
			return;
		}
		
		/* Get param value */
		string name = op_attr.key
		var value = this.getOpCodeAttrValue(op_attr);
		
		/* Setup param value */
		this.params.each(void (WidgetItemParam item) use (op_attr, name, value){
			if (item.name == name)
			{
				item.op_attr = op_attr;
				item.value = value;
			}
		});
	}
	
	
	/**
	 * Setup class
	 */
	void setupClass(OpHtmlAttribute op_attr)
	{
		string param_class_name = op_attr.value.value;
		Collection<string> names = rs::split(" ", param_class_name);
		names = names.filter(bool (string s) => s != "");
		this.param_class_name.op_attr = op_attr;
		this.param_class_name.value = names.slice(1);
		this.param_widget_name.op_attr = op_attr;
		this.param_widget_name.value = names.get(0);
	}
	
	
	/**
	 * Setup CSS
	 */
	void setupCSS()
	{
		this.css_content = "";
		string selector_name = "." ~ this.param_widget_name.value;
		
		/* Find CSS content by selector name */
		if (this.styles.has(selector_name))
		{
			Dict item = this.styles.get(selector_name);
			this.css_content = item.get("source");
		}
	}
	
	
	/**
	 * Change param
	 */
	void changeParam(WidgetItemParam item, var value)
	{
		/* Change op code value */
		this.changeOpCodeAttrValue(item, value);
		
		/* Update render */
		this.parent_widget.updateFrameRender();
	}
	
	
	/**
	 * Change attrs
	 */
	void changeAttrContent(string name, var value)
	{
		WidgetItemParam item = null;
		if (name == "widget_name") item = this.param_widget_name;
		else if (name == "class_name") item = this.param_class_name;
		
		/* Update attr */
		if (item)
		{
			item.value = value;
			Collection value_arr = this.param_class_name.value.insertIm(0,
				this.param_widget_name.value
			);
			this.changeOpCodeAttrValue(item, rs::join(" ", value_arr));
			this.selected_item.updateLabel();
			this.parent_widget.updateFrameRender();
		}
		
		/* Setup CSS */
		if (name == "widget_name")
		{
			this.setupCSS();
		}
	}
	
	
	/**
	 * Change CSS
	 */
	void changeCSSContent(string value)
	{
		if (this.css_content == value) return;
		
		this.css_content = value;
		string selector_name = "." ~ this.param_widget_name.value;
		
		/* Set CSS Value */
		ParserBay parser = this.parent_widget.createParser();
		TranslatorES6 translator = this.parent_widget.createTranslator();
		this.setCSSValue(parser, translator, selector_name, this.css_content);
		
		/* Update CSS */
		this.parent_widget.updateFrameCSS();
	}
}