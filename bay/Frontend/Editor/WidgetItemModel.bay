/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Editor;

use Runtime.lib;
use Runtime.Callback;
use Runtime.Web.BaseModel;
use Runtime.Web.Annotations.Param;
use BayLang.Constructor.Frontend.Editor.WidgetCSS;
use BayLang.Constructor.Frontend.Editor.WidgetEditPageModel;
use BayLang.Constructor.Frontend.Editor.WidgetItemParam;
use BayLang.Constructor.Frontend.Editor.WidgetItemStyle;
use BayLang.Constructor.Frontend.Editor.WidgetTreeItem;
use BayLang.Exceptions.ParserUnknownError;
use BayLang.LangBay.ParserBay;
use BayLang.LangES6.TranslatorES6;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpCollection;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlContent;
use BayLang.OpCodes.OpHtmlSlot;
use BayLang.OpCodes.OpHtmlStyle;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.OpCodes.OpHtmlValue;
use BayLang.OpCodes.OpString;


class WidgetItemModel extends BaseModel
{
	string component = classof WidgetCSS;
	string widget_name = "item";
	Collection<Dict> styles = {};
	OpHtmlStyle main_style_item = null;
	
	/* Params */
	Collection<WidgetItemParam> params = [];
	WidgetItemParam param_class_name = new WidgetItemParam{ "name": "class_name" };
	WidgetItemParam param_widget_name = new WidgetItemParam{ "name": "widget_name" };
	
	/* Selected item */
	Collection<int> selected_path = null;
	WidgetTreeItem selected_item = null;
	string selected_class_name = "";
	string selected_widget_name = "";
	
	/* HTML Element */
	bool is_component = false;
	bool is_raw = false;
	string html_content = "";
	
	
	/**
	 * Returns CSS content
	 */
	void getCSS()
	{
		Vector items = [];
		Collection selectors = this.styles.keys().sort();
		for (int i=0; i<selectors.count(); i++)
		{
			string selector_name = selectors.get(i);
			Dict item = this.styles.get(selector_name);
			items.push(item.content);
		}
		return rs::join("\n", items);
	}
	
	
	/**
	 * Returns source
	 */
	string getCSSCode(string selector_name, string source)
	{
		return selector_name ~ "{" ~ source ~ "}";
	}
	
	
	/**
	 * Set CSS value
	 */
	void setCSSValue(string selector_name, string source, OpHtmlStyle item = null)
	{
		/* Default item */
		if (item == null)
		{
			item = this.main_style_item;
		}
		
		/* Add style if does not exists */
		if (not this.styles.has(selector_name))
		{
			WidgetItemStyle item_style = new WidgetItemStyle();
			item_style.op_code = item;
			item_style.selector_name = selector_name;
			item_style.parent_widget = this.parent_widget;
			this.styles.set(selector_name, item_style);
		}
		
		/* Set content */
		WidgetItemStyle item_style = this.styles.get(selector_name);
		item_style.setSource(source);
	}
	
	
	/**
	 * Add HTML style
	 */
	void addHtmlStyle(OpHtmlStyle item)
	{
		if (this.main_style_item == null)
		{
			this.main_style_item = item;
		}
		
		Dict styles = item.readStyles();
		Collection selectors = styles.keys();
		for (int i=0; i<selectors.count(); i++)
		{
			string selector_name = selectors.get(i);
			if (this.styles.has(selector_name)) continue;
			
			/* Set CSS Value */
			string source = styles.get(selector_name);
			this.setCSSValue(selector_name, source, item);
		}
	}
	
	
	/**
	 * Update HTML Style
	 */
	void updateHtmlStyle(OpHtmlStyle item)
	{
		/* Build style source */
		Vector source = [];
		Collection selectors = this.styles.keys().sort();
		for (int i=0; i<selectors.count(); i++)
		{
			string selector_name = selectors.get(i);
			WidgetItemStyle item_style = this.styles.get(selector_name);
			if (item_style.op_code != item) continue;
			source.push(selector_name ~ "{");
			Collection lines = rs::split("\n", item_style.source);
			lines = lines.map(string (string s) => "\t" ~ s);
			source.appendItems(lines);
			source.push("}");
		}
		
		/* Set content to html style op_code */
		string content = rs::join("\n", source);
		item.content = content;
		if (item.value instanceof OpString)
		{
			item.value.value = content;
		}
	}
	
	
	/**
	 * Clear styles
	 */
	void clearStyles()
	{
		this.styles = {};
	}
	
	
	/**
	 * Select item
	 */
	void selectItem(Collection<int> path, WidgetTreeItem item)
	{
		this.selected_item = item;
		this.selected_path = path ? path.slice() : null;
		
		/* Clear params */
		this.attrs = [];
		this.params = [];
		this.param_class_name.op_attr = null;
		this.param_class_name.value = [];
		this.param_widget_name.op_attr = null;
		this.param_widget_name.value = "";
		this.selected_class_name = "";
		this.selected_widget_name = "";
		
		/* Clear HTML params */
		this.is_component = false;
		this.is_raw = false;
		this.html_content = "";
		
		if (not this.selected_item) return;
		
		/* Setup params */
		this.setupParams();
		
		/* Setup attributes */
		this.setupAttrs();
		
		/* Create class attribute */
		if (this.param_class_name.op_attr == null)
		{
			OpHtmlAttribute op_attr = new OpHtmlAttribute{
				"key": "class",
			};
			this.param_class_name.op_attr = op_attr;
			this.param_widget_name.op_attr = op_attr;
		}
	}
	
	
	/**
	 * Setup attrs
	 */
	void setupAttrs()
	{
		BaseOpCode selected_item_op_code = this.selected_item.op_code;
		if (
			not (selected_item_op_code instanceof OpHtmlTag) and
			not (selected_item_op_code instanceof OpHtmlSlot)
		)
		{
			return;
		}
		
		Collection<OpHtmlAttribute> attrs = this.selected_item.op_code.attrs;
		if (not attrs) return;
		
		for (int i=0; i<attrs.count(); i++)
		{
			OpHtmlAttribute op_attr = attrs.get(i);
			this.setupAttr(op_attr);
		}
	}
	
	
	/**
	 * Setup attr
	 */
	void setupAttr(OpHtmlAttribute op_attr)
	{
		if (op_attr.key == "@key") return;
		if (op_attr.key == "class")
		{
			this.setupClass(op_attr);
			return;
		}
		
		/* Get param value */
		string name = op_attr.key
		var value = this.getOpCodeAttrValue(op_attr);
		
		/* Setup param value */
		this.params.each(void (WidgetItemParam item) use (op_attr, name, value){
			if (item.name == name)
			{
				item.op_attr = op_attr;
				item.value = value;
			}
		});
	}
	
	
	/**
	 * Setup class
	 */
	void setupClass(OpHtmlAttribute op_attr)
	{
		string param_class_name = op_attr.value.value;
		Collection<string> names = rs::split(" ", param_class_name);
		names = names.filter(bool (string s) => s != "");
		this.param_class_name.op_attr = op_attr;
		this.param_class_name.value = names.slice(1);
		this.param_widget_name.op_attr = op_attr;
		this.param_widget_name.value = names.get(0);
	}
	
	
	/**
	 * Setup HTML Params
	 */
	bool setupHtmlParams()
	{
		this.is_component = false;
		this.is_raw = false;
		this.html_content = "";
		
		/* Get op_code */
		OpHtmlTag selected_item_op_code = this.selected_item.op_code;
		BaseOpCode text_item = selected_item_op_code.items.items.get(0);
		
		/* Setup text */
		if (text_item instanceof OpHtmlContent)
		{
			this.html_content = text_item.value;
		}
		else if (text_item instanceof OpHtmlValue)
		{
			this.is_raw = text_item.kind == "raw";
			if (text_item.value instanceof OpString)
			{
				this.html_content = text_item.value.value;
			}
		}
	}
	
	
	/**
	 * Setup params
	 */
	void setupParams()
	{
		BaseOpCode selected_item_op_code = this.selected_item.op_code;
		if (not (selected_item_op_code instanceof OpHtmlTag)) return;
		
		/* Setup widget name */
		this.selected_widget_name = selected_item_op_code.tag_name;
		if (not WidgetEditPageModel::isComponent(this.selected_widget_name))
		{
			this.setupHtmlParams();
			return;
		}
		
		/* Set component */
		this.is_component = true;
		
		/* Setup widget class name */
		string class_name = this.parent_widget.getWidgetClassName(this.selected_widget_name);
		if (not class_name) return;
		this.selected_class_name = class_name;
		
		/* Get params */
		var content_window = this.parent_widget.getFrameWindow();
		var widget_class = content_window.Runtime.rtl.find_class(class_name);
		Callback getFieldsList = new content_window.Runtime.Callback(class_name, "getFieldsList");
		Callback getFieldInfoByName = new content_window.Runtime.Callback(
			class_name, "getFieldInfoByName"
		);
		
		if (not getFieldsList.exists()) return;
		if (not getFieldInfoByName.exists()) return;
		
		/* Get fields params */
		Collection<string> fields = getFieldsList.apply();
		fields = fields.map(
			Dict (string field_name) use (getFieldInfoByName)
			{
				Dict info = getFieldInfoByName.apply([field_name])
				info.set("name", field_name);
				return info;
			}
		)
		fields = fields.map(
			Dict (Dict item) use (widget_class)
			{
				Collection annotations = item.get("annotations");
				Param param = annotations.findItem(
					bool (var annotation) =>
						rtl::is_instanceof(annotation, classof Param)
				);
				
				string field_name = item.get("name");
				var value = widget_class.props[field_name].default;
				
				return new WidgetItemParam
				{
					"name": field_name,
					"value": value,
					"param": param,
				};
			}
		);
		this.params = fields.filter(lib::equalNot(null));
	}
	
		
	/**
	 * Change attr op_code value
	 */
	void changeOpCodeAttrValue(WidgetItemParam item, var value)
	{
		/* Change item value */
		if (item.name != "widget_name" and item.name != "class_name")
		{
			item.value = value;
		}
		
		/* Create Attribute */
		if (item.op_attr == null)
		{
			item.op_attr = new OpHtmlAttribute{
				"key": item.name,
			};
			this.selected_item.op_code.attrs.prepend(item.op_attr);
		}
		
		/* Change op_code value */
		if (rtl::isString(value))
		{
			item.op_attr.value = new OpString
			{
				"value": value
			};
		}
		else if (rtl::is_instanceof(value, classof Collection))
		{
			item.op_attr.value = new OpCollection
			{
				"values": value.map(
					OpString (string s) => new OpString{
						"value": s,
					}
				)
			};
		}
	}
	
	
	/**
	 * Returns op code value
	 */
	var getOpCodeAttrValue(OpHtmlAttribute op_attr)
	{
		if (rtl::is_instanceof(op_attr.value, classof OpString))
		{
			return op_attr.value.value;
		}
		if (rtl::is_instanceof(op_attr.value, classof OpCollection))
		{
			return op_attr.value.values.map(
				string (OpString value) => value.value
			);
		}
	}
	
	
	/**
	 * Change param
	 */
	void changeParam(WidgetItemParam item, var value)
	{
		/* Change op code value */
		this.changeOpCodeAttrValue(item, value);
		
		/* Set app is changed */
		this.parent_widget.onAppChanged();
		
		/* Update render */
		this.parent_widget.updateFrameRender();
	}
	
	
	
	/**
	 * Change HTML Content
	 */
	void changeHtmlContent(string value)
	{
		/* Get op_code */
		OpHtmlTag selected_item_op_code = this.selected_item.op_code;
		BaseOpCode text_item = selected_item_op_code.items.items.get(0);
		
		/* Set value */
		this.html_content = value;
		
		/* Setup text */
		if (text_item instanceof OpHtmlContent)
		{
			text_item.value = value;
		}
		else if (text_item instanceof OpHtmlValue)
		{
			if (text_item.value instanceof OpString)
			{
				text_item.value.value = value;
			}
		}
		
		/* Set app is changed */
		this.parent_widget.onAppChanged();
		
		/* Update render */
		this.parent_widget.updateFrameRender();
	}
	
	
	/**
	 * Change HTML Raw Flag
	 */
	void changeHtmlRaw(string is_raw)
	{
		/* Get op_code */
		OpHtmlTag selected_item_op_code = this.selected_item.op_code;
		
		/* Set value */
		this.is_raw = is_raw == "1";
		selected_item_op_code.items.items = [];
		
		/* Set Raw HTML */
		if (this.is_raw)
		{
			selected_item_op_code.items.items.push
			(
				new OpHtmlValue
				{
					"kind": "raw",
					"value": new OpString
					{
						"value": this.html_content,
					}
				}
			);
		}
		
		/* Set HTML Content */
		else
		{
			selected_item_op_code.items.items.push
			(
				new OpHtmlContent
				{
					"value": this.html_content,
				}
			);
		}
		
		/* Set app is changed */
		this.parent_widget.onAppChanged();
		
		/* Update render */
		this.parent_widget.updateFrameRender();
	}
	
	
	/**
	 * Change attrs
	 */
	void changeAttrContent(string name, var value)
	{
		WidgetItemParam item = null;
		if (name == "widget_name") item = this.param_widget_name;
		else if (name == "class_name") item = this.param_class_name;
		
		/* Update attr */
		if (item)
		{
			item.value = value;
			Collection value_arr = this.param_class_name.value.insertIm(0,
				this.param_widget_name.value
			);
			this.changeOpCodeAttrValue(item, rs::join(" ", value_arr));
			this.selected_item.updateLabel();
			this.parent_widget.updateFrameRender();
		}
		
		/* Set app is changed */
		this.parent_widget.onAppChanged();
	}
	
	
	/**
	 * Returns CSS Content
	 */
	string getCurrentSelector() => "." ~ this.param_widget_name.value;
	
	
	/**
	 * Returns CSS Content
	 */
	string getCSSContent(string selector_name)
	{
		if (not this.styles.has(selector_name)) return "";
		return this.styles.get(selector_name).source;
	}
	
	
	/**
	 * Change CSS
	 */
	void changeCSSContent(string selector_name, string value)
	{
		/* Set CSS Value */
		this.setCSSValue(selector_name, value);
		
		/* Set app is changed */
		this.parent_widget.onAppChanged();
		
		/* Update CSS */
		this.parent_widget.updateFrameCSS();
	}
}