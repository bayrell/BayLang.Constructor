<!--
 *  BayLang Constructor
-->

<class name="BayLang.Constructor.Frontend.Editor.WidgetParam">

<use name="Runtime.Callback" />
<use name="Runtime.Widget.Input" component="true" />
<use name="Runtime.Widget.Select" component="true" />
<use name="Runtime.Widget.Tag" component="true" />
<use name="Runtime.Widget.TextArea" component="true" />
<use name="Runtime.Widget.TextEditable" component="true" />
<use name="Runtime.Widget.Dialog.DialogModelException" />
<use name="Runtime.Widget.Dialog.PromptDialog" component="true" />
<use name="Runtime.Widget.Dialog.PromptDialogModel" />
<use name="BayLang.Constructor.Frontend.Editor.WidgetItemParam" />


<style>
.widget_param{
	padding-bottom: 20px;
}
.widget_param__row{
	margin-bottom: 10px;
}
.widget_param__label{
	margin-bottom: 5px;
}
.widget_param__title{
	margin-bottom: 5px;
}
.widget_param__text{
	display: flex;
	gap: 10px;
}
.widget_param__text_label{
	overflow-wrap: anywhere;
}
.widget_param__text_button{
	cursor: pointer;
}
.widget_param__text_button:hover{
	text-decoration: underline;
}
.widget_param %(Select)widget_select{
	padding: 4px;
}
.widget_param %(Input)widget_input,
.widget_param %(TextArea)widget_textarea{
	padding: 7px;
}
.widget_param %(TextArea)widget_textarea{
	font-family: 'PT Mono';
	line-height: 1.5;
}
</style>


<template name="renderComponentName">
	<div class="widget_param__row">
		<div class="widget_param__label">Component</div>
		<div class="widget_param__content">
			{{ this.model.selected_item.op_code.tag_name }}
		</div>
	</div>
</template>


<template name="renderWidgetName">
	<div class="widget_param__row">
		<div class="widget_param__label">
			<div class="widget_param__text">
				<div class="widget_param__text_label">
					Name
				</div>
				<div class="widget_param__text_button"
					@event:click={{ this.onEditClickName }}
				>
					[Edit]
				</div>
			</div>
		</div>
		<div class="widget_param__content">
			{{ this.model.param_widget_name.value }}
		</div>
	</div>
</template>


<template name="renderClassName">
	<div class="widget_param__row">
		<div class="widget_param__label">Class</div>
		<div class="widget_param__content">
			<Tag value={{ this.model.param_class_name.value }}
				@event:valueChange={{ void (var value) {
					this.model.changeAttrContent("class_name", value);
				} }}
			/>
		</div>
	</div>
</template>


<template name="renderCSS">
	%set string selector_name = this.model.getCurrentSelector();
	<div class="widget_param__row">
		<div class="widget_param__title">
			CSS
		</div>
		<TextEditable value={{ this.model.getCSSContent(selector_name) }}
			@event:valueChange={{ void (var value) use (selector_name) {
				this.model.changeCSSContent(selector_name, value)
			} }}
		/>
	</div>
</template>


<template name="renderComponentParams">
	%for (int i=0; i<this.model.params.count(); i++)
	{
		%set WidgetItemParam item = this.model.params.get(i);
		%set Dict item_props = item.param.get("props");
		%set string class_name = item.param.get("name");
		<div class="widget_param__row">
			<div class="widget_param__label">{{ item.param.get("label") }}</div>
			<div class="widget_param__content">
				%if (this.isAllowClassName(class_name))
				{
					<{class_name}
						value={{ item.value }}
						@event:valueChange={{ void (var value) use (item) {
							this.model.changeParam(item, value);
						} }}
						...item_props
					/>
				}
			</div>
		</div>
	}
</template>


<template name="renderHtmlParams">
	<!--
	<div class="widget_param__row">
		<div class="widget_param__label">Is Raw HTML</div>
		<div class="widget_param__content">
			<Select
				name="is_raw_html"
				value={{ this.model.is_raw }}
				show_select_value={{ false }}
				options=[
					{ "value": "0", "label": "No" },
					{ "value": "1", "label": "Yes" },
				]
				@event:valueChange={{ void (var value) {
					this.model.changeHtmlRaw(value)
				} }}
			/>
		</div>
	</div>
	-->
	<div class="widget_param__row">
		<div class="widget_param__label">Content</div>
		<div class="widget_param__content">
			<TextEditable
				name="content"
				value={{ this.model.html_content }}
				direct_update={{ true }}
				@event:valueChange={{ void (var value) {
					this.model.changeHtmlContent(value)
				} }}
			/>
		</div>
	</div>
</template>


<template>
	<div class="widget_param">
		%if (this.model.selected_item)
		{
			<!-- Render info -->
			%render this.renderComponentName();
			%render this.renderWidgetName();
			%render this.renderClassName();
			
			<!-- Render params -->
			%if (this.model.is_component)
			{
				%render this.renderComponentParams();
			}
			%else
			{
				%render this.renderHtmlParams();
			}
			
			<!-- Render CSS -->
			%render this.renderCSS();
			
			<!-- Render dialog -->
			%render this.renderWidget(this.edit_dialog);
		}
	</div>
</template>


<script>

/* Dialogs */
PromptDialogModel edit_dialog = new PromptDialogModel{
	"widget_name": "edit_dialog",
	"confirm_button": "Rename",
	"title": "Rename name",
	"events": {
		"confirm": new Callback(this, "onRename")
	},
};


/**
 * Returns true if class name is allowed
 */
bool isAllowClassName(string class_name)
{
	if (class_name == "Runtime.Widget.Input") return true;
	if (class_name == "Runtime.Widget.Select") return true;
	if (class_name == "Runtime.Widget.SortableList") return true;
	if (class_name == "Runtime.Widget.Tag") return true;
	if (class_name == "Runtime.Widget.TextEditable") return true;
	return false;
}


/**
 * Add click
 */
void onEditClickName()
{
	this.old_widget_name = this.model.param_widget_name.value;
	this.edit_dialog.setTitle("Rename " ~ this.old_widget_name);
	this.edit_dialog.setValue(this.old_widget_name);
	this.edit_dialog.show();
}


/**
 * Rename
 */
void onRename(string new_widget_name)
{
	if (this.old_widget_name == new_widget_name) return;
	
	string new_selector_name = new_widget_name;
	if (rs::charAt(new_selector_name, 0) != ".") new_selector_name = "." ~ new_selector_name;
	
	/* Rename widget */
	this.model.changeAttrContent("widget_name", new_widget_name);
	
	/* Create new style */
	if (not this.model.styles.has(new_selector_name))
	{
		string css_content = this.model.getCSSContent("." ~ this.old_widget_name)
		this.model.changeCSSContent(new_selector_name, css_content);
	}
}

</script>


</class>