<!--
 *  BayLang Constructor
-->

<class name="BayLang.Constructor.Frontend.Editor.WidgetParam">

<use name="Runtime.Callback" />
<use name="Runtime.Widget.Input" component="true" />
<use name="Runtime.Widget.Select" component="true" />
<use name="Runtime.Widget.Tag" component="true" />
<use name="Runtime.Widget.TextArea" component="true" />
<use name="Runtime.Widget.TextEditable" component="true" />
<use name="BayLang.Constructor.Frontend.Editor.WidgetItemParam" />
<use name="BayLang.Constructor.Frontend.Editor.WidgetItemStyle" />
<use name="BayLang.Constructor.Frontend.Editor.WidgetStyle" component="true" />


<style>
.widget_param{
	padding-bottom: 20px;
}
.widget_param__row{
	margin-bottom: 10px;
}
.widget_param__label{
	margin-bottom: 5px;
}
.widget_param__title{
	margin-bottom: 5px;
}
.widget_param__text{
	display: flex;
	gap: 10px;
}
.widget_param__text_label{
	overflow-wrap: anywhere;
}
.widget_param__text_button{
	cursor: pointer;
}
.widget_param__text_button:hover{
	text-decoration: underline;
}
.widget_param %(Select)widget_select{
	padding: 4px;
}
.widget_param %(Input)widget_input,
.widget_param %(TextArea)widget_textarea{
	padding: 7px;
}
.widget_param %(TextArea)widget_textarea{
	font-family: 'PT Mono';
	line-height: 1.5;
}
.widget_param__tabs{
	display: flex;
	align-items: center;
    justify-content: center;
	margin-bottom: 10px;
}
.widget_param__tabs_item{
	padding: 5px;
	cursor: pointer;
}
.widget_param__tabs_item.selected{
	background-color: var(--widget-color-primary);
	color: var(--widget-color-primary-text);
}
.widget_param__tabs_content{
	display: none;
	padding-bottom: 5px;
}
.widget_param__tabs_content.selected{
	display: block;
}
.widget_css__label{
	text-align: center;
	background-color: aliceblue;
	padding: 5px;
	margin-bottom: 5px;
}
.widget_css__row{
	display: flex;
	align-items: center;
	margin-bottom: 5px;
}
.widget_css__key{
	width: 100px;
}
.widget_css__value{
	width: calc(100% - 100px);
}
</style>


<template name="renderInput" args="
	WidgetItemStyle item_style, string key,
	string label, string default_value = ''"
>
	%set string value = this.getCSSValue(item_style, key, default_value);
	<div class="widget_css__row">
		<div class="widget_css__key">{{ label ? label : key }}</div>
		<div class="widget_css__value">
			<Input value={{ value }}
				@event:valueChange={{
					void (string value) use (item_style, key)
					{
						this.setCSSValue(item_style, key, value);
					}
				}}
			/>
		</div>
	</div>
</template>


<template name="renderSelect" args="
	WidgetItemStyle item_style, string key,
	string label, Collection options"
>
	%set string value = this.getCSSValue(item_style, key);
	<div class="widget_css__row">
		<div class="widget_css__key">{{ label ? label : key }}</div>
		<div class="widget_css__value">
			<Select
				value={{ value }}
				options={{ options }}
				@event:valueChange={{
					void (string value) use (item_style, key)
					{
						this.setCSSValue(item_style, key, value);
					}
				}}
			/>
		</div>
	</div>
</template>


<template name="renderComponentName">
	<div class="widget_param__row">
		<div class="widget_param__label">Component</div>
		<div class="widget_param__content">
			{{ this.model.selected_item.op_code.tag_name }}
		</div>
	</div>
</template>


<template name="renderWidgetName">
	<div class="widget_param__row">
		<div class="widget_param__label">
			<div class="widget_param__text">
				<div class="widget_param__text_label">
					Name
				</div>
				<div class="widget_param__text_button"
					@event:click={{ void ()
					{
						this.model.parent_widget.renameSelectedItem();
					} }}
				>
					[Edit]
				</div>
			</div>
		</div>
		<div class="widget_param__content">
			{{ this.model.param_widget_name.value }}
		</div>
	</div>
</template>


<template name="renderClassName">
	<div class="widget_param__row">
		<div class="widget_param__label">Class</div>
		<div class="widget_param__content">
			<Tag value={{ this.model.param_class_name.value }}
				@event:valueChange={{ void (var value) {
					this.model.changeAttrContent("class_name", value);
				} }}
			/>
		</div>
	</div>
</template>


<template name="renderParams">
	<div class="widget_param__tabs_content"
		class={{ this.current_tab == "params" ? "selected" : "" }}
	>
	%for (int i=0; i<this.model.params.count(); i++)
	{
		%set WidgetItemParam item = this.model.params.get(i);
		%set Dict item_props = item.param.get("props");
		%set string class_name = item.param.get("name");
		<div class="widget_param__row">
			<div class="widget_param__label">{{ item.param.get("label") }}</div>
			<div class="widget_param__content">
				%if (this.isAllowClassName(class_name))
				{
					<{class_name}
						value={{ item.value }}
						@event:valueChange={{ void (var value) use (item) {
							this.model.changeParam(item, value);
						} }}
						...item_props
					/>
				}
			</div>
		</div>
	}
	</div>
</template>


<template name="renderHtmlParams">
	<!--
	<div class="widget_param__row">
		<div class="widget_param__label">Is Raw HTML</div>
		<div class="widget_param__content">
			<Select
				name="is_raw_html"
				value={{ this.model.is_raw }}
				show_select_value={{ false }}
				options=[
					{ "value": "0", "label": "No" },
					{ "value": "1", "label": "Yes" },
				]
				@event:valueChange={{ void (var value) {
					this.model.changeHtmlRaw(value)
				} }}
			/>
		</div>
	</div>
	-->
	<div class="widget_param__row">
		<div class="widget_param__label">Content</div>
		<div class="widget_param__content">
			<TextEditable
				name="content"
				value={{ this.model.html_content }}
				direct_update={{ true }}
				@event:valueChange={{ void (var value) {
					this.model.changeHtmlContent(value)
				} }}
			/>
		</div>
	</div>
</template>


<template name="renderStyles">
	<div class="widget_param__tabs_content widget_css"
		class={{ this.current_tab == "styles" ? "selected" : "" }}
	>
		%set string selector_name = this.model.getCurrentSelector();
		%set WidgetItemStyle item_style = this.model.styles.get(selector_name);
		<div class="widget_css__content">
			<div class="widget_css__label">Common</div>
			<div class="widget_css__items">
				%render this.renderInput(item_style, "width", "");
				%render this.renderInput(item_style, "height", "");
				%render this.renderInput(item_style, "min-width", "");
				%render this.renderInput(item_style, "min-height", "");
			</div>
		</div>
		<div class="widget_css__content">
			<div class="widget_css__label">Padding</div>
			<div class="widget_css__items">
				%render this.renderInput(item_style, "padding-top", "");
				%render this.renderInput(item_style, "padding-bottom", "");
				%render this.renderInput(item_style, "padding-left", "");
				%render this.renderInput(item_style, "padding-right", "");
			</div>
		</div>
		<div class="widget_css__content">
			<div class="widget_css__label">Margin</div>
			<div class="widget_css__items">
				%render this.renderInput(item_style, "margin-top", "");
				%render this.renderInput(item_style, "margin-bottom", "");
				%render this.renderInput(item_style, "margin-left", "");
				%render this.renderInput(item_style, "margin-right", "");
			</div>
		</div>
		<div class="widget_css__content">
			<div class="widget_css__label">Font</div>
			<div class="widget_css__items">
				%render this.renderInput(item_style, "font-size", "");
				%render this.renderSelect(item_style, "font-weight", "", [
					{"label": "light", "value": "lighter"},
					{"label": "normal", "value": "normal"},
					{"label": "bold", "value": "bold"},
					{"label": "bolder", "value": "bolder"},
				]);
				%render this.renderSelect(item_style, "text-align", "", [
					{"label": "left", "value": "left"},
					{"label": "center", "value": "center"},
					{"label": "right", "value": "right"},
					{"label": "justify", "value": "justify"},
				]);
				%render this.renderSelect(item_style, "text-transform", "", [
					{"label": "capitalize", "value": "capitalize"},
					{"label": "lowercase", "value": "lowercase"},
					{"label": "uppercase", "value": "uppercase"},
					{"label": "inherit", "value": "inherit"},
					{"label": "none", "value": "none"},
				]);
				%render this.renderInput(item_style, "line-height", "");
			</div>
		</div>
		<div class="widget_css__content">
			<div class="widget_css__label">Background</div>
			<div class="widget_css__items">
				%render this.renderInput(item_style, "background-color", "Color");
				%render this.renderInput(item_style, "background-image", "Image");
				%render this.renderInput(item_style, "background-position", "Position");
				%render this.renderSelect(item_style, "background-repeat", "Repeat", [
					{"label": "repeat", "value": "repeat"},
					{"label": "repeat-x", "value": "repeat-x"},
					{"label": "repeat-y", "value": "repeat-y"},
					{"label": "no-repeat", "value": "no-repeat"},
				]);
				%render this.renderSelect(item_style, "background-size", "Size", [
					{"label": "contain", "value": "contain"},
					{"label": "cover", "value": "cover"},
				]);
			</div>
		</div>
	</div>
</template>


<template name="renderCSS">
	<div class="widget_param__tabs_content"
		class={{ this.current_tab == "css" ? "selected" : "" }}
	>
		%set string selector_name = this.model.getCurrentSelector();
		<TextEditable class="overflow"
			value={{ this.model.getCSSContent(selector_name) }}
			@event:valueChange={{ void (var value) use (selector_name) {
				this.model.changeCSSContent(selector_name, value)
			} }}
		/>
	</div>
</template>


<template name="renderTabs">
	<div class="widget_param__tabs">
		%for (int i=0; i<this.tabs_items.count(); i++)
		{
			%set Dict tab = this.tabs_items.get(i);
			<div class="widget_param__tabs_item"
				class={{ tab.get("value") == this.current_tab ? "selected" : "" }}
				@event:click={{ void() use (tab){ this.current_tab = tab.get("value"); } }}
			>{{ tab.get("label") }}</div>
		}
	</div>
	%render this.renderParams();
	%render this.renderStyles();
	%render this.renderCSS();
</template>


<template>
	<div class="widget_param">
		%if (this.model.selected_item)
		{
			<!-- Render info -->
			%render this.renderComponentName();
			%render this.renderWidgetName();
			%render this.renderClassName();
			
			<!-- Render tabs -->
			%render this.renderTabs();
		}
	</div>
</template>


<script>

string current_tab = "params";
Collection<string> tabs_items = [
	{"label": "Params", "value": "params"},
	{"label": "Styles", "value": "styles"},
	{"label": "CSS", "value": "css"},
];


/**
 * Returns true if class name is allowed
 */
bool isAllowClassName(string class_name)
{
	if (class_name == "Runtime.Widget.Input") return true;
	if (class_name == "Runtime.Widget.Select") return true;
	if (class_name == "Runtime.Widget.SortableList") return true;
	if (class_name == "Runtime.Widget.Tag") return true;
	if (class_name == "Runtime.Widget.TextEditable") return true;
	return false;
}


/**
 * Returns css value
 */
string getCSSValue(WidgetItemStyle item_style, string key, string default_value = "")
{
	if (item_style == null) return default_value;
	if (not item_style.css_values.has(key)) return default_value;
	return item_style.css_values.get(key);
}


/**
 * Set css value
 */
void setCSSValue(WidgetItemStyle item_style, string key, string value = "")
{
	if (item_style)
	{
		item_style.setCSSValue(key, value);
	}
	else
	{
		string selector_name = this.model.getCurrentSelector();
		this.model.changeCSSContent(selector_name, key ~ ": " ~ value);
	}
}

</script>


</class>