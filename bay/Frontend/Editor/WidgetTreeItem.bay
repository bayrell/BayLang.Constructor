/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Editor;

use Runtime.Widget.Tree.TreeItem;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlItems;
use BayLang.OpCodes.OpHtmlSlot;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.OpCodes.OpString;
use BayLang.Constructor.Frontend.Editor.Helper;


class WidgetTreeItem extends TreeItem
{
	BaseOpCode op_code = null;
	
	
	/**
	 * Returns true if can insert inside
	 */
	bool canDragInside()
	{
		if (not this.op_code) return false;
		if (this.op_code.tag_name == "h1") return false;
		if (this.op_code.tag_name == "h2") return false;
		if (this.op_code.tag_name == "h3") return false;
		if (this.op_code.tag_name == "h4") return false;
		if (this.op_code.tag_name == "h5") return false;
		if (this.op_code.tag_name == "p") return false;
		if (this.op_code.tag_name == "span") return false;
		return true;
	}
	
	
	/**
	 * Update item
	 */
	void updateLabel()
	{
		if (this.op_code instanceof OpHtmlTag)
		{
			Collection<string> names = static::getAttrValues(this.op_code.attrs, "class");
			string key = names.get(0);
			this.key = key;
			this.label = this.op_code.tag_name ~ "." ~ key;
		}
		else if (this.op_code instanceof OpHtmlSlot)
		{
			this.key = this.op_code.name;
			this.label = "slot." ~ this.op_code.name;
		}
	}
	
	
	/**
	 * Add HTML Items
	 */
	void addHtmlItems(OpHtmlItems op_code_items)
	{
		if (op_code_items == null) return;
		if (op_code_items.items == null) return;
		for (int i=0; i<op_code_items.items.count(); i++)
		{
			this.addHtmlItem(op_code_items.items.get(i));
		}
	}
	
	
	/**
	 * Add HTML Item
	 */
	void addHtmlItem(BaseOpCode op_code)
	{
		if (
			op_code instanceof OpHtmlTag or
			op_code instanceof OpHtmlSlot
		)
		{
			WidgetTreeItem new_item = this.newInstance{ "op_code": op_code };
			this.addItem(new_item);
			new_item.updateLabel();
			new_item.addHtmlItems(op_code.items);
		}
	}
	
	
	/**
	 * Returns attr values
	 */
	static Collection<string> getAttrValues(
		Collection<OpHtmlAttribute> attrs,
		string name
	)
	{
		attrs = attrs.filter(
			bool (OpHtmlAttribute op_code_attr) use (name)
			{
				if (op_code_attr.key != name) return false;
				if (not rtl::is_instanceof(op_code_attr.value, classof OpString)) return false;
				return true;
			}
		);
		attrs = attrs.map(
			string (OpHtmlAttribute op_code_attr) => op_code_attr.value.value
		);
		return attrs;
	}
}