/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Editor;

use Runtime.BaseObject;
use Runtime.Entity.Factory;
use BayLang.Constructor.Frontend.Editor.Styles.Selector;
use BayLang.Constructor.Frontend.Editor.Parameters.Parameter;
use BayLang.Constructor.Frontend.Editor.Parameters.ParameterClassName;
use BayLang.Constructor.Frontend.Editor.Parameters.ParameterComponent;
use BayLang.Constructor.Frontend.Editor.Parameters.ParameterWidgetName;
use BayLang.Constructor.Frontend.Editor.CodeModel;
use BayLang.Constructor.Frontend.Editor.WidgetEditPageModel;
use BayLang.Constructor.Frontend.Editor.WidgetTreeItem;
use BayLang.Constructor.Frontend.Providers.EditorProvider;
use BayLang.Constructor.WidgetPage.Annotations.WidgetSettingsInterface;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlContent;
use BayLang.OpCodes.OpHtmlSlot;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.OpCodes.OpHtmlValue;
use BayLang.OpCodes.OpString;


class Widget extends BaseObject
{
	BaseOpCode code = null;
	BaseOpCode parent_code = null;
	BaseOpCode primary_model_code = null;
	Collection<BaseOpCode> model_codes = null;
	WidgetEditPageModel page_model = null;
	WidgetSettingsInterface component_settings = null;
	WidgetSettingsInterface model_settings = null;
	WidgetTreeItem item = null;
	string component_class_name = null;
	string model_class_name = null;
	
	/* Params */
	Collection<Parameter> params = [];
	Parameter param_class_name = null;
	Parameter param_widget_name = null;
	
	/* HTML Element */
	bool is_initialized = false;
	bool is_component = false;
	bool is_raw = false;
	string html_content = "";
	
	
	/**
	 * Constructor
	 */
	public void constructor(WidgetEditPageModel page_model, BaseOpCode code)
	{
		parent();
		this.code = code;
		this.page_model = page_model;
		
		/* Create params */
		this.param_class_name = new ParameterClassName
		{
			"widget": this,
		};
		this.param_widget_name = new ParameterWidgetName
		{
			"widget": this,
		};
		this.param_class_name.param_widget_name = this.param_widget_name;
		this.param_widget_name.param_class_name = this.param_class_name;
		this.param_class_name.op_attr = null;
		this.param_class_name.value = [];
		this.param_widget_name.op_attr = null;
		this.param_widget_name.value = "";
		
		/* Clear HTML params */
		this.is_component = false;
		this.is_raw = false;
		this.html_content = "";
	}
	
	
	/**
	 * Returns widget name
	 */
	string getName() => this.param_widget_name.value;
	
	
	/**
	 * Returns CSS Content
	 */
	string getSelectorName() => "." ~ this.param_widget_name.value;
	
	
	/**
	 * Returns selector
	 */
	Selector getSelector()
	{
		string selector_name = this.getSelectorName();
		return this.page_model.styles.getSelector(selector_name);
	}
	
	
	/**
	 * Setup
	 */
	void setup()
	{
		if (this.is_initialized) return;
		
		/* Setup settings */
		this.setupSettings();
		
		/* Setup params */
		this.setupParams();
		
		/* Setup model */
		this.page_model.model_processor.setupWidget(this);
		
		/* Create class attribute */
		if (this.param_class_name.op_attr == null)
		{
			OpHtmlAttribute op_attr = new OpHtmlAttribute
			{
				"key": "class",
			};
			this.param_class_name.op_attr = op_attr;
			this.param_widget_name.op_attr = op_attr;
		}
		
		/* Set flag initialized */
		this.is_initialized = true;
	}
	
	
	/**
	 * Setup settings
	 */
	void setupSettings()
	{
		BaseOpCode op_code = this.code;
		if (not (op_code instanceof OpHtmlTag)) return;
		
		/* Setup widget name */
		string selected_tag_name = op_code.tag_name;
		if (not CodeModel::isComponent(selected_tag_name))
		{
			/* this.setupHtmlParams(); */
			return;
		}
		
		/* Set component */
		this.is_component = true;
		
		/* Find component settings */
		this.component_class_name = this.page_model.component_processor
			.getModuleClassName(selected_tag_name)
		;
		this.component_settings = this.page_model.getFrameEditor()
			.getWidget(this.component_class_name);
	}
	
	
	/**
	 * Setup params
	 */
	void setupParams()
	{
		/* Clear params */
		this.params = [];
		this.params.add(this.param_widget_name);
		this.params.add(this.param_class_name);
		
		/* if component settings is exists */
		if (not this.component_settings) return;
		
		/* Setup params */
		this.params.appendItems(
			this.component_settings.getParams().map(
				Parameter (Factory factory)
				{
					Parameter param = rtl::newInstance(factory.name, [factory.params]);
					param.widget = this;
					return param;
				}
			)
		);
		
		/* Check if code is html tag or slot */
		BaseOpCode op_code = this.code;
		if (
			not (op_code instanceof OpHtmlTag) and
			not (op_code instanceof OpHtmlSlot)
		)
		{
			return;
		}
		
		Collection<OpHtmlAttribute> attrs = this.code.attrs;
		if (not attrs) return;
		
		/* Setup paremeters values */
		for (int i=0; i<attrs.count(); i++)
		{
			OpHtmlAttribute op_attr = attrs.get(i);
			for (int j=0; j<this.params.count(); j++)
			{
				Parameter param = this.params.get(j);
				if (
					param instanceof ParameterComponent and
					param.isOpCode(op_attr)
				)
				{
					param.setOpCode(op_attr);
				}
			}
		}
	}
	
	
	/**
	 * Setup HTML Params
	 */
	bool setupHtmlParams()
	{
		this.is_component = false;
		this.is_raw = false;
		this.html_content = "";
		
		/* Get code */
		OpHtmlTag tree_item_code = this.item.code;
		BaseOpCode text_item = tree_item_code.items.items.get(0);
		
		/* Setup text */
		if (text_item instanceof OpHtmlContent)
		{
			this.html_content = text_item.value;
		}
		else if (text_item instanceof OpHtmlValue)
		{
			this.is_raw = text_item.kind == "raw";
			if (text_item.value instanceof OpString)
			{
				this.html_content = text_item.value.value;
			}
		}
	}
}