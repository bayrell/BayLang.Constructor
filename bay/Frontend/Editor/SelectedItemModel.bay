/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Editor;

use Runtime.lib;
use Runtime.Callback;
use Runtime.Web.BaseModel;
use BayLang.Constructor.Frontend.Annotations.Param;
use BayLang.Constructor.Frontend.Annotations.WidgetSettingsInterface;
use BayLang.Constructor.Frontend.Editor.CodeModel;
use BayLang.Constructor.Frontend.Editor.Parameter;
use BayLang.Constructor.Frontend.Editor.WidgetCSS;
use BayLang.Constructor.Frontend.Editor.WidgetTreeItem;
use BayLang.Constructor.Frontend.Providers.EditorProvider;
use BayLang.Exceptions.ParserUnknownError;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlContent;
use BayLang.OpCodes.OpHtmlSlot;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.OpCodes.OpHtmlValue;
use BayLang.OpCodes.OpString;


class SelectedItemModel extends BaseModel
{
	string component = classof WidgetCSS;
	string widget_name = "selected";
	
	/* Params */
	Collection<Parameter> params = [];
	Parameter param_class_name = new Parameter{ "name": "class_name", "selected": this };
	Parameter param_widget_name = new Parameter{ "name": "widget_name", "selected": this };
	
	/* Selected item */
	Collection<int> path = null;
	WidgetTreeItem item = null;
	
	/* HTML Element */
	bool is_component = false;
	bool is_raw = false;
	string html_content = "";
	
	
	/**
	 * Returns CSS Content
	 */
	string getCurrentSelector() => "." ~ this.param_widget_name.value;
	
	
	/**
	 * Select item
	 */
	void selectItem(Collection<int> path)
	{
		/* Get item */
		WidgetTreeItem item = this.parent_widget.tree.root.get(path);
		if (item == this.item) return;
		
		/* Set item */
		this.item = this.parent_widget.tree.root.get(path);
		this.path = path ? path.slice() : null;
		
		/* Clear params */
		this.attrs = [];
		this.params = [];
		this.param_class_name.op_attr = null;
		this.param_class_name.value = [];
		this.param_widget_name.op_attr = null;
		this.param_widget_name.value = "";
		this.params.add(this.param_widget_name);
		this.params.add(this.param_class_name);
		
		/* Clear HTML params */
		this.is_component = false;
		this.is_raw = false;
		this.html_content = "";
		
		if (not this.item) return;
		
		/* Setup params */
		this.setupParams();
		
		/* Setup attributes */
		this.setupAttrs();
		
		/* Create class attribute */
		if (this.param_class_name.op_attr == null)
		{
			OpHtmlAttribute op_attr = new OpHtmlAttribute
			{
				"key": "class",
			};
			this.param_class_name.op_attr = op_attr;
			this.param_widget_name.op_attr = op_attr;
		}
	}
	
	
	/**
	 * Setup attrs
	 */
	void setupAttrs()
	{
		BaseOpCode tree_item_op_code = this.item.op_code;
		if (
			not (tree_item_op_code instanceof OpHtmlTag) and
			not (tree_item_op_code instanceof OpHtmlSlot)
		)
		{
			return;
		}
		
		Collection<OpHtmlAttribute> attrs = this.item.op_code.attrs;
		if (not attrs) return;
		
		/* Setup paremeters values */
		for (int i=0; i<attrs.count(); i++)
		{
			OpHtmlAttribute op_attr = attrs.get(i);
			if (op_attr.key == "class")
			{
				this.setupClass(op_attr);
			}
			else
			{
				for (int j=0; j<this.params.count(); j++)
				{
					Parameter param = this.params.get(j);
					if (param.name == op_attr.key)
					{
						param.setHtmlAttribute(op_attr);
					}
				}
			}
		}
	}
	
	
	/**
	 * Setup class
	 */
	void setupClass(OpHtmlAttribute op_attr)
	{
		string param_class_name = op_attr.value.value;
		Collection<string> value = rs::split(" ", param_class_name);
		value = value.filter(bool (string s) => s != "");
		this.param_class_name.op_attr = op_attr;
		this.param_class_name.setValue(value);
		this.param_widget_name.op_attr = op_attr;
		this.param_widget_name.setValue(value);
	}
	
	
	/**
	 * Setup HTML Params
	 */
	bool setupHtmlParams()
	{
		this.is_component = false;
		this.is_raw = false;
		this.html_content = "";
		
		/* Get op_code */
		OpHtmlTag tree_item_op_code = this.item.op_code;
		BaseOpCode text_item = tree_item_op_code.items.items.get(0);
		
		/* Setup text */
		if (text_item instanceof OpHtmlContent)
		{
			this.html_content = text_item.value;
		}
		else if (text_item instanceof OpHtmlValue)
		{
			this.is_raw = text_item.kind == "raw";
			if (text_item.value instanceof OpString)
			{
				this.html_content = text_item.value.value;
			}
		}
	}
	
	
	/**
	 * Setup params
	 */
	void setupParams()
	{
		BaseOpCode item_op_code = this.item.op_code;
		if (not (item_op_code instanceof OpHtmlTag)) return;
		
		/* Setup widget name */
		string selected_tag_name = item_op_code.tag_name;
		if (not CodeModel::isComponent(selected_tag_name))
		{
			/* this.setupHtmlParams(); */
			return;
		}
		
		/* Set component */
		this.is_component = true;
		
		/* Get EditorProvider */
		EditorProvider editor = @.provider(classof EditorProvider);
		
		/* Find component settings */
		string component_class_name = this.parent_widget.code.getModuleClassName(selected_tag_name);
		WidgetSettingsInterface component_settings = editor.findSettings(component_class_name);
		if (not component_settings) return;
		
		/* Setup settings */
		this.component_class_name = component_class_name;
		this.component_settings = component_settings;
		
		/* Setup params */
		this.params.appendItems(
			component_settings.getParams().map(
				Parameter (Param param) => new Parameter{
					"name": param.name,
					"value": param.default,
					"param": param,
					"selected": this,
				}
			)
		);
	}
	
	
	/**
	 * Change param
	 */
	void changeParameterValue(Parameter param, var value)
	{
		/* Change widget name value */
		if (param.name == "widget_name")
		{
			Collection arr = this.param_class_name.value.insertIm(0, value);
			this.param_class_name.setValue(arr);
			this.param_widget_name.setValue(arr);
		}
		
		/* Change class name value */
		else if (param.name == "class_name")
		{
			Collection arr = [ this.param_widget_name.value ];
			arr.appendItems(value);
			this.param_class_name.setValue(arr);
			this.param_widget_name.setValue(arr);
		}
		
		/* Change attr value */
		else
		{
			param.setValue(value);
		}
		
		/* Update label */
		if (param.name == "widget_name")
		{
			this.item.updateLabel();
		}
		
		/* Update render */
		this.parent_widget.updateFrameRender();
	}
}