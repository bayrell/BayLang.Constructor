/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Editor;

use Runtime.lib;
use Runtime.Callback;
use Runtime.Web.BaseModel;
use BayLang.SaveOpCode;
use BayLang.LangBay.ParserBay;
use BayLang.LangES6.TranslatorES6;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpCollection;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpDict;
use BayLang.OpCodes.OpDictPair;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlItems;
use BayLang.OpCodes.OpHtmlSlot;
use BayLang.OpCodes.OpHtmlStyle;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.OpCodes.OpModule;
use BayLang.OpCodes.OpNamespace;
use BayLang.OpCodes.OpString;
use BayLang.OpCodes.OpUse;


class CodeModel extends BaseModel
{
	OpModule component = null;
	OpModule model = null;
	string component_namespace = "";
	string component_class_name = "";
	string component_content = "";
	string model_content = "";
	string widget_name = "op_code";
	int widget_inc = 1;
	
	
	/**
	 * Is component
	 */
	pure bool isComponent(string tag_name)
	{
		string ch1 = rs::substr(tag_name, 0, 1);
		string ch2 = rs::upper(ch1);
		return ch1 == ch2;
	}
	
	
	/**
	 * Setup op code
	 */
	void setupOpCode(Dict params)
	{
		this.component = params.get("component");
		this.component_content = params.get("component_content");
		this.model_content = params.get("model_content");
		
		/* Setup component class name */
		this.component_namespace = "";
		this.component_class_name = "";
		for (int i=0; i<this.component.items.count(); i++)
		{
			BaseOpCode item = this.component.items.get(i);
			if (item instanceof OpNamespace) this.component_namespace = item.name;
			if (item instanceof OpDeclareClass) this.component_class_name = item.name;
		}
		
		/* Process op_code attrs */
		OpDeclareFunction op_code_render = this.getComponentRender("render");
		if (op_code_render)
		{
			BaseOpCode op_code_expression = op_code_render.getExpression();
			this.processHtmlItems(op_code_expression);
		}
	}
	
	
	/**
	 * Returns full class name
	 */
	string getComponentFullClassName() => this.component_namespace != ""
		? this.component_namespace ~ "." ~ this.component_class_name
		: this.component_class_name
	;
	
	
	/**
	 * Returns module class name
	 */
	string getModuleClassName(string widget_name)
	{
		OpModule component_op_code = this.component;
		if (not static::isComponent(widget_name)) return null;
		if (not component_op_code) return null;
		if (not component_op_code.uses.has(widget_name)) return null;
		return component_op_code.uses.get(widget_name);
	}
	
	
	/**
	 * Returns components
	 */
	Collection<string> getComponents() => this.component.uses.values();
	
	
	/**
	 * Get component render expression
	 */
	OpDeclareFunction getComponentRender(string render_name = "render")
	{
		if (not this.component) return null;
		
		OpDeclareClass op_code_class = this.component.findClass();
		if (not op_code_class) return null;
		
		OpDeclareFunction op_code_render = op_code_class.findFunction(render_name);
		return op_code_render;
	}
	
	
	/**
	 * Build render function
	 */
	string buildComponentRender(string render_name = "render")
	{
		OpDeclareFunction op_code_render = this.getComponentRender(render_name);
		if (not op_code_render) return;
		
		/* Create translator */
		TranslatorES6 t = this.createTranslator();
		Collection<SaveOpCode> save_op_codes = t.save_op_codes;
		
		/* Translate expression */
		list res = t.expression::OpDeclareFunction(t, op_code_render, false);
		t = res.get(0);
		
		/* Output save op code */
		string content = "";
		string save = t::outputSaveOpCode(t, save_op_codes.count());
		if (save != "") content ~= save;
		content ~= res.get(1);
		content = t.program::removeContext(content);
		content = rs::trim(content);
		
		return content;
	}
	
	
	/**
	 * Add module
	 */
	string addModule(string widget_name, bool is_component = true, string alias_name = "")
	{
		OpModule component_op_code = this.component;
		if (alias_name == "")
		{
			string widget_name_arr = rs::split(".", widget_name);
			alias_name = widget_name_arr.last();
		}
		if (not component_op_code.hasModule(alias_name))
		{
			component_op_code.addModule(widget_name, is_component, alias_name);
			this.parent_widget.updateFrameGlobalCSS();
		}
		else if (component_op_code.uses.get(alias_name) != widget_name)
		{
			alias_name = widget_name;
		}
		return alias_name;
	}
	
	
	/**
	 * Generate widget name
	 */
	string generateWidgetName(string widget_name, string item)
	{
		if (rs::substr(item, 0, 2) != "[&") return widget_name;
		if (rs::substr(item, -1) != "]") return widget_name;
		item = rs::substr(item, 2, -1);
		return widget_name ~ item;
	}
	
	
	/**
	 * Add op_code tag attrs
	 */
	void processHtmlTag(OpHtmlTag op_code, string widget_name)
	{
		string css_name = null;
		
		/* Generate css name */
		fn generateCssName = string () use (css_name)
		{
			if (css_name == null)
			{
				css_name = "widget_" ~ this.widget_inc;
				this.widget_inc = this.widget_inc + 1;
			}
			return css_name;
		};
		
		/* Generate widget name */
		fn generateWidgetName = string(string item) use (widget_name)
		{
			widget_name = this.generateWidgetName(widget_name, item);
			return widget_name;
		}
		
		/* Add render key */
		OpHtmlAttribute key_attr = op_code.attrs.findItem(
			lib::equalAttr("key", "@key")
		);
		OpHtmlAttribute key_debug_attr = op_code.attrs.findItem(
			lib::equalAttr("key", "@key_debug")
		);
		if (key_attr == null and key_debug_attr == null)
		{
			/* Add key debug */
			op_code.attrs.push(new OpHtmlAttribute{
				"key": "@key_debug",
				"value": new OpString{
					"value": generateCssName(),
				},
			});
		}
		
		/* Change widget name */
		OpHtmlAttribute class_name_attr = op_code.attrs.findItem(
			lib::equalAttr("key", "class")
		);
		if (class_name_attr and class_name_attr.value instanceof OpString)
		{
			string class_name = class_name_attr.value.value;
			Collection attrs = rs::split(" ", class_name);
			attrs = attrs.filter(lib::equalNot(""));
			attrs = attrs.map(
				string (string item) use (generateCssName, generateWidgetName)
				{
					if (item == "[widget_name]")
					{
						return generateCssName();
					}
					if (rs::substr(item, 0, 2) == "[&" and rs::substr(item, -1) == "]")
					{
						return generateWidgetName(item);
					}
					return item;
				}
			);
			class_name_attr.value.value = rs::join(" ", attrs);
		}
		
		/* Generate html items attrs */
		this.processHtmlItems(op_code.items, widget_name);
	}
	
	
	/**
	 * Add op_code slot attrs
	 */
	void processHtmSlot(OpHtmlTag op_code, string widget_name)
	{
		this.processHtmlItems(op_code.items, widget_name);
	}
	
	
	/**
	 * Generate html items attrs
	 */
	void processHtmlItems(Collection items, string widget_name = "")
	{
		if (not items) return;
		if (items instanceof OpHtmlItems) items = items.items;
		for (int i=0; i<items.count(); i++)
		{
			BaseOpCode item = items.get(i);
			
			/* Add render key to item */
			if (rtl::is_instanceof(item, classof OpHtmlTag))
			{
				this.processHtmlTag(item, widget_name);
			}
			else if (rtl::is_instanceof(item, classof OpHtmlSlot))
			{
				this.processHtmSlot(item, widget_name);
			}
		}
	}
	
	
	/**
	 * Create parser
	 */
	ParserBay createParser()
	{
		/* Setup parser params */
		Collection<string> current_class_name = rs::split(".", this.component_class_name);
		Dict params = {
			"current_namespace_name": rs::join(".", current_class_name.slice(0, -1))
			"current_class_name": current_class_name.last(),
			"uses": this.component.uses
		};
		
		/* Create new instance */
		ParserBay parser = new ParserBay();
		parser = parser::reset(parser);
		if (params.has("current_namespace_name"))
			parser <= current_namespace_name <= params.get("current_namespace_name");
		if (params.has("current_class_name"))
			parser <= current_class_name <= params.get("current_class_name");
		if (params.has("uses"))
			parser <= uses <= params.get("uses");
		
		return parser;
	}
	
	
	/**
	 * Create translator
	 */
	TranslatorES6 createTranslator()
	{
		/* New instance */
		TranslatorES6 t = new TranslatorES6();
		
		/* Reset translator */
		TranslatorES6 t = TranslatorES6::reset(t);
		if (this.component.uses != null)
		{
			t <= modules <= this.component.uses;
		}
		
		/* Enable debug */
		t = t.setFlag("DEBUG_COMPONENT", true);
		
		/* Return */
		return t;
	}
	
	
	/**
	 * Add default template
	 */
	void addDefaultTemplate(OpHtmlTag op_code, OpModule default_template)
	{
		/* Add uses */
		Collection modules = default_template.uses.keys();
		for (int i=0; i<default_template.items.count(); i++)
		{
			BaseOpCode item = default_template.items.get(i);
			if (item instanceof OpUse)
			{
				this.addModule(item.name, item.is_component, item.alias);
			}
		}
		
		OpDeclareClass op_code_class = default_template.findClass();
		if (not op_code_class) return null;
		
		OpDeclareFunction op_code_render = op_code_class.findFunction("render");
		if (not op_code_render) return null;
		if (not op_code_render.expression) return null;
		if (not (op_code_render.expression instanceof OpHtmlItems)) return null;
		
		/* Add items */
		op_code.items = op_code_render.expression;
	}
	
	
	/**
	 * Returns widget label
	 */
	pure string getTagWidgetInfo(OpHtmlTag op_code)
	{
		OpHtmlAttribute class_name_attr = op_code.attrs.findItem(
			lib::equalAttr("key", "class")
		);
		if (not class_name_attr)
		{
			return
			{
				"label": op_code.tag_name,
				"tag_name": op_code.tag_name,
				"class_name": "",
				"widget_name": "",
			};
		};
		
		string class_name = class_name_attr.value.value;
		Collection attrs = rs::split(" ", class_name);
		attrs = attrs.filter(lib::equalNot(""));
		return
		{
			"label": op_code.tag_name ~ "." ~ attrs.first(),
			"tag_name": op_code.tag_name,
			"class_name": class_name,
			"widget_name": attrs.first(),
		};
	}
	
	
	/**
	 * Create widget
	 */
	OpHtmlTag createWidget(string class_name, string widget_name)
	{
		/* Add module */
		string alias_name = this.addModule(class_name);
		
		/* Create op_code */
		string css_name = "widget_" ~ this.widget_inc;
		this.widget_inc = this.widget_inc + 1;
		OpHtmlTag op_code = new OpHtmlTag
		{
			"attrs":
			[
				new OpHtmlAttribute
				{
					"key": "class",
					"value": new OpString
					{
						"value": widget_name,
					},
				},
				new OpHtmlAttribute
				{
					"key": "@key_debug",
					"value": new OpString
					{
						"value": css_name,
					},
				}
			],
			"items": new OpHtmlItems(),
			"tag_name": alias_name,
		};
		
		/* Default template */
		var content_window = this.parent_widget.getFrameWindow();
		Callback f = new content_window.Runtime.Callback(class_name, "getDefaultTemplate");
		if (not f.exists()) return op_code;
		
		/* Get default template */
		Dict templates = f.apply();
		fn template_factory = templates.get("default");
		
		/* Get template content */
		Dict template_info = template_factory();
		string template_content = "<class>" ~ template_info.get("template") ~ "</class>";
		
		/* Parse default template */
		OpModule default_template = null;
		ParserBay parser = this.parent_widget.createParser();
		try
		{
			list res = parser::parse(parser, template_content);
			parser = res.get(0);
			default_template = res.get(1);
		}
		catch (var e)
		{
		}
		
		/* If default template is correct */
		if (default_template != null)
		{
			/* Add default template */
			this.addDefaultTemplate(op_code, default_template);
			
			/* Add default CSS */
			OpDeclareClass op_code_class = default_template.findClass();
			if (op_code_class)
			{
				OpHtmlStyle op_code_style = op_code_class.items.findItem(
					lib::isInstance(classof OpHtmlStyle)
				);
				if (op_code_style)
				{
					this.parent_widget.item.setCSSValue("." ~ widget_name, op_code_style.content);
				}
			}
		}
		
		/* Add op_code attrs */
		this.processHtmlTag(op_code, widget_name);
		
		return op_code;
	}
	
	
	/**
	 * Returns op code value
	 */
	pure BaseOpCode getOpCodeByValue(var value)
	{
		if (rtl::isString(value))
		{
			return new OpString
			{
				"value": value
			};
		}
		else if (value instanceof Dict)
		{
			Collection values = [];
			Collection keys = value.keys();
			for (int i=0; i<keys.count(); i++)
			{
				string key = keys.get(i);
				values.push
				(
					new OpDictPair
					{
						"key": key,
						"value": static::getOpCodeByValue(value.get(key))
					}
				);
			}
			return new OpDict
			{
				"values": values,
			};
		}
		else if (rtl::is_instanceof(value, classof Collection))
		{
			return new OpCollection
			{
				"values": value.map(BaseOpCode (var value) => static::getOpCodeByValue(value))
			};
		}
		
		return null;
	}
	
	
	/**
	 * Returns op code value
	 */
	pure var getValueFromOpCode(BaseOpCode op_attr)
	{
		if (op_attr instanceof OpString)
		{
			return op_attr.value;
		}
		else if (op_attr instanceof OpDict)
		{
			Dict result = {};
			for (int i=0; i<op_attr.values.count(); i++)
			{
				OpDictPair op_dict_item = op_attr.values.get(i);
				string key = op_dict_item.key;
				BaseOpCode item = op_dict_item.value;
				result.set(key, static::getOpCodeFromValue(item));
			}
			return result;
		}
		else if (op_attr instanceof OpCollection)
		{
			return op_attr.values.map(var (BaseOpCode value) => static::getOpCodeFromValue(value));
		}
		return null;
	}
}