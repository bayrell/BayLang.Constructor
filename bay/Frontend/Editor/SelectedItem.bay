<!--
 *  BayLang Constructor
-->

<class name="BayLang.Constructor.Frontend.Editor.SelectedItem">

<use name="Runtime.Callback" />
<use name="Runtime.Widget.Input" component="true" />
<use name="Runtime.Widget.Select" component="true" />
<use name="Runtime.Widget.Tag" component="true" />
<use name="Runtime.Widget.TextArea" component="true" />
<use name="Runtime.Widget.TextEditable" component="true" />
<use name="BayLang.Constructor.Frontend.Editor.Parameter" />
<use name="BayLang.Constructor.Frontend.Editor.StyleItem" />
<use name="BayLang.Constructor.Frontend.Editor.WidgetStyle" component="true" />
<use name="BayLang.Constructor.Frontend.Providers.EditorProvider" />


<style>
.widget_param{
	padding-bottom: 20px;
}
.widget_param__row{
	margin-bottom: 10px;
}
.widget_param__label{
	margin-bottom: 5px;
}
.widget_param__title{
	margin-bottom: 5px;
}
.widget_param__text{
	display: flex;
	gap: 10px;
}
.widget_param__text_label{
	overflow-wrap: anywhere;
}
.widget_param__text_button{
	cursor: pointer;
}
.widget_param__text_button:hover{
	text-decoration: underline;
}
.widget_param %(Select)widget_select{
	padding: 4px;
}
.widget_param %(Input)widget_input,
.widget_param %(TextArea)widget_textarea{
	padding: 7px;
}
.widget_param %(TextArea)widget_textarea{
	font-family: 'PT Mono';
	line-height: 1.5;
}
.widget_css__label{
	text-align: center;
	background-color: aliceblue;
	padding: 5px;
	margin-bottom: 5px;
}
.widget_css__row{
	display: flex;
	align-items: center;
	margin-bottom: 5px;
}
.widget_css__key{
	width: 100px;
}
.widget_css__value{
	width: calc(100% - 100px);
}
</style>


<template name="renderInput" args="
	StyleItem style_item, string key,
	string label, string default_value = ''"
>
	%set string value = this.getCSSValue(style_item, key, default_value);
	<div class="widget_css__row">
		<div class="widget_css__key">{{ label ? label : key }}</div>
		<div class="widget_css__value">
			<Input value={{ value }}
				@event:valueChange={{
					void (var message) use (style_item, key)
					{
						this.setCSSValue(style_item, key, message.value);
					}
				}}
			/>
		</div>
	</div>
</template>


<template name="renderSelect" args="
	StyleItem style_item, string key,
	string label, Collection options"
>
	%set string value = this.getCSSValue(style_item, key);
	<div class="widget_css__row">
		<div class="widget_css__key">{{ label ? label : key }}</div>
		<div class="widget_css__value">
			<Select
				value={{ value }}
				options={{ options }}
				@event:valueChange={{
					void (var message) use (style_item, key)
					{
						this.setCSSValue(style_item, key, message.value);
					}
				}}
			/>
		</div>
	</div>
</template>


<template name="renderComponentName">
	<div class="widget_param__row">
		<div class="widget_param__label">Component</div>
		<div class="widget_param__content">
			{{ this.model.selected.widget.code.tag_name }}
		</div>
	</div>
</template>


<template name="renderWidgetName">
	<div class="widget_param__row">
		<div class="widget_param__label">
			<div class="widget_param__text">
				<div class="widget_param__text_label">
					Name
				</div>
				<div class="widget_param__text_button"
					@event:click={{ void ()
					{
						this.model.renameSelectedItem();
					} }}
				>
					[Edit]
				</div>
			</div>
		</div>
		<div class="widget_param__content">
			{{ this.model.selected.widget.param_widget_name.value }}
		</div>
	</div>
</template>


<template name="renderClassName">
	<div class="widget_param__row">
		<div class="widget_param__label">Class</div>
		<div class="widget_param__content">
			<Tag value={{ this.model.selected.widget.param_class_name.value.slice() }}
				@event:valueChange={{ void (var message) {
					this.model.selected.changeParameterValue(
						this.model.selected.widget.param_class_name, message.value
					);
				} }}
			/>
		</div>
	</div>
</template>


<template name="renderParams">
	%for (int i=0; i<this.model.selected.widget.params.count(); i++)
	{
		%set Parameter param = this.model.selected.widget.params.get(i);
		%if (param.display)
		{
			%set Dict item_props = param.props;
			%set string class_name = param.component;
			<div class="widget_param__row">
				<div class="widget_param__label">{{ param.label }}</div>
				<div class="widget_param__content">
					%if (this.isAllowClassName(class_name))
					{
						<{class_name}
							value={{ param.value }}
							@event:valueChange={{ void (var message) use (param) {
								this.model.selected.changeParameterValue(param, message.value);
							} }}
							...item_props
						/>
					}
				</div>
			</div>
		}
	}
</template>


<template name="renderHtmlParams">
	<!--
	<div class="widget_param__row">
		<div class="widget_param__label">Is Raw HTML</div>
		<div class="widget_param__content">
			<Select
				name="is_raw_html"
				value={{ this.model.selected.widget.is_raw }}
				show_select_value={{ false }}
				options=[
					{ "value": "0", "label": "No" },
					{ "value": "1", "label": "Yes" },
				]
				@event:valueChange={{ void (var message) {
					this.model.selected.changeHtmlRaw(message.value)
				} }}
			/>
		</div>
	</div>
	-->
	<div class="widget_param__row">
		<div class="widget_param__label">Content</div>
		<div class="widget_param__content">
			<TextEditable
				name="content"
				value={{ this.model.selected.widget.html_content }}
				direct_update={{ true }}
				@event:valueChange={{ void (var message) {
					this.model.selected.changeHtmlContent(message.value)
				} }}
			/>
		</div>
	</div>
</template>


<template name="renderStyles">
	%set string selector_name = this.model.selected.widget.getSelector();
	%set StyleItem style_item = this.model.styles.items.get(selector_name);
	<div class="widget_css__content">
		<div class="widget_css__label">Common</div>
		<div class="widget_css__items">
			%render this.renderInput(style_item, "width", "");
			%render this.renderInput(style_item, "height", "");
			%render this.renderInput(style_item, "min-width", "");
			%render this.renderInput(style_item, "min-height", "");
		</div>
	</div>
	<div class="widget_css__content">
		<div class="widget_css__label">Padding</div>
		<div class="widget_css__items">
			%render this.renderInput(style_item, "padding-top", "");
			%render this.renderInput(style_item, "padding-bottom", "");
			%render this.renderInput(style_item, "padding-left", "");
			%render this.renderInput(style_item, "padding-right", "");
		</div>
	</div>
	<div class="widget_css__content">
		<div class="widget_css__label">Margin</div>
		<div class="widget_css__items">
			%render this.renderInput(style_item, "margin-top", "");
			%render this.renderInput(style_item, "margin-bottom", "");
			%render this.renderInput(style_item, "margin-left", "");
			%render this.renderInput(style_item, "margin-right", "");
		</div>
	</div>
	<div class="widget_css__content">
		<div class="widget_css__label">Font</div>
		<div class="widget_css__items">
			%render this.renderInput(style_item, "color", "");
			%render this.renderInput(style_item, "font-size", "");
			%render this.renderSelect(style_item, "font-weight", "", [
				{"key": "light", "value": "lighter"},
				{"key": "normal", "value": "normal"},
				{"key": "bold", "value": "bold"},
				{"key": "bolder", "value": "bolder"},
			]);
			%render this.renderSelect(style_item, "text-align", "", [
				{"key": "left", "value": "left"},
				{"key": "center", "value": "center"},
				{"key": "right", "value": "right"},
				{"key": "justify", "value": "justify"},
			]);
			%render this.renderSelect(style_item, "text-transform", "", [
				{"key": "capitalize", "value": "capitalize"},
				{"key": "lowercase", "value": "lowercase"},
				{"key": "uppercase", "value": "uppercase"},
				{"key": "inherit", "value": "inherit"},
				{"key": "none", "value": "none"},
			]);
			%render this.renderInput(style_item, "line-height", "");
		</div>
	</div>
	<div class="widget_css__content">
		<div class="widget_css__label">Border</div>
		<div class="widget_css__items">
			%render this.renderInput(style_item, "border-color", "");
			%render this.renderSelect(style_item, "border-style", "", [
				{"key": "dashed", "value": "dashed"},
				{"key": "dotted", "value": "dotted"},
				{"key": "double", "value": "double"},
				{"key": "hidden", "value": "hidden"},
				{"key": "inset", "value": "inset"},
				{"key": "none", "value": "none"},
				{"key": "outset", "value": "outset"},
				{"key": "solid", "value": "solid"},
				{"key": "inherit", "value": "inherit"},
				{"key": "unset", "value": "unset"},
			]);
			%render this.renderInput(style_item, "border-width", "");
			%render this.renderInput(style_item, "border-radius", "");
		</div>
	</div>
	<div class="widget_css__content">
		<div class="widget_css__label">Background</div>
		<div class="widget_css__items">
			%render this.renderInput(style_item, "background-color", "Color");
			%render this.renderInput(style_item, "background-image", "Image");
			%render this.renderInput(style_item, "background-position", "Position");
			%render this.renderSelect(style_item, "background-repeat", "Repeat", [
				{"key": "repeat", "value": "repeat"},
				{"key": "repeat-x", "value": "repeat-x"},
				{"key": "repeat-y", "value": "repeat-y"},
				{"key": "no-repeat", "value": "no-repeat"},
			]);
			%render this.renderSelect(style_item, "background-size", "Size", [
				{"key": "contain", "value": "contain"},
				{"key": "cover", "value": "cover"},
			]);
		</div>
	</div>
	<div class="widget_css__content">
		<div class="widget_css__label">CSS</div>
		<div class="widget_css__items">
			%render this.renderCSS();
		</div>
	</div>
</template>


<template name="renderCSS">
	%set string selector_name = this.model.selected.widget.getSelector();
	<TextEditable class="overflow"
		value={{ this.model.styles.getCSSValue(selector_name) }}
		@event:valueChange={{ void (var message) use (selector_name) {
			this.model.styles.changeCSSValue(selector_name, message.value)
		} }}
	/>
</template>


<template>
	<div class="widget_param">
		%if (this.model.selected.widget and this.model.selected.widget.is_component)
		{
			<!-- Render info -->
			%render this.renderComponentName();
			%render this.renderWidgetName();
			%render this.renderClassName();
			
			<!-- Render css -->
			%if (this.type == "css")
			{
				%render this.renderStyles();
			}
			
			<!-- Render params -->
			%if (this.type == "params")
			{
				%render this.renderParams();
			}
		}
	</div>
</template>


<script>

props string type = "params";
string current_tab = "params";
Collection<string> tabs_items = [
	{"key": "Params", "value": "params"},
	{"key": "Styles", "value": "styles"},
	{"key": "CSS", "value": "css"},
];


/**
 * Returns true if class name is allowed
 */
bool isAllowClassName(string class_name)
{
	EditorProvider editor = @.provider(classof EditorProvider);
	return editor.allowParamClassName(class_name);
}


/**
 * Returns css value
 */
string getCSSValue(StyleItem style_item, string key, string default_value = "")
{
	if (style_item == null) return default_value;
	if (not style_item.css_values.has(key)) return default_value;
	return style_item.css_values.get(key);
}


/**
 * Set css value
 */
void setCSSValue(StyleItem style_item, string key, string value = "")
{
	if (style_item)
	{
		style_item.changeCSSValue(key, value);
	}
	else
	{
		string selector_name = this.model.selected.widget.getSelector();
		this.model.styles.changeCSSValue(selector_name, key ~ ": " ~ value);
	}
}

</script>


</class>