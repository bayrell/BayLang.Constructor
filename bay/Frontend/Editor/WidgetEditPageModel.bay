/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Editor;

use Runtime.lib;
use Runtime.Callback;
use Runtime.Context;
use Runtime.Reference;
use Runtime.Serializer;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseModel;
use Runtime.Web.BasePageModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderProvider;
use Runtime.Web.Annotations.Widget;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.ContextMenu.ContextMenuModel;
use Runtime.Widget.Dialog.ConfirmDialogModel;
use Runtime.Widget.Dialog.DialogMessage;
use Runtime.Widget.Dialog.PromptDialogModel;
use Runtime.Widget.Tree.TreeItem;
use Runtime.Widget.Tree.TreeMessage;
use Runtime.Widget.Tree.TreeModel;
use BayLang.LangBay.TranslatorBay;
use BayLang.Constructor.Frontend.Editor.AddItemDialogModel;
use BayLang.Constructor.Frontend.Editor.CodeModel;
use BayLang.Constructor.Frontend.Editor.SelectedItemModel;
use BayLang.Constructor.Frontend.Editor.StylesModel;
use BayLang.Constructor.Frontend.Editor.WidgetEditPage;
use BayLang.Constructor.Frontend.Editor.WidgetTreeItem;
use BayLang.Constructor.WidgetDebug.WidgetPageModel;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpHtmlItems;
use BayLang.OpCodes.OpHtmlStyle;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.SaveOpCode;


class WidgetEditPageModel extends BasePageModel
{
	static const string STATUS_LOADING = 0;
	static const string STATUS_LOADED = 1;
	static const string STATUS_CHANGED = 2;
	static const string STATUS_SAVE_PROCESS = 3;
	static const string STATUS_SAVE_SUCCESS = 4;
	static const string STATUS_SAVE_ERROR = 5;
	
	/* Variables */
	string component = classof WidgetEditPage;
	string current_widget = "";
	string model_content = "";
	string component_class_name = "";
	string component_content = "";
	string menu_selected = "css";
	string iframe_current_size = "";
	int app_status = static::STATUS_LOADING;
	int breadcrumbs_selected = -1;
	var iframe = null;
	TreeModel tree = null;
	CodeModel op_code = null;
	SelectedItemModel selected = null;
	StylesModel styles = null;
	ContextMenuModel context_menu = null;
	AddItemDialogModel add_item_dialog = null;
	AddItemDialogModel remove_item_dialog = null;
	PromptDialogModel rename_item_dialog = null;
	
	
	/**
	 * Returns iframe window
	 */
	BaseModel getFrameWindow()
	{
		if (not this.isLoaded()) return null;
		if (not this.iframe) return null;
		if (not this.iframe.contentWindow) return null;
		return this.iframe.contentWindow;
	}
	
	
	/**
	 * Returns iframe layout
	 */
	BaseModel getFrameLayout()
	{
		if (not this.isLoaded()) return null;
		if (not this.iframe) return null;
		if (not this.iframe.contentWindow) return null;
		if (not this.iframe.contentWindow.app_layout) return null;
		return this.iframe.contentWindow.app_layout;
	}
	
	
	/**
	 * Returns page model
	 */
	BaseModel getFramePageModel()
	{
		var app_layout = this.getFrameLayout();
		if (not app_layout) return null;
		return app_layout.getPageModel();
	}
	
	
	/**
	 * Returns widget frame page
	 */
	string getFramePageUrl() =>
		"/iframe/open/widget?widget_name=" ~ this.current_widget
	;
	
	
	/**
	 * Returns frame widgets
	 */
	Collection<Widget> getFrameWidgets()
	{
		if (not this.isLoaded()) return null;
		if (not this.iframe) return null;
		if (not this.iframe.contentWindow) return null;
		Context context = this.iframe.contentWindow.Runtime.rtl.getContext();
		return context.getEntities(classof Widget);
	}
	
	
	/**
	 * Init widget settings
	 */
	void init(Dict params)
	{
		parent(params);
		
		this.layout.setLayoutName("default");
		this.current_widget = this.layout.route.matches.get("widget_name");
		
		/* Create widgets */
		this.code = this.addWidget(classof CodeModel);
		this.selected = this.addWidget(classof SelectedItemModel);
		this.styles = this.addWidget(classof StylesModel);
		
		/* Create Tree */
		this.tree = this.addWidget(classof TreeModel);
		this.tree.addListener("canDrag", new Callback(this, "onCanTreeDrop"));
		this.tree.addListener("dragElement", new Callback(this, "onTreeDragElement"));
		this.tree.addListener("selectItem", new Callback(this, "onTreeSelectItem"));
		this.tree.addListener("contextMenuClick", new Callback(this, "onTreeContextMenuClick"));
		
		/* Add item dialog model */
		this.add_item_dialog = this.addWidget(classof AddItemDialogModel, {
			"widget_name": "add_item_dialog",
		});
		
		/* Remove item dialog model */
		this.remove_item_dialog = this.addWidget(classof ConfirmDialogModel, {
			"widget_name": "remove_item_dialog",
		});
		
		/* Rename item dialog model */
		this.rename_item_dialog = this.addWidget(classof PromptDialogModel, {
			"widget_name": "rename_item_dialog",
			"confirm_button": "Rename",
			"title": "Rename name",
			"events": {
				"confirm": new Callback(this, "onRename")
			},
		});
		
		/* Remove button */
		ButtonModel confirm_button = this.remove_item_dialog.buttons.getWidget("confirm_button");
		confirm_button.content = "Remove";
		confirm_button.clearListener("click");
		confirm_button.addListener("click", new Callback(this, "onRemoveItemConfirm"));
		confirm_button.styles.add("danger");
		confirm_button.styles.removeItem("primary");
		
		/* Create ContextMenu */
		this.context_menu = this.addWidget(classof ContextMenuModel);
		this.context_menu.addItem({
			"label": "Append item",
			"key": "append"
		});
		this.context_menu.addItem({
			"label": "Insert item",
			"key": "insert"
		});
		this.context_menu.addItem({
			"label": "Rename item",
			"key": "rename"
		});
		this.context_menu.addItem({
			"label": "Duplicate item",
			"key": "duplicate"
		});
		this.context_menu.addItem({
			"label": "Remove item",
			"key": "remove"
		});
		this.context_menu.addListener("clickItem", new Callback(this, "onContextClickItem"));
		this.tree.setContextMenu(this.context_menu);
	}
	
	
	/**
	 * Build title
	 */
	void buildTitle(RenderContainer container)
	{
		this.layout.setPageTitle(this.current_widget);
	}
	
	
	/**
	 * Load widget
	 */
	async void loadWidget()
	{
		ApiResult res = await this.layout.callApi({
			"api_name": "admin.constructor.widget",
			"method_name": "getOpCode",
			"data": {
				"current_widget": this.current_widget,
			}
		});
		
		if (res.isSuccess())
		{
			/* Setup op code */
			this.code.setupOpCode({
				"component": res.data.get("component_op_code"),
				"component_content": res.data.get("component_content"),
				"model_content": res.data.get("model_content"),
			});
			
			/* Setup CSS styles */
			this.styles.setupStyles(this.code.component);
			
			/* Load Tree items */
			this.loadTreeItems();
			
			/* Load iframe page */
			this.iframe.src = this.getFramePageUrl();
		}
	}
	
	
	/**
	 * Save widget
	 */
	async void saveWidget()
	{
		return;
		/*if (not this.isLoaded()) return;*/
		if (not this.code.component) return;
		
		OpDeclareClass op_code_class = this.code.component.findClass();
		if (not op_code_class) return;
		
		/* Update widget html styles op_code */
		for (int i=0; i<op_code_class.items.count(); i++)
		{
			BaseOpCode op_code = op_code_class.items.get(i);
			if (op_code instanceof OpHtmlStyle)
			{
				this.selected.updateHtmlStyle(op_code);
			}
		}
		
		/* Translate widget */
		TranslatorBay translator = new TranslatorBay();
		list res = translator::translate(translator, this.code.component);
		string content = res.get(1);
		
		/* Save content */
		this.app_status = static::STATUS_SAVE_PROCESS;
		ApiResult res = await this.layout.callApi({
			"api_name": "admin.constructor.widget",
			"method_name": "save",
			"data": {
				"current_widget": this.current_widget,
				"content": content,
			}
		});
		
		/* Set result */
		if (res.isSuccess())
		{
			this.app_status = static::STATUS_SAVE_SUCCESS;
		}
		
		/* Set error */
		else
		{
			this.app_status = static::STATUS_SAVE_ERROR;
		}
	}
	
	
	/**
	 * Iframe loaded
	 */
	void onAppLoaded()
	{
		this.app_status = static::STATUS_LOADED;
	}
	
	
	/**
	 * App is changed
	 */
	void onAppChanged()
	{
		this.app_status = static::STATUS_CHANGED;
	}
	
	
	/**
	 * Returns true if app is loaded
	 */
	bool isLoaded() => this.app_status > 0;
	
	
	/**
	 * Context menu item click
	 */
	void onContextClickItem(Dict item)
	{
		string item_key = item.get("key");
		this.context_menu.hide();
		
		/* Add item */
		if (item_key == "append")
		{
			this.add_item_dialog.kind = "after";
			this.add_item_dialog.show(this.selected.selected_path);
		}
		
		/* Insert item */
		if (item_key == "insert")
		{
			this.add_item_dialog.kind = "last";
			this.add_item_dialog.show(this.selected.selected_path);
		}
		
		/* Rename item */
		if (item_key == "rename")
		{
			this.renameSelectedItem();
		}
		
		/* Duplicate item */
		if (item_key == "duplicate")
		{
			this.duplicateWidget();
		}
		
		/* Remove item */
		if (item_key == "remove")
		{
			this.remove_item_dialog.title = "Remove item";
			this.remove_item_dialog.content = "Do you want to remove this item?";
			this.remove_item_dialog.show();
		}
	}
	
	
	/**
	 * On remove item
	 */
	void onRemoveItemConfirm()
	{
		this.removeWidget(this.selected.selected_path);
		this.remove_item_dialog.hide();
	}
	
	
	/**
	 * Get styles op_code
	 */
	Collection<OpHtmlStyle> getStyleOpCode()
	{
		if (not this.code.component) return null;
		
		OpDeclareClass op_code_class = this.code.component.findClass();
		if (not op_code_class) return null;
		
		return op_code_class.items.filter(lib::isInstance(classof OpHtmlStyle));
	}
	
	
	/**
	 * Select Frame size
	 */
	void selectIFrameSize(Dict size)
	{
		if (not this.isLoaded()) return;
		
		/* Select item */
		this.iframe_current_size = size.get("label");
		
		/* Set iframe width */
		int width = size.get("width");
		if (width > 1000)
		{
			this.iframe.style.width = "";
			this.iframe_current_size = "";
		}
		else
		{
			this.iframe.style.width = width ~ "px";
		}
		
		/* Update selected box */
		this.getFramePageModel().updateSelectedBox();
	}
	
	
	/**
	 * Update render
	 */
	void updateFrameRender(string render_name = "render")
	{
		/* Set app is changed */
		this.onAppChanged();
		
		/* Build render */
		this.getFramePageModel().buildRender("render");
	}
	
	
	/**
	 * Update global css
	 */
	void updateFrameGlobalCSS()
	{
		/* Set app is changed */
		this.onAppChanged();
		
		/* Build global css */
		this.getFramePageModel().buildGlobalCSS();
	}
	
	
	/**
	 * Update css
	 */
	void updateFrameCSS()
	{
		/* Set app is changed */
		this.onAppChanged();
		
		/* Build CSS */
		this.getFramePageModel().buildCSS();
	}
	
	
	/**
	 * Load Tree items
	 */
	void loadTreeItems()
	{
		OpDeclareFunction op_code_render = this.code.getComponentRender("render");
		if (not op_code_render) return;
		
		BaseOpCode op_code_expression = op_code_render.getExpression();
		if (not op_code_expression) return;
		if (not (op_code_expression instanceof OpHtmlItems)) return;
		if (not op_code_expression.items.get(0)) return;
		
		BaseOpCode op_code = op_code_expression.items.get(0);
		if (not (op_code.items instanceof OpHtmlItems)) return;
		
		this.tree.root = new WidgetTreeItem();
		this.tree.root.op_code = op_code;
		this.tree.root.addHtmlItems(op_code.items);
	}
	
	
	/**
	 * Select item
	 */
	void onTreeSelectItem(TreeMessage message)
	{
		if (not this.isLoaded()) return null;
		if (message.item == this.selected.item) return;
		this.selectItem(message.path);
	}
	
	
	/**
	 * Select item
	 */
	void selectItem(Collection<int> path)
	{
		this.breadcrumbs_selected = -1;
		this.context_menu.hide();
		
		/* Select item */
		this.selected.selectItem(path);
		
		/* Select item in frame */
		this.getFramePageModel().selectItem(path);
		
		/* Select tree */
		this.tree.selectItem(path);
	}
	
	
	/**
	 * Breadcrumbs
	 */
	void selectBreadcrumbs(int pos)
	{
		if (this.breadcrumbs_selected != pos)
		{
			this.breadcrumbs_selected = pos;
		}
		else
		{
			this.breadcrumbs_selected = -1;
		}
	}
	
	
	/**
	 * Context menu click
	 */
	void onEditorContextMenuClick(var e)
	{
		var rect = this.iframe.getBoundingClientRect();
		int x = e.clientX + rect.x;
		int y = e.clientY + rect.y;
		this.context_menu.show(x, y);
	}
	
	
	/**
	 * Context menu click
	 */
	void onTreeContextMenuClick(var e)
	{
		int x = e.clientX;
		int y = e.clientY;
		this.context_menu.show(x, y);
	}
	
	
	/**
	 * Can Tree drop
	 */
	void onCanTreeDrop(TreeMessage message)
	{
		/*if (message.dest.count() < 2 and (message.kind == "before" or message.kind == "after"))
		{
			message.result.setValue(false);
		}*/
	}
	
	
	/**
	 * Rename item
	 */
	void renameSelectedItem()
	{
		this.rename_item_dialog.old_value = this.selected.param_widget_name.value;
		this.rename_item_dialog.setTitle("Rename " ~ this.rename_item_dialog.old_value);
		this.rename_item_dialog.setValue(this.rename_item_dialog.old_value);
		this.rename_item_dialog.show();
	}
	
	
	/**
	 * On rename item
	 */
	void onRename(DialogMessage message)
	{
		string new_widget_name = message.value;
		if (this.rename_item_dialog.old_value == new_widget_name) return;
		
		string new_selector_name = new_widget_name;
		if (rs::charAt(new_selector_name, 0) != ".") new_selector_name = "." ~ new_selector_name;
		
		/* Rename widget */
		this.selected.changeParameterValue(this.selected.param_widget_name, new_widget_name);
		
		/* Create new style */
		if (not this.styles.items.has(new_selector_name))
		{
			string css_content = this.styles.getCSSValue("." ~ this.rename_item_dialog.old_value)
			this.styles.changeCSSValue(new_selector_name, css_content);
		}
	}
	
	
	/**
	 * Add widget op_code
	 */
	void addOpCode(OpHtmlTag op_code, Collection<int> path, string kind)
	{
		Collection<int> parent_path = path ? path.slice(0, -1) : [];
		WidgetTreeItem parent_item = this.tree.root.get(parent_path);
		WidgetTreeItem dest_item = path ? this.tree.root.get(path) : null;
		Vector new_src_path = [];
		
		/* If dest item is null */
		if (dest_item == null)
		{
			if (kind == "first") kind = "before";
			if (kind == "last") kind = "after";
		}
		
		/* Add items */
		if (kind == "before" or kind == "after")
		{
			/* Add item */
			int pos = parent_item.op_code.items.items.addItem(
				op_code, dest_item ? dest_item.op_code : null, kind
			);
			
			/* Create src new path */
			new_src_path = parent_path.slice();
			new_src_path.push(pos);
			
			/* Recreate tree items */
			parent_item.items = [];
			parent_item.addHtmlItems(parent_item.op_code.items);
		}
		else
		{
			/* Add item */
			if (kind == "first") dest_item.op_code.items.items.insert(0, op_code);
			else if (kind == "last") dest_item.op_code.items.items.push(op_code);
			
			/* Recreate tree items */
			dest_item.items = [];
			dest_item.addHtmlItems(dest_item.op_code.items);
			
			/* Create src new path */
			int pos = dest_item.op_code.items.items.indexOf(op_code);
			new_src_path = path.slice();
			new_src_path.push(pos);
		}
		
		/* Select new item */
		this.selected.selectItem(new_src_path);
		
		/* Update frame render */
		this.updateFrameRender();
		
		/* Update CSS */
		this.updateFrameCSS();
		
		return new_src_path;
	}
	
	
	/**
	 * Duplicate selected widget
	 */
	void duplicateWidget()
	{
		if (not this.selected.selected_item) return;
		
		Collection<int> parent_path = this.selected.selected_path.slice(0, -1);
		WidgetTreeItem parent_item = this.tree.root.get(parent_path);
		WidgetTreeItem dest_item = this.selected.selected_item;
		
		/* Duplicate */
		OpHtmlTag op_code = Serializer::copy(this.selected.selected_item.op_code);
		
		/* Add items */
		parent_item.op_code.items.items.addItem(
			op_code, dest_item ? dest_item.op_code : null, "after"
		);
		parent_item.items = [];
		parent_item.addHtmlItems(parent_item.op_code.items);
		
		/* Update frame render */
		this.updateFrameRender();
	}
	
	
	/**
	 * Remove widget
	 */
	void removeWidget(Collection<int> path)
	{
		if (path == null) return;
		
		Collection<int> parent_path = path.slice(0, -1);
		WidgetTreeItem parent_item = this.tree.root.get(parent_path);
		if (not parent_item) return;
		
		WidgetTreeItem dest_item = this.tree.root.get(path);
		parent_item.items.removeItem(dest_item);
		parent_item.op_code.items.items.removeItem(dest_item.op_code);
		
		/* Set selected is null */
		this.selected.selectItem(null);
		
		/* Update frame render */
		this.updateFrameRender();
	}
	
	
	/**
	 * Drag & Drop
	 */
	void onTreeDragElement(Dict params)
	{
		TreeItem dest_item = params.get("dest_item");
		TreeItem dest_parent_item = params.get("dest_parent_item");
		TreeItem kind = params.get("kind");
		TreeItem src_item = params.get("src_item");
		TreeItem src_parent_item = params.get("src_parent_item");
		
		/* Move item */
		src_parent_item.op_code.items.items.removeItem(src_item.op_code);
		if (kind == "into")
		{
			dest_parent_item.op_code.items.items.addItem(src_item.op_code, null, "before");
		}
		else
		{
			dest_parent_item.op_code.items.items.addItem(src_item.op_code, dest_item.op_code, kind);
		}
		
		/* Update frame render */
		this.updateFrameRender();
	}
}