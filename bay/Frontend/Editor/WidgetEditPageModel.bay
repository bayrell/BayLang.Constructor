/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Editor;

use Runtime.lib;
use Runtime.Callback;
use Runtime.Context;
use Runtime.Reference;
use Runtime.Serializer;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseModel;
use Runtime.Web.BasePageModel;
use Runtime.Web.RenderProvider;
use Runtime.Web.Annotations.Widget;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.ContextMenu.ContextMenuModel;
use Runtime.Widget.Dialog.ConfirmDialogModel;
use Runtime.Widget.Tree.TreeItem;
use Runtime.Widget.Tree.TreeModel;
use BayLang.LangBay.ParserBay;
use BayLang.Constructor.Frontend.Editor.AddItemDialogModel;
use BayLang.Constructor.Frontend.Editor.WidgetEditPage;
use BayLang.Constructor.Frontend.Editor.WidgetItemModel;
use BayLang.Constructor.Frontend.Editor.WidgetItemParam;
use BayLang.Constructor.Frontend.Editor.WidgetTreeItem;
use BayLang.Constructor.WidgetDebug.WidgetPageModel;
use BayLang.LangBay.TranslatorBay;
use BayLang.LangES6.TranslatorES6;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlItems;
use BayLang.OpCodes.OpHtmlSlot;
use BayLang.OpCodes.OpHtmlStyle;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.OpCodes.OpModule;
use BayLang.OpCodes.OpNamespace;
use BayLang.OpCodes.OpString;
use BayLang.SaveOpCode;


class WidgetEditPageModel extends BasePageModel
{
	static const string STATUS_LOADING = 0;
	static const string STATUS_LOADED = 1;
	static const string STATUS_CHANGED = 2;
	static const string STATUS_SAVE_PROCESS = 3;
	static const string STATUS_SAVE_SUCCESS = 4;
	static const string STATUS_SAVE_ERROR = 5;
	
	/* Variables */
	string component = classof WidgetEditPage;
	string project_id = "";
	string current_widget = "";
	string model_content = "";
	string component_class_name = "";
	string component_content = "";
	string menu_selected = "params";
	int app_status = static::STATUS_LOADING;
	int breadcrumbs_selected = -1;
	int widget_inc = 1;
	var iframe = null;
	OpModule component_op_code = null;
	TreeModel tree = null;
	WidgetItemModel item = null;
	ContextMenuModel context_menu = null;
	AddItemDialogModel add_item_dialog = null;
	AddItemDialogModel remove_item_dialog = null;
	
	
	/**
	 * Returns iframe window
	 */
	BaseModel getFrameWindow()
	{
		if (not this.isLoaded()) return null;
		if (not this.iframe) return null;
		if (not this.iframe.contentWindow) return null;
		return this.iframe.contentWindow;
	}
	
	
	/**
	 * Returns iframe layout
	 */
	BaseModel getFrameLayout()
	{
		if (not this.isLoaded()) return null;
		if (not this.iframe) return null;
		if (not this.iframe.contentWindow) return null;
		if (not this.iframe.contentWindow.app_layout) return null;
		return this.iframe.contentWindow.app_layout;
	}
	
	
	/**
	 * Returns page model
	 */
	BaseModel getFramePageModel()
	{
		var app_layout = this.getFrameLayout();
		if (not app_layout) return null;
		return app_layout.getPageModel();
	}
	
	
	/**
	 * Returns widget frame page
	 */
	string getFramePageUrl() =>
		"/project/" ~ this.project_id ~
		"/open/widget.php?widget_name=" ~ this.current_widget
	;
	
	
	/**
	 * Returns frame widgets
	 */
	Collection<Widget> getFrameWidgets()
	{
		if (not this.isLoaded()) return null;
		if (not this.iframe) return null;
		if (not this.iframe.contentWindow) return null;
		Context context = this.iframe.contentWindow.Runtime.rtl.getContext();
		return context.getEntities(classof Widget);
	}
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		this.layout.setLayoutName("default");
		this.current_widget = this.layout.route.matches.get("widget_name");
		this.project_id = this.layout.route.matches.get("project_id");
		this.item = this.addWidget(classof WidgetItemModel);
		
		/* Create Tree */
		this.tree = this.addWidget(classof TreeModel);
		this.tree.events.add("canDrag", new Callback(this, "canTreeDrop"));
		this.tree.events.add("dragElement", new Callback(this, "treeDragElement"));
		this.tree.events.add("selectItem", new Callback(this, "treeSelectItem"));
		this.tree.events.add("contextMenuClick", new Callback(this, "treeContextMenuClick"));
		
		/* Add item dialog model */
		this.add_item_dialog = this.addWidget(classof AddItemDialogModel);
		
		/* Remove item dialog model */
		this.remove_item_dialog = this.addWidget(classof ConfirmDialogModel);
		
		/* Remove button */
		ButtonModel confirm_button = this.remove_item_dialog.buttons.getWidget("confirm_button");
		confirm_button.content = "Remove";
		confirm_button.events.clear("onClick");
		confirm_button.events.add("onClick", new Callback(this, "onRemoveItemConfirm"));
		confirm_button.styles.add("danger");
		confirm_button.styles.remove("primary");
		
		/* Create ContextMenu */
		this.context_menu = this.addWidget(classof ContextMenuModel);
		this.context_menu.addItem({
			"label": "Add item",
			"key": "add"
		});
		this.context_menu.addItem({
			"label": "Duplicate item",
			"key": "duplicate"
		});
		this.context_menu.addItem({
			"label": "Remove item",
			"key": "remove"
		});
		this.context_menu.events.add("onClickItem", new Callback(this, "onContextClickItem"));
	}
	
	
	/**
	 * Load widget
	 */
	async void loadWidget()
	{
		ApiResult res = await this.layout.callApi({
			"api_name": "admin.constructor.widget",
			"method_name": "getOpCode",
			"data": {
				"project_id": this.project_id,
				"current_widget": this.current_widget,
			}
		});
		
		if (res.isSuccess())
		{
			/* Setup op code */
			this.component_content = res.data.get("component_content");
			this.component_op_code = res.data.get("component_op_code");
			this.model_content = res.data.get("model_content");
			
			/* Setup component class name */
			string component_namespace = "";
			string component_class_name = "";
			for (int i=0; i<this.component_op_code.items.count(); i++)
			{
				BaseOpCode item = this.component_op_code.items.get(i);
				if (item instanceof OpNamespace) component_namespace = item.name;
				if (item instanceof OpDeclareClass) component_class_name = item.name;
			}
			this.component_class_name = component_namespace != ""
				? component_namespace ~ "." ~ component_class_name
				: component_class_name
			;
			
			/* Setup CSS styles */
			this.item.clearStyles();
			OpDeclareClass op_code_class = this.component_op_code.findClass();
			if (op_code_class)
			{
				for (int i=0; i<op_code_class.items.count(); i++)
				{
					BaseOpCode item = op_code_class.items.get(i);
					if (item instanceof OpHtmlStyle)
					{
						this.item.addHtmlStyle(item);
					}
				}
			}
			
			/* Add render key */
			OpDeclareFunction op_code_render = this.getRenderOpCode("render");
			if (op_code_render)
			{
				BaseOpCode op_code_expression = op_code_render.getExpression();
				this.addRenderKey(op_code_expression);
			}
			
			/* Load Tree items */
			this.loadTreeItems();
			
			/* Load iframe page */
			this.iframe.src = this.getFramePageUrl();
		}
	}
	
	
	/**
	 * Save widget
	 */
	async void saveWidget()
	{
		/*if (not this.isLoaded()) return;*/
		if (not this.component_op_code) return;
		
		OpDeclareClass op_code_class = this.component_op_code.findClass();
		if (not op_code_class) return;
		
		/* Update widget html styles op_code */
		for (int i=0; i<op_code_class.items.count(); i++)
		{
			BaseOpCode item = op_code_class.items.get(i);
			if (item instanceof OpHtmlStyle)
			{
				this.item.updateHtmlStyle(item);
			}
		}
		
		/* Translate widget */
		TranslatorBay translator = new TranslatorBay();
		list res = translator::translate(translator, this.component_op_code);
		string content = res.get(1);
		
		/* Save content */
		this.app_status = static::STATUS_SAVE_PROCESS;
		ApiResult res = await this.layout.callApi({
			"api_name": "admin.constructor.widget",
			"method_name": "save",
			"data": {
				"project_id": this.project_id,
				"current_widget": this.current_widget,
				"content": content,
			}
		});
		
		/* Set result */
		if (res.isSuccess())
		{
			this.app_status = static::STATUS_SAVE_SUCCESS;
		}
		
		/* Set error */
		else
		{
			this.app_status = static::STATUS_SAVE_ERROR;
		}
	}
	
	
	/**
	 * Iframe loaded
	 */
	void onAppLoaded()
	{
		this.app_status = static::STATUS_LOADED;
	}
	
	
	/**
	 * App is changed
	 */
	void onAppChanged()
	{
		this.app_status = static::STATUS_CHANGED;
	}
	
	
	/**
	 * Returns true if app is loaded
	 */
	bool isLoaded() => this.app_status > 0;
	
	
	/**
	 * Context menu item click
	 */
	void onContextClickItem(Dict item)
	{
		string item_key = item.get("key");
		this.context_menu.hide();
		
		/* Add item */
		if (item_key == "add")
		{
			this.add_item_dialog.show(this.item.selected_path);
		}
		
		/* Duplicate item */
		if (item_key == "duplicate")
		{
			this.duplicateWidget();
		}
		
		/* Remove item */
		if (item_key == "remove")
		{
			this.remove_item_dialog.title = "Remove item";
			this.remove_item_dialog.content = "Do you want to remove this item?";
			this.remove_item_dialog.show();
		}
	}
	
	
	/**
	 * On remove item
	 */
	void onRemoveItemConfirm()
	{
		this.removeWidget(this.item.selected_path);
		this.remove_item_dialog.hide();
	}
	
	
	/**
	 * Get render expression
	 */
	OpDeclareFunction getRenderOpCode(string render_name = "render")
	{
		if (not this.component_op_code) return null;
		
		OpDeclareClass op_code_class = this.component_op_code.findClass();
		if (not op_code_class) return null;
		
		OpDeclareFunction op_code_render = op_code_class.findFunction(render_name);
		return op_code_render;
	}
	
	
	/**
	 * Get styles op_code
	 */
	Collection<OpHtmlStyle> getStyleOpCode()
	{
		if (not this.component_op_code) return null;
		
		OpDeclareClass op_code_class = this.component_op_code.findClass();
		if (not op_code_class) return null;
		
		return op_code_class.items.filter(lib::isInstance(classof OpHtmlStyle));
	}
	
	
	/**
	 * Returns components
	 */
	Collection<string> getComponents() => this.component_op_code.uses.values();
	
	
	/**
	 * Create parser
	 */
	ParserBay createParser()
	{
		/* Setup parser params */
		Collection<string> current_class_name = rs::split(".", this.component_class_name);
		Dict params = {
			"current_namespace_name": rs::join(".", current_class_name.slice(0, -1))
			"current_class_name": current_class_name.last(),
			"uses": this.component_op_code.uses
		};
		
		/* Create new instance */
		ParserBay parser = new ParserBay();
		parser = parser::reset(parser);
		if (params.has("current_namespace_name"))
			parser <= current_namespace_name <= params.get("current_namespace_name");
		if (params.has("current_class_name"))
			parser <= current_class_name <= params.get("current_class_name");
		if (params.has("uses"))
			parser <= uses <= params.get("uses");
		
		return parser;
	}
	
	
	/**
	 * Create translator
	 */
	TranslatorES6 createTranslator()
	{
		/* New instance */
		TranslatorES6 t = new TranslatorES6();
		
		/* Reset translator */
		TranslatorES6 t = TranslatorES6::reset(t);
		if (this.component_op_code.uses != null)
		{
			t <= modules <= this.component_op_code.uses;
		}
		
		/* Enable debug */
		t = t.setFlag("DEBUG_COMPONENT", true);
		
		/* Return */
		return t;
	}
	
	
	/**
	 * Build render function
	 */
	string buildRenderContent(string render_name = "render")
	{
		OpDeclareFunction op_code_render = this.getRenderOpCode(render_name);
		if (not op_code_render) return;
		
		/* Create translator */
		TranslatorES6 t = this.createTranslator();
		Collection<SaveOpCode> save_op_codes = t.save_op_codes;
		
		/* Translate expression */
		list res = t.expression::OpDeclareFunction(t, op_code_render, false);
		t = res.get(0);
		
		/* Output save op code */
		string content = "";
		string save = t::outputSaveOpCode(t, save_op_codes.count());
		if (save != "") content ~= save;
		content ~= res.get(1);
		content = t.program::removeContext(content);
		content = rs::trim(content);
		
		return content;
	}
	
	
	/**
	 * Update render
	 */
	void updateFrameRender(string render_name = "render")
	{
		this.getFramePageModel().buildRender("render");
	}
	
	
	/**
	 * Update global css
	 */
	void updateFrameGlobalCSS()
	{
		this.getFramePageModel().buildGlobalCSS();
	}
	
	
	/**
	 * Update css
	 */
	void updateFrameCSS()
	{
		this.getFramePageModel().buildCSS();
	}
	
	
	/**
	 * Add render key
	 */
	void addRenderKey(Collection items)
	{
		if (not items) return;
		if (items instanceof OpHtmlItems) items = items.items;
		for (int i=0; i<items.count(); i++)
		{
			BaseOpCode item = items.get(i);
			
			/* Add render key to items */
			if (rtl::is_instanceof(item, classof OpHtmlTag))
			{
				OpHtmlAttribute key_attr = item.attrs.findItem(
					lib::equalAttr("key", "@key")
				);
				OpHtmlAttribute key_debug_attr = item.attrs.findItem(
					lib::equalAttr("key", "@key_debug")
				);
				if (key_attr == null and key_debug_attr == null)
				{
					item.attrs.push(new OpHtmlAttribute{
						"key": "@key_debug",
						"value": new OpString{
							"value": "widget_" ~ this.widget_inc,
						},
					});
					this.widget_inc = this.widget_inc + 1;
				}
				this.addRenderKey(item.items);
			}
		}
	}
	
	
	/**
	 * Load Tree items
	 */
	void loadTreeItems()
	{
		OpDeclareFunction op_code_render = this.getRenderOpCode("render");
		if (not op_code_render) return;
		
		BaseOpCode op_code_expression = op_code_render.getExpression();
		if (not op_code_expression) return;
		if (not (op_code_expression instanceof OpHtmlItems)) return;
		if (not op_code_expression.items.get(0)) return;
		
		BaseOpCode op_code = op_code_expression.items.get(0);
		if (not (op_code.items instanceof OpHtmlItems)) return;
		
		this.tree.root = new WidgetTreeItem();
		this.tree.root.op_code = op_code;
		this.tree.root.addHtmlItems(op_code.items);
	}
	
	
	/**
	 * Select item
	 */
	void treeSelectItem(Collection<int> path, WidgetTreeItem item)
	{
		this.breadcrumbs_selected = -1;
		this.context_menu.hide();
		this.getFramePageModel().selectItem(path);
		this.item.selectItem(path, item);
	}
	
	
	/**
	 * Breadcrumbs
	 */
	void selectBreadcrumbs(int pos)
	{
		if (this.breadcrumbs_selected != pos)
		{
			this.breadcrumbs_selected = pos;
		}
		else
		{
			this.breadcrumbs_selected = -1;
		}
	}
	
	
	/**
	 * Context menu click
	 */
	void editorContextMenuClick(var e)
	{
		var rect = this.iframe.getBoundingClientRect();
		int x = e.clientX + rect.x;
		int y = e.clientY + rect.y;
		this.context_menu.show(x, y);
	}
	
	
	/**
	 * Context menu click
	 */
	void treeContextMenuClick(var e)
	{
		int x = e.clientX;
		int y = e.clientY;
		this.context_menu.show(x, y);
	}
	
	
	/**
	 * Can Tree drop
	 */
	void canTreeDrop(
		Collection<int> src, Collection<int> dest,
		string kind, Reference<bool> result
	)
	{
		/*if (dest.count() < 2 and (kind == "before" or kind == "after"))
		{
			result.setValue(false);
		}*/
	}
	
	
	/**
	 * Is component
	 */
	pure bool isComponent(string tag_name)
	{
		string ch1 = rs::substr(tag_name, 0, 1);
		string ch2 = rs::upper(ch1);
		return ch1 == ch2;
	}
	
	
	/**
	 * Returns Widget class name
	 */
	string getWidgetClassName(string widget_name)
	{
		if (not static::isComponent(widget_name)) return null;
		if (not this.component_op_code) return null;
		if (not this.component_op_code.uses.has(widget_name)) return null;
		return this.component_op_code.uses.get(widget_name);
	}
	
	
	/**
	 * Create widget
	 */
	void createWidget(string widget_name, Collection<int> path, string kind)
	{
		Collection<int> parent_path = path.slice(0, -1);
		WidgetTreeItem parent_item = this.tree.root.get(parent_path);
		WidgetTreeItem dest_item = this.tree.root.get(path);
		
		string widget_name_arr = rs::split(".", widget_name);
		string alias_name = widget_name_arr.last();
		if (not this.component_op_code.hasModule(alias_name))
		{
			this.component_op_code.addModule(widget_name, alias_name);
			this.updateFrameGlobalCSS();
		}
		else if (this.component_op_code.uses.get(alias_name) != widget_name)
		{
			alias_name = widget_name;
		}
		
		OpHtmlItems op_code_items = new OpHtmlItems();
		
		/* Get slot info */
		var content_window = this.getFrameWindow();
		Callback f = new content_window.Runtime.Callback(widget_name, "getSlotInfo");
		if (f.exists())
		{
			Collection slot_info = f.apply();
			if (slot_info)
			{
				for (int i=0; i<slot_info.count(); i++)
				{
					Dict slot_item = slot_info.get(i);
					OpHtmlSlot slot = new OpHtmlSlot
					{
						"name": slot_item.get("name"),
						"items": new OpHtmlItems,
					};
					op_code_items.items.push(slot);
				}
			}
		}
		
		/* Create op_code */
		OpHtmlTag op_code = new OpHtmlTag
		{
			"attrs":
			[
				new OpHtmlAttribute
				{
					"key": "class",
					"value": new OpString
					{
						"value": "widget_" ~ this.widget_inc,
					},
				},
				new OpHtmlAttribute
				{
					"key": "@key",
					"value": new OpString
					{
						"value": "widget_" ~ this.widget_inc,
					},
				}
			],
			"items": op_code_items,
			"tag_name": alias_name,
		};
		
		/* Add items */
		if (kind == "before" or kind == "after")
		{
			parent_item.op_code.items.addItem(op_code, dest_item ? dest_item.op_code : null, kind);
			parent_item.items = [];
			parent_item.addHtmlItems(parent_item.op_code.items);
		}
		else
		{
			if (kind == "first") dest_item.op_code.items.items.insert(0, op_code);
			else if (kind == "last") dest_item.op_code.items.items.push(op_code);
			dest_item.items = [];
			dest_item.addHtmlItems(dest_item.op_code.items);
		}
		
		/* Widget inc */
		this.widget_inc = this.widget_inc + 1;
		
		/* Set app is changed */
		this.onAppChanged();
		
		/* Update frame render */
		this.updateFrameRender();
	}
	
	
	/**
	 * Duplicate selected widget
	 */
	void duplicateWidget()
	{
		if (not this.item.selected_item) return;
		
		Collection<int> parent_path = this.item.selected_path.slice(0, -1);
		WidgetTreeItem parent_item = this.tree.root.get(parent_path);
		WidgetTreeItem dest_item = this.item.selected_item;
		
		/* Duplicate */
		OpHtmlTag op_code = Serializer::copy(this.item.selected_item.op_code);
		
		/* Add items */
		parent_item.op_code.items.addItem(op_code, dest_item ? dest_item.op_code : null, "after");
		parent_item.items = [];
		parent_item.addHtmlItems(parent_item.op_code.items);
		
		/* Set app is changed */
		this.onAppChanged();
		
		/* Update frame render */
		this.updateFrameRender();
	}
	
	
	/**
	 * Remove widget
	 */
	void removeWidget(Collection<int> path)
	{
		if (path == null) return;
		
		Collection<int> parent_path = path.slice(0, -1);
		WidgetTreeItem parent_item = this.tree.root.get(parent_path);
		if (not parent_item) return;
		
		WidgetTreeItem dest_item = this.tree.root.get(path);
		parent_item.removeItem(dest_item);
		parent_item.op_code.items.removeItem(dest_item.op_code);
		
		/* Set selected is null */
		this.tree.selectItem(null);
		
		/* Set app is changed */
		this.onAppChanged();
		
		/* Update frame render */
		this.updateFrameRender();
	}
	
	
	/**
	 * Drag & Drop
	 */
	void treeDragElement(Dict params)
	{
		TreeItem dest_item = params.get("dest_item");
		TreeItem dest_parent_item = params.get("dest_parent_item");
		TreeItem kind = params.get("kind");
		TreeItem src_item = params.get("src_item");
		TreeItem src_parent_item = params.get("src_parent_item");
		
		/* Move item */
		src_parent_item.op_code.items.removeItem(src_item.op_code);
		if (kind == "into")
		{
			dest_parent_item.op_code.items.addItem(src_item.op_code, null, "before");
		}
		else
		{
			dest_parent_item.op_code.items.addItem(src_item.op_code, dest_item.op_code, kind);
		}
		
		/* Set app is changed */
		this.onAppChanged();
		
		/* Update frame render */
		this.updateFrameRender();
	}
}