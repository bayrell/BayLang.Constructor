/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Editor;

use Runtime.lib;
use Runtime.Reference;
use Runtime.Web.BaseModel;
use Runtime.Web.BasePageModel;
use Runtime.Widget.Tree.TreeItem;
use Runtime.Widget.Tree.TreeModel;
use BayLang.Constructor.Frontend.Editor.WidgetEditPage;
use BayLang.Constructor.Frontend.Editor.WidgetTreeItem;
use BayLang.Constructor.WidgetDebug.WidgetPageModel;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpHtmlItems;


class WidgetEditPageModel extends BasePageModel
{
	string component = classof WidgetEditPage;
	string project_id = "";
	string current_widget = "";
	bool app_loaded = false;
	string property_visible = "";
	var iframe = null;
	TreeModel tree = null;
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		this.layout.setLayoutName("default");
		this.current_widget = this.layout.route.matches.get("widget_name");
		this.project_id = this.layout.route.matches.get("project_id");
		this.tree = this.addWidget(classof TreeModel);
		this.tree.events.add("canDrag", method this.canTreeDrop);
		this.tree.events.add("dragElement", method this.dragElement);
		this.tree.events.add("selectItem", method this.selectItem);
	}
	
	
	/**
	 * Returns iframe layout
	 */
	BaseModel getFrameLayout() =>
		this.iframe ? this.iframe.contentWindow.app_layout : null;
	
	
	/**
	 * Returns page model
	 */
	BaseModel getFramePageModel() =>
		this.iframe ? this.iframe.contentWindow.app_layout.getPageModel() : null;
	
	
	/**
	 * Returns widget frame page
	 */
	string getWidgetFramePage() =>
		"/project/" ~ this.project_id ~
		"/open/widget.php?widget_name=" ~ this.current_widget
	;
	
	
	/**
	 * Load Tree items
	 */
	void loadTreeItems()
	{
		BaseOpCode component_op_code = this.getFramePageModel().component_op_code;
		if (not component_op_code) return;
		
		OpDeclareClass op_code_class = component_op_code.findClass();
		if (not op_code_class) return;
		
		string render_name = "render";
		OpDeclareFunction op_code_render = op_code_class.findFunction(render_name);
		if (not op_code_render) return;
		
		BaseOpCode op_code_expression = op_code_render.getExpression();
		if (not op_code_expression) return;
		if (not rtl::is_instanceof(op_code_expression, classof OpHtmlItems)) return;
		if (not op_code_expression.items.get(0)) return;
		
		BaseOpCode op_code = op_code_expression.items.get(0);
		if (not rtl::is_instanceof(op_code.items, classof OpHtmlItems)) return;
		
		this.tree.root = new WidgetTreeItem();
		this.tree.root.op_code = op_code;
		this.tree.root.addHtmlItems(op_code.items);
	}
	
	
	/**
	 * Select item
	 */
	void selectItem(Collection<int> path, WidgetTreeItem item)
	{
		this.getFramePageModel().selectItem(path, item ? item.op_code : null);
	}
	
	
	/**
	 * Can Tree drop
	 */
	void canTreeDrop(
		Collection<int> src, Collection<int> dest,
		string kind, Reference<bool> result
	)
	{
		/*if (dest.count() < 2 and (kind == "before" or kind == "after"))
		{
			result.setValue(false);
		}*/
	}
	
	
	/**
	 * Drag & Drop
	 */
	void dragElement(Dict params)
	{
		TreeItem dest_item = params.get("dest_item");
		TreeItem dest_parent_item = params.get("dest_parent_item");
		TreeItem kind = params.get("kind");
		TreeItem src_item = params.get("src_item");
		TreeItem src_parent_item = params.get("src_parent_item");
		
		/* Move item */
		src_parent_item.op_code.items.removeItem(src_item.op_code);
		if (kind == "into")
		{
			dest_parent_item.op_code.items.addItem(src_item.op_code, null, "before");
		}
		else
		{
			dest_parent_item.op_code.items.addItem(src_item.op_code, dest_item.op_code, kind);
		}
		
		/* Build render */
		this.getFramePageModel().buildRender("render");
	}
	
	
	/**
	 * App loaded
	 */
	void appLoaded()
	{
		this.app_loaded = true;
		
		/* Load Tree items */
		this.loadTreeItems();
	}
}