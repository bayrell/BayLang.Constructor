/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Editor.Processor;

use Runtime.lib;
use Runtime.Callback;
use Runtime.HashMap;
use Runtime.Serializer;
use Runtime.Widget.Tree.TreeModel;
use BayLang.SaveOpCode;
use BayLang.Constructor.Frontend.Annotations.WidgetSettingsInterface;
use BayLang.Constructor.Frontend.Editor.Processor.CodeProcessor;
use BayLang.Constructor.Frontend.Editor.Widget;
use BayLang.Constructor.Frontend.Editor.WidgetTreeItem;
use BayLang.Constructor.Frontend.Providers.EditorProvider;
use BayLang.LangBay.ParserBay;
use BayLang.LangES6.TranslatorES6;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpCollection;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpDict;
use BayLang.OpCodes.OpDictPair;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlItems;
use BayLang.OpCodes.OpHtmlSlot;
use BayLang.OpCodes.OpHtmlStyle;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.OpCodes.OpModule;
use BayLang.OpCodes.OpNamespace;
use BayLang.OpCodes.OpString;
use BayLang.OpCodes.OpUse;


class ComponentProcessor extends CodeProcessor
{	
	/**
	 * Setup op code
	 */
	void setupOpCode(OpModule code)
	{
		parent(code);
		
		/* Process op_code attrs */
		OpDeclareFunction op_code_render = this.findFunction("render");
		if (not op_code_render) return;
		
		/* Process attributes */
		BaseOpCode op_code_expression = op_code_render.getExpression();
		this.page_model.attribute_processor.processHtmlItems(op_code_expression);
		this.page_model.attribute_processor.initWidgetInc();
		
		/* Set main widget */
		if (op_code_expression and op_code_expression instanceof OpHtmlItems)
		{
			BaseOpCode op_code = op_code_expression.items.get(0);
			this.page_model.main_widget = this.page_model.widget_manager.addMain(op_code);
		}
	}
	
	
	/**
	 * Get styles op_code
	 */
	Collection<OpHtmlStyle> getStyleOpCode()
	{
		if (not this.code) return null;
		
		OpDeclareClass op_code_class = this.code.findClass();
		if (not op_code_class) return null;
		
		return op_code_class.items.filter(lib::isInstance(classof OpHtmlStyle));
	}
	
	
	/**
	 * Build render function
	 */
	string buildRenderContent(string render_name = "render")
	{
		OpDeclareFunction op_code_render = this.findFunction(render_name);
		if (not op_code_render) return "";
		
		/* Create translator */
		TranslatorES6 t = this.createTranslator();
		Collection<SaveOpCode> save_op_codes = t.save_op_codes;
		
		/* Translate expression */
		list res = t.expression::OpDeclareFunction(t, op_code_render, false);
		t = res.get(0);
		
		/* Output save op code */
		string content = "";
		string save = t::outputSaveOpCode(t, save_op_codes.count());
		if (save != "") content ~= save;
		content ~= res.get(1);
		content = t.program::removeContext(content);
		content = rs::trim(content);
		
		return content;
	}
	
	
	/**
	 * Add default template
	 */
	void addDefaultTemplate(OpHtmlTag op_code, string widget_name, string template_content)
	{
		/* Parse default template */
		OpModule default_template = null;
		ParserBay parser = this.createParser();
		try
		{
			list res = parser::parse(parser, template_content);
			parser = res.get(0);
			default_template = res.get(1);
		}
		catch (var e)
		{
		}
		
		/* If default template is correct */
		if (not default_template) return;
			
		/* Add default CSS */
		OpDeclareClass op_code_class = default_template.findClass();
		if (op_code_class)
		{
			OpHtmlStyle op_code_style = op_code_class.items.findItem(
				lib::isInstance(classof OpHtmlStyle)
			);
			if (op_code_style)
			{
				this.page_model.styles.setSelectorContent(
					"." ~ widget_name, op_code_style.content
				);
			}
		}
		
		/* Add uses */
		Collection modules = default_template.uses.keys();
		for (int i=0; i<default_template.items.count(); i++)
		{
			BaseOpCode item = default_template.items.get(i);
			if (item instanceof OpUse)
			{
				this.addModule(item.name, item.alias, item.is_component);
			}
		}
		
		/* Find class from default_template */
		OpDeclareClass op_code_class = default_template.findClass();
		if (not op_code_class) return;
		
		/* Find render */
		OpDeclareFunction op_code_render = op_code_class.findFunction("render");
		if (not op_code_render) return;
		if (not op_code_render.expression) return;
		if (not (op_code_render.expression instanceof OpHtmlItems)) return;
		
		/* Add items */
		op_code.items = op_code_render.expression;
	}
	
	
	/**
	 * Create widget
	 */
	OpHtmlTag createWidget(string class_name, string widget_name = "widget")
	{
		/* Default widget name */
		if (widget_name == "") widget_name = "widget";
		
		/* Add module */
		string alias_name = this.addModule(class_name, "", true);
		
		/* Create op_code */
		string key_debug = this.page_model.attribute_processor.createKeyName("widget");
		OpHtmlTag op_code = new OpHtmlTag
		{
			"attrs":
			[
				new OpHtmlAttribute
				{
					"key": "class",
					"value": new OpString
					{
						"value": widget_name,
					},
				},
				new OpHtmlAttribute
				{
					"key": "@key_debug",
					"value": new OpString
					{
						"value": key_debug,
					},
				}
			],
			"items": new OpHtmlItems(),
			"tag_name": alias_name,
		};
		
		/* Default template */
		EditorProvider editor = this.page_model.getFrameEditor();
		WidgetSettingsInterface widget_settings = editor.getWidgetSettings(class_name);
		if (not widget_settings) return op_code;
		
		/* Get default template */
		Dict template_info = widget_settings.getDefaultTemplate();
		fn template_factory = template_info.get("default");
		if (not template_factory) return op_code;
		
		/* Get template content */
		Dict template_info = template_factory();
		string template_content = "<class>" ~ template_info.get("content") ~ "</class>";
		
		/* Add default template */
		this.addDefaultTemplate(op_code, widget_name, template_content);
		
		/* Add op_code attrs */
		this.page_model.attribute_processor.processHtmlTag(op_code, widget_name);
		
		return op_code;
	}
}