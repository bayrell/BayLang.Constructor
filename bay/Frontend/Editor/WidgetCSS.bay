<!--
 *  BayLang Constructor
-->

<class name="BayLang.Constructor.Frontend.Editor.WidgetCSS">

<use name="Runtime.Web.RenderProvider" />
<use name="Runtime.Widget.Input" component="true" />
<use name="Runtime.Widget.Select" component="true" />
<use name="Runtime.Widget.Tag" component="true" />
<use name="Runtime.Widget.TextArea" component="true" />
<use name="BayLang.Constructor.Frontend.Editor.WidgetItemParam" />


<style>
.widget_css__row{
	margin-bottom: 10px;
}
.widget_css__label{
	margin-bottom: 5px;
}
.widget_css__title{
	text-align: center;
	margin-bottom: 5px;
}
.widget_css %(Select)widget_select{
	padding: 4px;
}
.widget_css %(Input)widget_input,
.widget_css %(TextArea)widget_textarea{
	padding: 7px;
}
.widget_css %(TextArea)widget_textarea{
	font-family: 'PT Mono';
	line-height: 1.5;
}
</style>


<template name="renderWidgetName">
	<div class="widget_css__row">
		<div class="widget_css__label">Name</div>
		<div class="widget_css__content">
			<Input value={{ this.model.param_widget_name.value }}
				@event:valueChange={{ void (var value) {
					this.model.changeAttrContent("widget_name", value);
				} }}
			/>
		</div>
	</div>
</template>


<template name="renderClassName">
	<div class="widget_css__row">
		<div class="widget_css__label">Class</div>
		<div class="widget_css__content">
			<Tag value={{ this.model.param_class_name.value }}
				@event:valueChange={{ void (var value) {
					this.model.changeAttrContent("class_name", value);
				} }}
			/>
		</div>
	</div>
</template>


<template name="renderCSS">
	<div class="widget_css__title">
		Content
	</div>
	<TextArea value={{ this.model.css_content }}
		@event:valueChange={{ void (var value) {
			this.model.changeCSSContent(value)
		} }}
		@event:keydown={{ this.onCSSKeyDown }}
	/>
</template>


<template>
	<div class="widget_css">
		%if (this.model.selected_item)
		{
			%render this.renderWidgetName();
			%render this.renderClassName();
			%render this.renderCSS();
		}
	</div>
</template>


<script>

var css_change_timer = null;

void onCSSKeyDown(var e)
{
	if (this.css_change_timer != null)
	{
		window.clearTimeout(this.css_change_timer);
		this.css_change_timer = null;
	}
	if (e.keyCode != 13 and e.keyCode != 186)
	{
		this.css_change_timer = window.setTimeout(void () use (e)
		{
			this.model.changeCSSContent(e.target.value);
		}, 300);
		return;
	}
	this.model.changeCSSContent(e.target.value);
}

</script>


</class>