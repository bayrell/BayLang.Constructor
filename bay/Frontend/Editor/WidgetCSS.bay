<!--
 *  BayLang Constructor
-->

<class name="BayLang.Constructor.Frontend.Editor.WidgetCSS">

<use name="Runtime.Callback" />
<use name="Runtime.Widget.Input" component="true" />
<use name="Runtime.Widget.Select" component="true" />
<use name="Runtime.Widget.Tag" component="true" />
<use name="Runtime.Widget.TextEditable" component="true" />
<use name="Runtime.Widget.Dialog.DialogModelException" />
<use name="Runtime.Widget.Dialog.PromptDialog" component="true" />
<use name="Runtime.Widget.Dialog.PromptDialogModel" />
<use name="BayLang.Constructor.Frontend.Editor.WidgetItemStyle" />


<style>
.widget_param__row{
	margin-bottom: 10px;
}
.widget_param__label{
	margin-bottom: 5px;
}
.widget_param__title{
	margin-bottom: 5px;
}
.widget_param__text{
	display: flex;
	gap: 10px;
}
.widget_param__text{
	display: flex;
	gap: 10px;
}
.widget_param__text_label{
	overflow-wrap: anywhere;
}
.widget_param__text_button{
	cursor: pointer;
}
.widget_param__text_button:hover{
	text-decoration: underline;
}
.widget_css__select_style{
	display: flex;
	align-items: center;
    justify-content: center;
	margin-bottom: 10px;
}
.widget_css__select_style_item{
	padding: 5px;
	cursor: pointer;
}
.widget_css__select_style_item.selected{
	background-color: var(--widget-color-primary);
	color: var(--widget-color-primary-text);
}
.widget_css__content{
	padding-bottom: 10px;
}
.widget_css__label{
	text-align: center;
	background-color: aliceblue;
	padding: 5px;
	margin-bottom: 5px;
}
.widget_css__row{
	display: flex;
	align-items: center;
	margin-bottom: 5px;
}
.widget_css__key{
	width: 100px;
}
.widget_css__value{
	width: calc(100% - 100px);
}
</style>


<template name="renderComponentName">
	<div class="widget_param__row">
		<div class="widget_param__label">Component</div>
		<div class="widget_param__content">
			{{ this.model.selected_item.op_code.tag_name }}
		</div>
	</div>
</template>


<template name="renderWidgetName">
	<div class="widget_param__row">
		<div class="widget_param__label">
			<div class="widget_param__text">
				<div class="widget_param__text_label">
					Name
				</div>
				<div class="widget_param__text_button"
					@event:click={{ this.onEditClickName }}
				>
					[Edit]
				</div>
			</div>
		</div>
		<div class="widget_param__content">
			{{ this.model.param_widget_name.value }}
		</div>
	</div>
</template>


<template name="renderClassName">
	<div class="widget_param__row">
		<div class="widget_param__label">Class</div>
		<div class="widget_param__content">
			<Tag value={{ this.model.param_class_name.value }}
				@event:valueChange={{ void (var value) {
					this.model.changeAttrContent("class_name", value);
				} }}
			/>
		</div>
	</div>
</template>


<template name="renderInput" args="
	WidgetItemStyle item_style, string key,
	string label, string default_value = ''"
>
	%set string value = this.getValue(item_style, key, default_value);
	<div class="widget_css__row">
		<div class="widget_css__key">{{ label ? label : key }}</div>
		<div class="widget_css__value">
			<Input value={{ value }}
				@event:valueChange={{
					void (string value) use (item_style, key)
					{
						this.setValue(item_style, key, value);
					}
				}}
			/>
		</div>
	</div>
</template>


<template name="renderSelect" args="
	WidgetItemStyle item_style, string key,
	string label, Collection options"
>
	%set string value = this.getValue(item_style, key);
	<div class="widget_css__row">
		<div class="widget_css__key">{{ label ? label : key }}</div>
		<div class="widget_css__value">
			<Select
				value={{ value }}
				options={{ options }}
				@event:valueChange={{
					void (string value) use (item_style, key)
					{
						this.setValue(item_style, key, value);
					}
				}}
			/>
		</div>
	</div>
</template>


<template name="renderStyles">
	%set string selector_name = this.model.getCurrentSelector();
	%set WidgetItemStyle item_style = this.model.styles.get(selector_name);
	<div class="widget_css">
		<div class="widget_css__content">
			<div class="widget_css__label">Padding</div>
			<div class="widget_css__items">
				%render this.renderInput(item_style, "padding-top", "");
				%render this.renderInput(item_style, "padding-bottom", "");
				%render this.renderInput(item_style, "padding-left", "");
				%render this.renderInput(item_style, "padding-right", "");
			</div>
		</div>
		<div class="widget_css__content">
			<div class="widget_css__label">Margin</div>
			<div class="widget_css__items">
				%render this.renderInput(item_style, "margin-top", "");
				%render this.renderInput(item_style, "margin-bottom", "");
				%render this.renderInput(item_style, "margin-left", "");
				%render this.renderInput(item_style, "margin-right", "");
			</div>
		</div>
		<div class="widget_css__content">
			<div class="widget_css__label">Font</div>
			<div class="widget_css__items">
				%render this.renderInput(item_style, "font-size", "");
				%render this.renderSelect(item_style, "font-weight", "", [
					{"label": "light", "value": "lighter"},
					{"label": "normal", "value": "normal"},
					{"label": "bold", "value": "bold"},
					{"label": "bolder", "value": "bolder"},
				]);
			</div>
		</div>
		<div class="widget_css__content">
			<div class="widget_css__label">Background</div>
			<div class="widget_css__items">
				%render this.renderInput(item_style, "background-color", "Color");
				%render this.renderInput(item_style, "background-image", "Image");
				%render this.renderInput(item_style, "background-position", "Position");
				%render this.renderSelect(item_style, "background-repeat", "Repeat", [
					{"label": "repeat", "value": "repeat"},
					{"label": "repeat-x", "value": "repeat-x"},
					{"label": "repeat-y", "value": "repeat-y"},
					{"label": "no-repeat", "value": "no-repeat"},
				]);
				%render this.renderSelect(item_style, "background-size", "Size", [
					{"label": "contain", "value": "contain"},
					{"label": "cover", "value": "cover"},
				]);
			</div>
		</div>
	</div>
</template>


<template>
	%set string selector_name = this.model.getCurrentSelector();
	<div class="widget_css">
		%if (this.model.selected_item)
		{
			<!-- Render info -->
			%render this.renderComponentName();
			%render this.renderWidgetName();
			%render this.renderClassName();
			
			<div class="widget_css__select_style">
				<div class="widget_css__select_style_item"
					class={{ this.show_styles ? "selected" : "" }}
					@event:click={{ void(){ this.show_styles = true; } }}
				>Style</div>
				<div class="widget_css__select_style_item"
					class={{ not this.show_styles ? "selected" : "" }}
					@event:click={{ void(){ this.show_styles = false; } }}
				>CSS</div>
			</div>
			
			%if (this.show_styles)
			{
				%render this.renderStyles();
			}
			%else
			{
				<TextEditable class="overflow"
					value={{ this.model.getCSSContent(selector_name) }}
					@event:valueChange={{ void (var value) use (selector_name) {
						this.model.changeCSSContent(selector_name, value)
					} }}
				/>
			}
			
			<!-- Render dialog -->
			%render this.renderWidget(this.edit_dialog);
		}
	</div>
</template>


<script>

bool show_styles = true;

/* Dialogs */
PromptDialogModel edit_dialog = new PromptDialogModel{
	"widget_name": "edit_dialog",
	"confirm_button": "Rename",
	"title": "Rename name",
	"events": {
		"confirm": new Callback(this, "onRename")
	},
};


/**
 * Returns css value
 */
string getValue(WidgetItemStyle item_style, string key, string default_value = "")
{
	if (item_style == null) return default_value;
	if (not item_style.css_values.has(key)) return default_value;
	return item_style.css_values.get(key);
}


/**
 * SetValue
 */
void setValue(WidgetItemStyle item_style, string key, string value = "")
{
	if (item_style)
	{
		item_style.setCSSValue(key, value);
	}
	else
	{
		string selector_name = this.model.getCurrentSelector();
		this.model.changeCSSContent(selector_name, key ~ ": " ~ value);
	}
}


/**
 * Add click
 */
void onEditClickName()
{
	this.old_widget_name = this.model.param_widget_name.value;
	this.edit_dialog.setTitle("Rename " ~ this.old_widget_name);
	this.edit_dialog.setValue(this.old_widget_name);
	this.edit_dialog.show();
}


/**
 * Rename
 */
void onRename(string new_widget_name)
{
	if (this.old_widget_name == new_widget_name) return;
	
	string new_selector_name = new_widget_name;
	if (rs::charAt(new_selector_name, 0) != ".") new_selector_name = "." ~ new_selector_name;
	
	/* Rename widget */
	this.model.changeAttrContent("widget_name", new_widget_name);
	
	/* Create new style */
	if (not this.model.styles.has(new_selector_name))
	{
		string css_content = this.model.getCSSContent("." ~ this.old_widget_name)
		this.model.changeCSSContent(new_selector_name, css_content);
	}
}

</script>

</class>