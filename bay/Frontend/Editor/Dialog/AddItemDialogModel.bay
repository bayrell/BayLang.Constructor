/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Editor.Dialog;

use Runtime.lib;
use Runtime.Callback;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.Dialog.ConfirmDialogModel;
use BayLang.Constructor.Frontend.Annotations.WidgetSettingsInterface;
use BayLang.Constructor.Frontend.Editor.Dialog.AddItemDialog;
use BayLang.Constructor.Frontend.Editor.CodeModel;
use BayLang.Constructor.Frontend.Editor.Widget;
use BayLang.Constructor.Frontend.Providers.EditorProvider;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlTag;


class AddItemDialogModel extends ConfirmDialogModel
{
	string component = classof AddItemDialog;
	string widget_name = "add_item_dialog";
	string kind = "after";
	string widget_name_class = "";
	string widget_name_value = "";
	int step = 1;
	Collection<WidgetSettingsInterface> current_widgets = null;
	
	/* Selected item */
	Collection<int> selected_widget_path = null;
	Dict selected_widget_info = null;
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
	}
	
	
	/**
	 * Select item
	 */
	void selectItem(string widget_name)
	{
		this.widget_name_class = widget_name;
		this.title = "Add item " ~ widget_name;
		this.setStep(2);
	}
	
	
	/**
	 * Set step
	 */
	void setStep(int step)
	{
		this.step = step;
		if (step == 1)
		{
		}
		else if (step == 2)
		{
		}
	}
	
	
	/**
	 * Returns widget label
	 */
	string getTagWidgetInfo(OpHtmlTag op_code)
	{
		OpHtmlAttribute class_name_attr = op_code.attrs.findItem(
			lib::equalAttr("key", "class")
		);
		if (not class_name_attr)
		{
			return
			{
				"label": op_code.tag_name,
				"tag_name": op_code.tag_name,
				"class_name": "",
				"widget_name": "",
			};
		};
		
		string class_name = class_name_attr.value.value;
		Collection attrs = rs::split(" ", class_name);
		attrs = attrs.filter(lib::equalNot(""));
		return
		{
			"label": op_code.tag_name ~ "." ~ attrs.first(),
			"tag_name": op_code.tag_name,
			"class_name": class_name,
			"widget_name": attrs.first(),
		};
	}
	
	
	/**
	 * Returns frame widgets
	 */
	Collection<WidgetSettingsInterface> getFrameWidgets()
	{
		EditorProvider editor = @.provider(classof EditorProvider);
		return editor.getWidgets();
	}
	
	
	/**
	 * Show dialog
	 */
	void show(Collection<string> selected_path = null)
	{
		this.step = 1;
		this.widget_name_class = "";
		this.widget_name_value = "item";
		this.title = "Add item";
		this.current_widgets = this.getFrameWidgets();
		this.selected_widget_path = selected_path ? selected_path.slice() : null;
		this.selected_widget_info = null;
		if (this.selected_widget_path)
		{
			Widget selected_widget = this.parent_widget.component_processor
				.getWidget(this.selected_widget_path)
			;
			this.selected_widget_info = this.getTagWidgetInfo(selected_widget.code);
			this.widget_name_value = this.selected_widget_info.get("widget_name") ~ "_item";
		}
		parent();
	}
	
	
	/**
	 * Confirm button click
	 */
	void onConfirmButtonClick()
	{
		if (this.step != 2) return;
		
		/* Create widget */
		OpHtmlTag op_code = this.parent_widget.component_processor.createWidget(
			this.widget_name_class, this.widget_name_value
		);
		this.parent_widget.addOpCode(op_code, this.selected_widget_path, this.kind);
		this.hide();
	}
}