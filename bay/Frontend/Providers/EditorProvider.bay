/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Providers;

use Runtime.BaseObject;
use Runtime.BaseProvider;
use BayLang.Constructor.Frontend.Annotations.WidgetManagerAnnotation;
use BayLang.Constructor.Frontend.Annotations.WidgetSettingsInterface;


class EditorProvider extends BaseProvider
{
	Collection<WidgetSettingsInterface> managers = [];
	Dict<WidgetSettingsInterface> settings = {};
	
	
	/**
	 * Init provider
	 */
	async void init()
	{
		/* Get widgets managers */
		Vector<WidgetManagerAnnotation> managers = @.getEntities(classof WidgetManagerAnnotation);
		for (int i=0; i<managers.count(); i++)
		{
			WidgetManagerAnnotation annotation = managers.get(i);
			this.managers.push(annotation.factory());
		}
		
		/* Get widgets settings */
		for (int i=0; i<this.managers.count(); i++)
		{
			WidgetManagerAnnotation manager = this.managers.get(i);
			Collection<string> widgets = manager.getWidgetSettings();
			for (int j=0; j<widgets.count(); j++)
			{
				WidgetSettingsInterface settings = widgets.get(j);
				Collection<string> names = settings.getWidgets();
				for (int k=0; k<names.count(); k++)
				{
					string class_name = names.get(k);
					this.settings.set(class_name, settings);
				}
			}
		}
	}
	
	
	/**
	 * Find settings
	 */
	WidgetSettingsInterface findSettings(string class_name)
	{
		return this.settings.get(class_name);
	}
}