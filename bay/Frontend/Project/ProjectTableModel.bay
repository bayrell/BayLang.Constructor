/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Project;

use Runtime.Widget.ButtonModel;
use Runtime.Widget.Label;
use Runtime.Widget.Crud.CrudApiStorage;
use Runtime.Widget.Table.TableDialogModel;
use BayLang.Constructor.Frontend.Project.ProjectFormModel;


class ProjectTableModel extends TableDialogModel
{
	/**
	 * Create data storage
	 */
	CrudApiStorage createDataStorage() => new CrudApiStorage{
		"layout": this.layout,
		"class_name": "admin.constructor.project",
		"primary_keys": ["id"],
	};
	
	
	/**
	 * Create form
	 */
	ProjectFormModel createForm() => this.addWidget(classof ProjectFormModel);
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Row number */
		this.addField({
			"name": "row_number",
		});
		
		/* Field module name */
		this.addField({
			"name": "id",
			"label": "ID",
			"component": classof Label,
		});
		
		/* Field name */
		this.addField({
			"name": "name",
			"label": "Name",
			"component": classof Label,
		});
		
		/* Field row buttons */
		this.addField({
			"name": "row_buttons",
			"model": this.row_buttons,
		});
		
		/* Open button */
		ButtonModel open_button = this.row_buttons.addWidget(
			classof ButtonModel,
			{
				"widget_name": "open_button",
				"content": "Open",
				"href": string (Dict data)
				{
					int row_number = data.get("row_number");
					Dict item = this.getItemByRowNumber(row_number);
					return this.layout.url("baylang:project:modules", {"project_id":item.get("id")});
				}
			},
			"edit_button"
		);
		
		/* Add style */
		this.styles.add("border");
		this.row_buttons.styles.add("no-gap");
	}
}