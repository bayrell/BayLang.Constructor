/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.Frontend.Main;

use Runtime.Callback;
use Runtime.Web.BaseLayoutModel;
use Runtime.Web.BaseModel;
use Runtime.Web.Component;
use Runtime.Web.RenderListModel;
use Runtime.Web.RenderProvider;
use Runtime.Widget.ContextMenu.ContextMenuModel;
use Runtime.Widget.PageModel;
use Runtime.Widget.TextModel;
use BayLang.Constructor.Frontend.Main.IndexPageModel;
use BayLang.Constructor.Frontend.Main.Structure;


class StructureModel extends BaseModel
{
	string component = classof Structure;
	Collection<Dict> items = null;
	Dict drag_start_point = null;
	Dict drag_src_item = null;
	Dict drag_dest_item = null;
	var drag_src_elem = null;
	var drag_dest_elem = null;
	var drag_dest_box = null;
	string drag_dest_kind = null;
	bool is_drag = false;
	
	ContextMenuModel context_menu = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(Dict params = null)
	{
		parent(params);
		
		/* Add context menu */
		this.context_menu = new ContextMenuModel{
			"widget_name": "context_menu",
			"parent_widget": this,
		};
		this.context_menu.addItem({
			"label": "Add item",
			"key": "add"
		});
		this.context_menu.addItem({
			"label": "Remove item",
			"key": "remove"
		});
		this.context_menu.events.add("onClickItem", new Callback(this, "onContextClickItem"));
	}
	
	
	/**
	 * Convert widget
	 */
	void convertWidget(BaseModel widget) =>
	{
		"widget_name": widget.widget_name,
		"model_path": widget.getModelPath(),
		"model_path_str": widget.getModelPathString(),
		"items": this.convertWidgetItems(widget),
		"can_items": rtl::is_instanceof(widget, classof RenderListModel),
	};
	
	
	/**
	 * Convert widget
	 */
	Collection convertWidgetItems(BaseModel widget)
	{
		BaseLayoutModel page_layout = this.parent_widget.getFrameLayout();
		if (rtl::is_instanceof(widget, classof RenderListModel))
		{
			return widget.items.map(
				BaseModel (BaseModel widget) use (page_layout) =>
					this.convertWidget(widget)
			);
		}
		return null;
	}
	
	
	/**
	 * Reload items
	 */
	void reloadItems()
	{
		PageModel page_model = this.parent_widget.getFramePageModel();
		this.items = this.convertWidgetItems(page_model);
	}
	
	
	/**
	 * Add widget after
	 */
	void addWidgetAfter(BaseModel widget)
	{
		BaseModel parent_widget = widget.parent_widget;
		if (rtl::is_instanceof(parent_widget, classof RenderListModel))
		{
			string widget_name = "widget_" ~ this.parent_widget.widget_counter;
			this.parent_widget.widget_counter = this.parent_widget.widget_counter + 1;
			
			BaseModel new_widget = this.parent_widget.createComponent(
				classof TextModel,
				{
					"widget_name": widget_name,
					"parent_widget": parent_widget,
					"kind": "p",
					"content": "Test " ~ widget_name,
				}
			);
			parent_widget.addItemAfter(new_widget, widget);
			
			/* Reload items */
			RenderProvider::nextTick(void (){
				this.parent_widget.updateCurrentWidgetBox();
				this.reloadItems();
			});
		}
	}
	
	
	/**
	 * Remove widget
	 */
	void removeWidget(BaseModel widget)
	{
		BaseModel parent_widget = widget.parent_widget;
		parent_widget.removeWidget(widget);
		this.parent_widget.updateCurrentWidget(null);
		this.reloadItems();
	}
	
	
	/**
	 * Check path inside
	 */
	void checkInside(Collection src_path, Collection dest_path)
	{
		if (src_path == null) return false;
		if (dest_path == null) return false;
		
		int pos = 0;
		while (
			pos < src_path.count() and
			pos < dest_path.count() and
			src_path.get(pos) == dest_path.get(pos)
		)
		{
			pos += 1;
		}
		if (pos == src_path.count()) return true;
		return false;
	}
	
	
	/**
	 * Move drag and drop item
	 */
	void moveDragItem()
	{
		/* Get path */
		Collection src_path = this.drag_src_item.get("model_path").slice();
		Collection dest_path = this.drag_dest_item
			? this.drag_dest_item.get("model_path").slice()
			: null
		;
		
		/* Get widgets */
		BaseModel src_widget = this.parent_widget.getWidget(src_path);
		BaseModel dest_widget = dest_path ? this.parent_widget.getWidget(dest_path) : null;
		
		/* Get parents widget */
		RenderListModel src_parent_widget = src_widget.parent_widget;
		RenderListModel dest_parent_widget = dest_path
			? dest_widget.parent_widget
			: this.parent_widget.getFramePageModel()
		;
		
		if (this.drag_dest_kind == "into")
		{
			dest_parent_widget = dest_widget;
		}
		
		if (src_widget == null) return;
		if (src_widget == dest_widget) return;
		if (src_parent_widget == null) return;
		if (dest_parent_widget == null) return;
		if (this.drag_dest_kind == null) return;
		if (not rtl::is_instanceof(dest_parent_widget, classof RenderListModel)) return;
		
		/* Check if dest inside src */
		if (this.checkInside(src_path, dest_path)) return;
		
		/* Move widget */
		if (src_parent_widget != dest_parent_widget)
		{
			/* Remove widget */
			src_parent_widget.removeWidget(src_widget);
			
			/* Build new model path */
			Collection new_model_path = dest_parent_widget.model_path.concat(
				["widgets", src_widget.widget_name]
			);
			RenderProvider::updateModelPath(src_widget, new_model_path);
			
			/* Change current widget */
			this.parent_widget.setCurrentWidget(src_widget);
			
			/* Add widget */
			dest_parent_widget.addWidget(src_widget);
		}
		else
		{
			src_parent_widget.removeItem(src_widget);
		}
		
		/* Insert widget */
		if (this.drag_dest_kind == "top")
		{
			dest_parent_widget.addItemBefore(src_widget, dest_widget);
		}
		else if (this.drag_dest_kind == "bottom")
		{
			if (dest_widget)
			{
				dest_parent_widget.addItemAfter(src_widget, dest_widget);
			}
			else
			{
				dest_parent_widget.addItem(src_widget);
			}
		}
		else if (this.drag_dest_kind == "into")
		{
			dest_parent_widget.insertItem(src_widget, 0);
		}
		/*
		log("---");
		log(this.drag_dest_kind);
		log("src", src_path);
		log("dest", dest_path);
		*/
		/* Reload items */
		RenderProvider::nextTick(void (){
			this.parent_widget.updateCurrentWidgetBox();
			this.reloadItems();
		});
	}
	
	
	/**
	 * Start drag
	 */
	void startDrag(var elem)
	{
		/*log("Start drag");*/
		this.is_drag = true;
		this.drag_dest_elem = null;
		this.drag_dest_item = null;
	}
	
	
	/**
	 * Stop drag
	 */
	void stopDrag(var elem)
	{
		if (this.is_drag)
		{
			this.moveDragItem();
			/*log("Stop drag");*/
		}
		
		this.is_drag = false;
		this.drag_src_elem = null;
		this.drag_src_item = null;
		this.drag_dest_elem = null;
		this.drag_dest_item = null;
		this.drag_dest_box = null;
		this.drag_dest_kind = null;
		this.drag_start_point = null;
	}
	
	
	/**
	 * Set start drag item
	 */
	void setStartDragItem(var elem, Dict item, Dict start_mouse_point)
	{
		if (this.drag_src_elem != elem)
		{
			this.drag_src_elem = elem;
			this.drag_src_item = item;
			this.drag_start_point = start_mouse_point;
		}
	}
	
	
	/**
	 * Mouse over
	 */
	void setDragDestElement(var elem, Dict item, string kind)
	{
		if (not this.is_drag) return;
		if (kind == "into")
		{
			if (item.get("can_items"))
			{
				if (this.drag_src_elem == elem)
				{
					kind = "top";
				}
			}
			else
			{
				kind = "bottom";
			}
		}
		if (this.drag_dest_elem == elem and this.drag_dest_kind == kind)
		{
			return;
		}
		
		var box = IndexPageModel::getBoxStyles(elem);
		this.drag_dest_box = box;
		this.drag_dest_elem = elem;
		this.drag_dest_item = item;
		this.drag_dest_kind = kind;
		
		if (this.drag_src_elem == elem)
		{
			this.drag_dest_box = null;
		}
		
		/* Check if dest inside src */
		if (this.drag_dest_item)
		{
			Collection src_path = this.drag_src_item.get("model_path").slice();
			Collection dest_path = this.drag_dest_item.get("model_path").slice();
			if (this.checkInside(src_path, dest_path))
			{
				this.drag_dest_box = null;
			}
		}
	}
	
	
	/**
	 * Click item
	 */
	void onSelectItem(Dict item)
	{
		BaseLayoutModel page_layout = this.parent_widget.getFrameLayout();
		BaseModel widget = page_layout.model(item.get("model_path"));
		this.parent_widget.updateCurrentWidget(widget);
	}
	
	
	/**
	 * Context menu
	 */
	void onItemContextMenu(var e, Dict item)
	{
		BaseLayoutModel page_layout = this.parent_widget.getFrameLayout();
		BaseModel widget = page_layout.model(item.get("model_path"));
		
		this.parent_widget.updateCurrentWidget(widget);
		
		int x = e.layerX;
		int y = e.layerY;
		
		ContextMenuModel context_menu = this.getWidget("context_menu");
		context_menu.show(x, y);
	}
	
	
	/**
	 * Context menu click
	 */
	void onContextClickItem(Dict item)
	{
		string item_key = item.get("key");
		ContextMenuModel context_menu = this.getWidget("context_menu");
		context_menu.hide();
		
		BaseModel current_widget = this.parent_widget.getCurrentWidget();
		if (current_widget == null) return;
		
		if (item_key == "add")
		{
			this.addWidgetAfter(current_widget);
		}
		else if (item_key == "remove")
		{
			this.removeWidget(current_widget);
		}
	}
}