/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.WidgetPage;

use Runtime.BaseObject;
use Runtime.BaseProvider;
use Runtime.Web.BaseLayoutModel;
use BayLang.Constructor.WidgetPage.WidgetManagerAnnotation;
use BayLang.Constructor.WidgetPage.WidgetSettingsInterface;


class EditorProvider extends BaseProvider
{
	Collection<WidgetManagerAnnotation> managers = [];
	Collection<WidgetSettingsInterface> widgets = [];
	Dict<WidgetSettingsInterface> settings = {};
	
	
	/**
	 * Init provider
	 */
	async void init()
	{
		/* Get widgets managers */
		Vector<WidgetManagerAnnotation> managers = @.getEntities(classof WidgetManagerAnnotation);
		for (int i=0; i<managers.count(); i++)
		{
			WidgetManagerAnnotation annotation = managers.get(i);
			this.managers.push(annotation.factory());
		}
		
		/* Get widgets settings */
		for (int i=0; i<this.managers.count(); i++)
		{
			WidgetManagerAnnotation manager = this.managers.get(i);
			Collection<string> widgets = manager.getWidgetSettings();
			for (int j=0; j<widgets.count(); j++)
			{
				WidgetSettingsInterface widget = widgets.get(j);
				
				/* Add widget */
				this.widgets.push(widget);
				
				/* Add widget by name */
				this.settings.set(widget.getComponentName(), widget);
			}
		}
	}
	
	
	/**
	 * Returns widgets list
	 */
	Collection<WidgetSettingsInterface> getWidgets() => this.widgets.slice();
	
	
	/**
	 * Find settings by class name
	 */
	Collection<WidgetSettingsInterface> findClassName(string class_name) =>
		this.widgets.findItem(
			bool (WidgetSettingsInterface item) use (class_name) =>
				item::getClassName() == class_name
		)
	;
	
	
	/**
	 * Get widget by component name
	 */
	WidgetSettingsInterface getWidgetSettings(string component_name) =>
		this.settings.get(component_name)
	;
}