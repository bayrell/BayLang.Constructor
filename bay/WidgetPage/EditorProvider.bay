/*!
 *  BayLang Constructor
 */

namespace BayLang.Constructor.WidgetPage;

use Runtime.lib;
use Runtime.BaseObject;
use Runtime.BaseProvider;
use Runtime.Web.BaseLayoutModel;
use Runtime.Web.RenderContainer;
use BayLang.Constructor.WidgetPage.WidgetManagerAnnotation;
use BayLang.Constructor.WidgetPage.WidgetSettingsInterface;


class EditorProvider extends BaseProvider
{
	Collection<Dict> groups = [];
	Collection<WidgetManagerAnnotation> managers = [];
	Collection<WidgetSettingsInterface> widgets = [];
	Dict<WidgetSettingsInterface> settings = {};
	
	
	/**
	 * Add group
	 */
	void addGroup(Dict group)
	{
		string group_name = group.get("name");
		Dict item = this.groups.findItem(lib::equalAttr("name", group_name));
		if (item != null) return;
		this.groups.push(group);
	}
	
	
	/**
	 * Init provider
	 */
	async void init()
	{
		/* Get widgets managers */
		Vector<WidgetManagerAnnotation> managers = @.getEntities(
			classof WidgetManagerAnnotation
		);
		for (int i=0; i<managers.count(); i++)
		{
			WidgetManagerAnnotation annotation = managers.get(i);
			this.managers.push(annotation.factory());
		}
		
		/* Get widgets */
		for (int i=0; i<this.managers.count(); i++)
		{
			WidgetManagerAnnotation manager = this.managers.get(i);
			
			/* Get groups settings */
			Dict groups = manager.getGroupSettings();
			Collection group_names = groups.keys();
			for (int j=0; j<group_names.count(); j++)
			{
				string group_name = group_names.get(j);
				Dict group = groups.get(group_name);
				group.set("name", group_name);
				this.addGroup(group);
			}
			
			/* Get widgets settings */
			Collection<string> widgets = manager.getWidgetSettings();
			for (int j=0; j<widgets.count(); j++)
			{
				WidgetSettingsInterface widget_settings = widgets.get(j);
				
				/* Add widget */
				this.widgets.push(widget_settings);
				
				/* Add settings */
				this.settings.set(widget_settings::getClassName(), widget_settings);
				
				/* Add widget by model name */
				if (widget_settings.isModel())
				{
					this.settings.set(widget_settings.getModelName(), widget_settings);
				}
				
				/* Add widget by component name */
				else
				{
					this.settings.set(widget_settings.getComponentName(), widget_settings);
				}
			}
		}
		
		/* Widgets init */
		for (int i=0; i<this.managers.count(); i++)
		{
			WidgetManagerAnnotation manager = this.managers.get(i);
			manager.init(this);
		}
		
		/* Sort groups */
		this.groups = this.groups.sort(lib::sortAttr("priority", "asc"));
	}
	
	
	/**
	 * Returns groups list
	 */
	Collection getGroups() => this.groups.slice();
	
	
	/**
	 * Returns widgets list
	 */
	Collection<WidgetSettingsInterface> getWidgets() => this.widgets.slice();
	
	
	/**
	 * Returns widget settings
	 */
	WidgetSettingsInterface get(string class_name) => this.settings.get(class_name);
	
	
	/**
	 * Get model settings
	 */
	WidgetSettingsInterface getModelSettings(string widget)
	{
		/* Find settings */
		for (int i=0; i<this.widgets.count(); i++)
		{
			WidgetSettingsInterface settings = this.widgets.get(i);
			if (not settings.isModel()) continue;
			if (settings.checkWidget(widget))
			{
				return settings;
			}
		}
		
		return null;
	}
	
	
	/**
	 * Get widget settings
	 */
	WidgetSettingsInterface getWidgetSettings(string widget)
	{
		/* Find settings */
		for (int i=0; i<this.widgets.count(); i++)
		{
			WidgetSettingsInterface settings = this.widgets.get(i);
			if (settings.isModel()) continue;
			if (settings.checkWidget(widget))
			{
				return settings;
			}
		}
		
		return null;
	}
}